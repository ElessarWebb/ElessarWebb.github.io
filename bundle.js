!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=22)}([function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){(function(e,r){var a;(function(){function o(e,t){return e.set(t[0],t[1]),e}function i(e,t){return e.add(t),e}function l(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function u(e,t,n,r){for(var a=-1,o=null==e?0:e.length;++a<o;){var i=e[a];t(r,i,n(i),e)}return r}function c(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function s(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function f(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function p(e,t){for(var n=-1,r=null==e?0:e.length,a=0,o=[];++n<r;){var i=e[n];t(i,n,e)&&(o[a++]=i)}return o}function d(e,t){return!!(null==e?0:e.length)&&E(e,t,0)>-1}function h(e,t,n){for(var r=-1,a=null==e?0:e.length;++r<a;)if(n(t,e[r]))return!0;return!1}function b(e,t){for(var n=-1,r=null==e?0:e.length,a=Array(r);++n<r;)a[n]=t(e[n],n,e);return a}function m(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}function g(e,t,n,r){var a=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++a]);++a<o;)n=t(n,e[a],a,e);return n}function v(e,t,n,r){var a=null==e?0:e.length;for(r&&a&&(n=e[--a]);a--;)n=t(n,e[a],a,e);return n}function y(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function w(e){return e.split("")}function _(e){return e.match(Bt)||[]}function k(e,t,n){var r;return n(e,function(e,n,a){if(t(e,n,a))return r=n,!1}),r}function x(e,t,n,r){for(var a=e.length,o=n+(r?1:-1);r?o--:++o<a;)if(t(e[o],o,e))return o;return-1}function E(e,t,n){return t===t?X(e,t,n):x(e,T,n)}function F(e,t,n,r){for(var a=n-1,o=e.length;++a<o;)if(r(e[a],t))return a;return-1}function T(e){return e!==e}function S(e,t){var n=null==e?0:e.length;return n?j(e,t)/n:Ne}function C(e){return function(t){return null==t?ae:t[e]}}function P(e){return function(t){return null==e?ae:e[t]}}function O(e,t,n,r,a){return a(e,function(e,a,o){n=r?(r=!1,e):t(n,e,a,o)}),n}function A(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}function j(e,t){for(var n,r=-1,a=e.length;++r<a;){var o=t(e[r]);o!==ae&&(n=n===ae?o:n+o)}return n}function R(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function M(e,t){return b(t,function(t){return[t,e[t]]})}function N(e){return function(t){return e(t)}}function D(e,t){return b(t,function(t){return e[t]})}function I(e,t){return e.has(t)}function z(e,t){for(var n=-1,r=e.length;++n<r&&E(t,e[n],0)>-1;);return n}function L(e,t){for(var n=e.length;n--&&E(t,e[n],0)>-1;);return n}function B(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}function U(e){return"\\"+Cn[e]}function q(e,t){return null==e?ae:e[t]}function W(e){return yn.test(e)}function $(e){return wn.test(e)}function H(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}function V(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function Q(e,t){return function(n){return e(t(n))}}function K(e,t){for(var n=-1,r=e.length,a=0,o=[];++n<r;){var i=e[n];i!==t&&i!==se||(e[n]=se,o[a++]=n)}return o}function Y(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function J(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function X(e,t,n){for(var r=n-1,a=e.length;++r<a;)if(e[r]===t)return r;return-1}function G(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}function Z(e){return W(e)?te(e):Hn(e)}function ee(e){return W(e)?ne(e):w(e)}function te(e){for(var t=gn.lastIndex=0;gn.test(e);)++t;return t}function ne(e){return e.match(gn)||[]}function re(e){return e.match(vn)||[]}var ae,oe=200,ie="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",le="Expected a function",ue="__lodash_hash_undefined__",ce=500,se="__lodash_placeholder__",fe=1,pe=2,de=4,he=1,be=2,me=1,ge=2,ve=4,ye=8,we=16,_e=32,ke=64,xe=128,Ee=256,Fe=512,Te=30,Se="...",Ce=800,Pe=16,Oe=1,Ae=2,je=1/0,Re=9007199254740991,Me=1.7976931348623157e308,Ne=NaN,De=4294967295,Ie=De-1,ze=De>>>1,Le=[["ary",xe],["bind",me],["bindKey",ge],["curry",ye],["curryRight",we],["flip",Fe],["partial",_e],["partialRight",ke],["rearg",Ee]],Be="[object Arguments]",Ue="[object Array]",qe="[object AsyncFunction]",We="[object Boolean]",$e="[object Date]",He="[object DOMException]",Ve="[object Error]",Qe="[object Function]",Ke="[object GeneratorFunction]",Ye="[object Map]",Je="[object Number]",Xe="[object Null]",Ge="[object Object]",Ze="[object Proxy]",et="[object RegExp]",tt="[object Set]",nt="[object String]",rt="[object Symbol]",at="[object Undefined]",ot="[object WeakMap]",it="[object WeakSet]",lt="[object ArrayBuffer]",ut="[object DataView]",ct="[object Float32Array]",st="[object Float64Array]",ft="[object Int8Array]",pt="[object Int16Array]",dt="[object Int32Array]",ht="[object Uint8Array]",bt="[object Uint8ClampedArray]",mt="[object Uint16Array]",gt="[object Uint32Array]",vt=/\b__p \+= '';/g,yt=/\b(__p \+=) '' \+/g,wt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_t=/&(?:amp|lt|gt|quot|#39);/g,kt=/[&<>"']/g,xt=RegExp(_t.source),Et=RegExp(kt.source),Ft=/<%-([\s\S]+?)%>/g,Tt=/<%([\s\S]+?)%>/g,St=/<%=([\s\S]+?)%>/g,Ct=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Pt=/^\w*$/,Ot=/^\./,At=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,jt=/[\\^$.*+?()[\]{}|]/g,Rt=RegExp(jt.source),Mt=/^\s+|\s+$/g,Nt=/^\s+/,Dt=/\s+$/,It=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,zt=/\{\n\/\* \[wrapped with (.+)\] \*/,Lt=/,? & /,Bt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Ut=/\\(\\)?/g,qt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Wt=/\w*$/,$t=/^[-+]0x[0-9a-f]+$/i,Ht=/^0b[01]+$/i,Vt=/^\[object .+?Constructor\]$/,Qt=/^0o[0-7]+$/i,Kt=/^(?:0|[1-9]\d*)$/,Yt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Jt=/($^)/,Xt=/['\n\r\u2028\u2029\\]/g,Gt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Zt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",en="["+Zt+"]",tn="["+Gt+"]",nn="[a-z\\xdf-\\xf6\\xf8-\\xff]",rn="[^\\ud800-\\udfff"+Zt+"\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",an="\\ud83c[\\udffb-\\udfff]",on="(?:\\ud83c[\\udde6-\\uddff]){2}",ln="[\\ud800-\\udbff][\\udc00-\\udfff]",un="[A-Z\\xc0-\\xd6\\xd8-\\xde]",cn="(?:"+nn+"|"+rn+")",sn="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",fn="(?:\\u200d(?:"+["[^\\ud800-\\udfff]",on,ln].join("|")+")[\\ufe0e\\ufe0f]?"+sn+")*",pn="[\\ufe0e\\ufe0f]?"+sn+fn,dn="(?:"+["[\\u2700-\\u27bf]",on,ln].join("|")+")"+pn,hn="(?:"+["[^\\ud800-\\udfff]"+tn+"?",tn,on,ln,"[\\ud800-\\udfff]"].join("|")+")",bn=RegExp("['’]","g"),mn=RegExp(tn,"g"),gn=RegExp(an+"(?="+an+")|"+hn+pn,"g"),vn=RegExp([un+"?"+nn+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[en,un,"$"].join("|")+")","(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[en,un+cn,"$"].join("|")+")",un+"?"+cn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",un+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)","\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)","\\d+",dn].join("|"),"g"),yn=RegExp("[\\u200d\\ud800-\\udfff"+Gt+"\\ufe0e\\ufe0f]"),wn=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,_n=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],kn=-1,xn={};xn[ct]=xn[st]=xn[ft]=xn[pt]=xn[dt]=xn[ht]=xn[bt]=xn[mt]=xn[gt]=!0,xn[Be]=xn[Ue]=xn[lt]=xn[We]=xn[ut]=xn[$e]=xn[Ve]=xn[Qe]=xn[Ye]=xn[Je]=xn[Ge]=xn[et]=xn[tt]=xn[nt]=xn[ot]=!1;var En={};En[Be]=En[Ue]=En[lt]=En[ut]=En[We]=En[$e]=En[ct]=En[st]=En[ft]=En[pt]=En[dt]=En[Ye]=En[Je]=En[Ge]=En[et]=En[tt]=En[nt]=En[rt]=En[ht]=En[bt]=En[mt]=En[gt]=!0,En[Ve]=En[Qe]=En[ot]=!1;var Fn={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"},Tn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Sn={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},Cn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pn=parseFloat,On=parseInt,An="object"==typeof e&&e&&e.Object===Object&&e,jn="object"==typeof self&&self&&self.Object===Object&&self,Rn=An||jn||Function("return this")(),Mn="object"==typeof t&&t&&!t.nodeType&&t,Nn=Mn&&"object"==typeof r&&r&&!r.nodeType&&r,Dn=Nn&&Nn.exports===Mn,In=Dn&&An.process,zn=function(){try{return In&&In.binding&&In.binding("util")}catch(e){}}(),Ln=zn&&zn.isArrayBuffer,Bn=zn&&zn.isDate,Un=zn&&zn.isMap,qn=zn&&zn.isRegExp,Wn=zn&&zn.isSet,$n=zn&&zn.isTypedArray,Hn=C("length"),Vn=P(Fn),Qn=P(Tn),Kn=P(Sn),Yn=function e(t){function n(e){if(ou(e)&&!gp(e)&&!(e instanceof w)){if(e instanceof a)return e;if(ms.call(e,"__wrapped__"))return ni(e)}return new a(e)}function r(){}function a(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=ae}function w(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=De,this.__views__=[]}function P(){var e=new w(this.__wrapped__);return e.__actions__=Ia(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ia(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ia(this.__views__),e}function X(){if(this.__filtered__){var e=new w(this);e.__dir__=-1,e.__filtered__=!0}else e=this.clone(),e.__dir__*=-1;return e}function te(){var e=this.__wrapped__.value(),t=this.__dir__,n=gp(e),r=t<0,a=n?e.length:0,o=So(0,a,this.__views__),i=o.start,l=o.end,u=l-i,c=r?l:i-1,s=this.__iteratees__,f=s.length,p=0,d=Vs(u,this.__takeCount__);if(!n||!r&&a==u&&d==u)return va(e,this.__actions__);var h=[];e:for(;u--&&p<d;){c+=t;for(var b=-1,m=e[c];++b<f;){var g=s[b],v=g.iteratee,y=g.type,w=v(m);if(y==Ae)m=w;else if(!w){if(y==Oe)continue e;break e}}h[p++]=m}return h}function ne(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Bt(){this.__data__=nf?nf(null):{},this.size=0}function Gt(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}function Zt(e){var t=this.__data__;if(nf){var n=t[e];return n===ue?ae:n}return ms.call(t,e)?t[e]:ae}function en(e){var t=this.__data__;return nf?t[e]!==ae:ms.call(t,e)}function tn(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nf&&t===ae?ue:t,this}function nn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function rn(){this.__data__=[],this.size=0}function an(e){var t=this.__data__,n=Jn(t,e);return!(n<0)&&(n==t.length-1?t.pop():Os.call(t,n,1),--this.size,!0)}function on(e){var t=this.__data__,n=Jn(t,e);return n<0?ae:t[n][1]}function ln(e){return Jn(this.__data__,e)>-1}function un(e,t){var n=this.__data__,r=Jn(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}function cn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function sn(){this.size=0,this.__data__={hash:new ne,map:new(Gs||nn),string:new ne}}function fn(e){var t=xo(this,e).delete(e);return this.size-=t?1:0,t}function pn(e){return xo(this,e).get(e)}function dn(e){return xo(this,e).has(e)}function hn(e,t){var n=xo(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}function gn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new cn;++t<n;)this.add(e[t])}function vn(e){return this.__data__.set(e,ue),this}function yn(e){return this.__data__.has(e)}function wn(e){var t=this.__data__=new nn(e);this.size=t.size}function Fn(){this.__data__=new nn,this.size=0}function Tn(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}function Sn(e){return this.__data__.get(e)}function Cn(e){return this.__data__.has(e)}function An(e,t){var n=this.__data__;if(n instanceof nn){var r=n.__data__;if(!Gs||r.length<oe-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new cn(r)}return n.set(e,t),this.size=n.size,this}function jn(e,t){var n=gp(e),r=!n&&mp(e),a=!n&&!r&&yp(e),o=!n&&!r&&!a&&Ep(e),i=n||r||a||o,l=i?R(e.length,cs):[],u=l.length;for(var c in e)!t&&!ms.call(e,c)||i&&("length"==c||a&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||No(c,u))||l.push(c);return l}function Mn(e){var t=e.length;return t?e[Zr(0,t-1)]:ae}function Nn(e,t){return Go(Ia(e),nr(t,0,e.length))}function In(e){return Go(Ia(e))}function zn(e,t,n){(n===ae||Hl(e[t],n))&&(n!==ae||t in e)||er(e,t,n)}function Hn(e,t,n){var r=e[t];ms.call(e,t)&&Hl(r,n)&&(n!==ae||t in e)||er(e,t,n)}function Jn(e,t){for(var n=e.length;n--;)if(Hl(e[n][0],t))return n;return-1}function Xn(e,t,n,r){return bf(e,function(e,a,o){t(r,e,n(e),o)}),r}function Gn(e,t){return e&&za(t,Bu(t),e)}function Zn(e,t){return e&&za(t,Uu(t),e)}function er(e,t,n){"__proto__"==t&&Ms?Ms(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function tr(e,t){for(var n=-1,r=t.length,a=ns(r),o=null==e;++n<r;)a[n]=o?ae:Iu(e,t[n]);return a}function nr(e,t,n){return e===e&&(n!==ae&&(e=e<=n?e:n),t!==ae&&(e=e>=t?e:t)),e}function rr(e,t,n,r,a,o){var i,l=t&fe,u=t&pe,s=t&de;if(n&&(i=a?n(e,r,a,o):n(e)),i!==ae)return i;if(!au(e))return e;var f=gp(e);if(f){if(i=Oo(e),!l)return Ia(e,i)}else{var p=Sf(e),d=p==Qe||p==Ke;if(yp(e))return Fa(e,l);if(p==Ge||p==Be||d&&!a){if(i=u||d?{}:Ao(e),!l)return u?Ba(e,Zn(i,e)):La(e,Gn(i,e))}else{if(!En[p])return a?e:{};i=jo(e,p,rr,l)}}o||(o=new wn);var h=o.get(e);if(h)return h;o.set(e,i);var b=s?u?yo:vo:u?Uu:Bu,m=f?ae:b(e);return c(m||e,function(r,a){m&&(a=r,r=e[a]),Hn(i,a,rr(r,t,n,a,e,o))}),i}function ar(e){var t=Bu(e);return function(n){return or(n,e,t)}}function or(e,t,n){var r=n.length;if(null==e)return!r;for(e=ls(e);r--;){var a=n[r],o=t[a],i=e[a];if(i===ae&&!(a in e)||!o(i))return!1}return!0}function ir(e,t,n){if("function"!=typeof e)throw new ss(le);return Of(function(){e.apply(ae,n)},t)}function lr(e,t,n,r){var a=-1,o=d,i=!0,l=e.length,u=[],c=t.length;if(!l)return u;n&&(t=b(t,N(n))),r?(o=h,i=!1):t.length>=oe&&(o=I,i=!1,t=new gn(t));e:for(;++a<l;){var s=e[a],f=null==n?s:n(s);if(s=r||0!==s?s:0,i&&f===f){for(var p=c;p--;)if(t[p]===f)continue e;u.push(s)}else o(t,f,r)||u.push(s)}return u}function ur(e,t){var n=!0;return bf(e,function(e,r,a){return n=!!t(e,r,a)}),n}function cr(e,t,n){for(var r=-1,a=e.length;++r<a;){var o=e[r],i=t(o);if(null!=i&&(l===ae?i===i&&!mu(i):n(i,l)))var l=i,u=o}return u}function sr(e,t,n,r){var a=e.length;for(n=ku(n),n<0&&(n=-n>a?0:a+n),r=r===ae||r>a?a:ku(r),r<0&&(r+=a),r=n>r?0:xu(r);n<r;)e[n++]=t;return e}function fr(e,t){var n=[];return bf(e,function(e,r,a){t(e,r,a)&&n.push(e)}),n}function pr(e,t,n,r,a){var o=-1,i=e.length;for(n||(n=Mo),a||(a=[]);++o<i;){var l=e[o];t>0&&n(l)?t>1?pr(l,t-1,n,r,a):m(a,l):r||(a[a.length]=l)}return a}function dr(e,t){return e&&gf(e,t,Bu)}function hr(e,t){return e&&vf(e,t,Bu)}function br(e,t){return p(t,function(t){return tu(e[t])})}function mr(e,t){t=xa(t,e);for(var n=0,r=t.length;null!=e&&n<r;)e=e[Zo(t[n++])];return n&&n==r?e:ae}function gr(e,t,n){var r=t(e);return gp(e)?r:m(r,n(e))}function vr(e){return null==e?e===ae?at:Xe:Rs&&Rs in ls(e)?To(e):Vo(e)}function yr(e,t){return e>t}function wr(e,t){return null!=e&&ms.call(e,t)}function _r(e,t){return null!=e&&t in ls(e)}function kr(e,t,n){return e>=Vs(t,n)&&e<Hs(t,n)}function xr(e,t,n){for(var r=n?h:d,a=e[0].length,o=e.length,i=o,l=ns(o),u=1/0,c=[];i--;){var s=e[i];i&&t&&(s=b(s,N(t))),u=Vs(s.length,u),l[i]=!n&&(t||a>=120&&s.length>=120)?new gn(i&&s):ae}s=e[0];var f=-1,p=l[0];e:for(;++f<a&&c.length<u;){var m=s[f],g=t?t(m):m;if(m=n||0!==m?m:0,!(p?I(p,g):r(c,g,n))){for(i=o;--i;){var v=l[i];if(!(v?I(v,g):r(e[i],g,n)))continue e}p&&p.push(g),c.push(m)}}return c}function Er(e,t,n,r){return dr(e,function(e,a,o){t(r,n(e),a,o)}),r}function Fr(e,t,n){t=xa(t,e),e=Ko(e,t);var r=null==e?e:e[Zo(_i(t))];return null==r?ae:l(r,e,n)}function Tr(e){return ou(e)&&vr(e)==Be}function Sr(e){return ou(e)&&vr(e)==lt}function Cr(e){return ou(e)&&vr(e)==$e}function Pr(e,t,n,r,a){return e===t||(null==e||null==t||!ou(e)&&!ou(t)?e!==e&&t!==t:Or(e,t,n,r,Pr,a))}function Or(e,t,n,r,a,o){var i=gp(e),l=gp(t),u=i?Ue:Sf(e),c=l?Ue:Sf(t);u=u==Be?Ge:u,c=c==Be?Ge:c;var s=u==Ge,f=c==Ge,p=u==c;if(p&&yp(e)){if(!yp(t))return!1;i=!0,s=!1}if(p&&!s)return o||(o=new wn),i||Ep(e)?ho(e,t,n,r,a,o):bo(e,t,u,n,r,a,o);if(!(n&he)){var d=s&&ms.call(e,"__wrapped__"),h=f&&ms.call(t,"__wrapped__");if(d||h){var b=d?e.value():e,m=h?t.value():t;return o||(o=new wn),a(b,m,n,r,o)}}return!!p&&(o||(o=new wn),mo(e,t,n,r,a,o))}function Ar(e){return ou(e)&&Sf(e)==Ye}function jr(e,t,n,r){var a=n.length,o=a,i=!r;if(null==e)return!o;for(e=ls(e);a--;){var l=n[a];if(i&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++a<o;){l=n[a];var u=l[0],c=e[u],s=l[1];if(i&&l[2]){if(c===ae&&!(u in e))return!1}else{var f=new wn;if(r)var p=r(c,s,u,e,t,f);if(!(p===ae?Pr(s,c,he|be,r,f):p))return!1}}return!0}function Rr(e){return!(!au(e)||Bo(e))&&(tu(e)?ks:Vt).test(ei(e))}function Mr(e){return ou(e)&&vr(e)==et}function Nr(e){return ou(e)&&Sf(e)==tt}function Dr(e){return ou(e)&&ru(e.length)&&!!xn[vr(e)]}function Ir(e){return"function"==typeof e?e:null==e?Oc:"object"==typeof e?gp(e)?Wr(e[0],e[1]):qr(e):zc(e)}function zr(e){if(!Uo(e))return $s(e);var t=[];for(var n in ls(e))ms.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Lr(e){if(!au(e))return Ho(e);var t=Uo(e),n=[];for(var r in e)("constructor"!=r||!t&&ms.call(e,r))&&n.push(r);return n}function Br(e,t){return e<t}function Ur(e,t){var n=-1,r=Vl(e)?ns(e.length):[];return bf(e,function(e,a,o){r[++n]=t(e,a,o)}),r}function qr(e){var t=Eo(e);return 1==t.length&&t[0][2]?Wo(t[0][0],t[0][1]):function(n){return n===e||jr(n,e,t)}}function Wr(e,t){return Io(e)&&qo(t)?Wo(Zo(e),t):function(n){var r=Iu(n,e);return r===ae&&r===t?Lu(n,e):Pr(t,r,he|be)}}function $r(e,t,n,r,a){e!==t&&gf(t,function(o,i){if(au(o))a||(a=new wn),Hr(e,t,i,n,$r,r,a);else{var l=r?r(e[i],o,i+"",e,t,a):ae;l===ae&&(l=o),zn(e,i,l)}},Uu)}function Hr(e,t,n,r,a,o,i){var l=e[n],u=t[n],c=i.get(u);if(c)return void zn(e,n,c);var s=o?o(l,u,n+"",e,t,i):ae,f=s===ae;if(f){var p=gp(u),d=!p&&yp(u),h=!p&&!d&&Ep(u);s=u,p||d||h?gp(l)?s=l:Ql(l)?s=Ia(l):d?(f=!1,s=Fa(u,!0)):h?(f=!1,s=ja(u,!0)):s=[]:du(u)||mp(u)?(s=l,mp(l)?s=Fu(l):(!au(l)||r&&tu(l))&&(s=Ao(u))):f=!1}f&&(i.set(u,s),a(s,u,r,o,i),i.delete(u)),zn(e,n,s)}function Vr(e,t){var n=e.length;if(n)return t+=t<0?n:0,No(t,n)?e[t]:ae}function Qr(e,t,n){var r=-1;return t=b(t.length?t:[Oc],N(ko())),A(Ur(e,function(e,n,a){return{criteria:b(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return Ma(e,t,n)})}function Kr(e,t){return Yr(e,t,function(t,n){return Lu(e,n)})}function Yr(e,t,n){for(var r=-1,a=t.length,o={};++r<a;){var i=t[r],l=mr(e,i);n(l,i)&&oa(o,xa(i,e),l)}return o}function Jr(e){return function(t){return mr(t,e)}}function Xr(e,t,n,r){var a=r?F:E,o=-1,i=t.length,l=e;for(e===t&&(t=Ia(t)),n&&(l=b(e,N(n)));++o<i;)for(var u=0,c=t[o],s=n?n(c):c;(u=a(l,s,u,r))>-1;)l!==e&&Os.call(l,u,1),Os.call(e,u,1);return e}function Gr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var a=t[n];if(n==r||a!==o){var o=a;No(a)?Os.call(e,a,1):ba(e,a)}}return e}function Zr(e,t){return e+Ls(Ys()*(t-e+1))}function ea(e,t,n,r){for(var a=-1,o=Hs(zs((t-e)/(n||1)),0),i=ns(o);o--;)i[r?o:++a]=e,e+=n;return i}function ta(e,t){var n="";if(!e||t<1||t>Re)return n;do{t%2&&(n+=e),(t=Ls(t/2))&&(e+=e)}while(t);return n}function na(e,t){return Af(Qo(e,t,Oc),e+"")}function ra(e){return Mn(Zu(e))}function aa(e,t){var n=Zu(e);return Go(n,nr(t,0,n.length))}function oa(e,t,n,r){if(!au(e))return e;t=xa(t,e);for(var a=-1,o=t.length,i=o-1,l=e;null!=l&&++a<o;){var u=Zo(t[a]),c=n;if(a!=i){var s=l[u];c=r?r(s,u,l):ae,c===ae&&(c=au(s)?s:No(t[a+1])?[]:{})}Hn(l,u,c),l=l[u]}return e}function ia(e){return Go(Zu(e))}function la(e,t,n){var r=-1,a=e.length;t<0&&(t=-t>a?0:a+t),n=n>a?a:n,n<0&&(n+=a),a=t>n?0:n-t>>>0,t>>>=0;for(var o=ns(a);++r<a;)o[r]=e[r+t];return o}function ua(e,t){var n;return bf(e,function(e,r,a){return!(n=t(e,r,a))}),!!n}function ca(e,t,n){var r=0,a=null==e?r:e.length;if("number"==typeof t&&t===t&&a<=ze){for(;r<a;){var o=r+a>>>1,i=e[o];null!==i&&!mu(i)&&(n?i<=t:i<t)?r=o+1:a=o}return a}return sa(e,t,Oc,n)}function sa(e,t,n,r){t=n(t);for(var a=0,o=null==e?0:e.length,i=t!==t,l=null===t,u=mu(t),c=t===ae;a<o;){var s=Ls((a+o)/2),f=n(e[s]),p=f!==ae,d=null===f,h=f===f,b=mu(f);if(i)var m=r||h;else m=c?h&&(r||p):l?h&&p&&(r||!d):u?h&&p&&!d&&(r||!b):!d&&!b&&(r?f<=t:f<t);m?a=s+1:o=s}return Vs(o,Ie)}function fa(e,t){for(var n=-1,r=e.length,a=0,o=[];++n<r;){var i=e[n],l=t?t(i):i;if(!n||!Hl(l,u)){var u=l;o[a++]=0===i?0:i}}return o}function pa(e){return"number"==typeof e?e:mu(e)?Ne:+e}function da(e){if("string"==typeof e)return e;if(gp(e))return b(e,da)+"";if(mu(e))return df?df.call(e):"";var t=e+"";return"0"==t&&1/e==-je?"-0":t}function ha(e,t,n){var r=-1,a=d,o=e.length,i=!0,l=[],u=l;if(n)i=!1,a=h;else if(o>=oe){var c=t?null:xf(e);if(c)return Y(c);i=!1,a=I,u=new gn}else u=t?[]:l;e:for(;++r<o;){var s=e[r],f=t?t(s):s;if(s=n||0!==s?s:0,i&&f===f){for(var p=u.length;p--;)if(u[p]===f)continue e;t&&u.push(f),l.push(s)}else a(u,f,n)||(u!==l&&u.push(f),l.push(s))}return l}function ba(e,t){return t=xa(t,e),null==(e=Ko(e,t))||delete e[Zo(_i(t))]}function ma(e,t,n,r){return oa(e,t,n(mr(e,t)),r)}function ga(e,t,n,r){for(var a=e.length,o=r?a:-1;(r?o--:++o<a)&&t(e[o],o,e););return n?la(e,r?0:o,r?o+1:a):la(e,r?o+1:0,r?a:o)}function va(e,t){var n=e;return n instanceof w&&(n=n.value()),g(t,function(e,t){return t.func.apply(t.thisArg,m([e],t.args))},n)}function ya(e,t,n){var r=e.length;if(r<2)return r?ha(e[0]):[];for(var a=-1,o=ns(r);++a<r;)for(var i=e[a],l=-1;++l<r;)l!=a&&(o[a]=lr(o[a]||i,e[l],t,n));return ha(pr(o,1),t,n)}function wa(e,t,n){for(var r=-1,a=e.length,o=t.length,i={};++r<a;){var l=r<o?t[r]:ae;n(i,e[r],l)}return i}function _a(e){return Ql(e)?e:[]}function ka(e){return"function"==typeof e?e:Oc}function xa(e,t){return gp(e)?e:Io(e,t)?[e]:jf(Su(e))}function Ea(e,t,n){var r=e.length;return n=n===ae?r:n,!t&&n>=r?e:la(e,t,n)}function Fa(e,t){if(t)return e.slice();var n=e.length,r=Ts?Ts(n):new e.constructor(n);return e.copy(r),r}function Ta(e){var t=new e.constructor(e.byteLength);return new Fs(t).set(new Fs(e)),t}function Sa(e,t){var n=t?Ta(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}function Ca(e,t,n){return g(t?n(V(e),fe):V(e),o,new e.constructor)}function Pa(e){var t=new e.constructor(e.source,Wt.exec(e));return t.lastIndex=e.lastIndex,t}function Oa(e,t,n){return g(t?n(Y(e),fe):Y(e),i,new e.constructor)}function Aa(e){return pf?ls(pf.call(e)):{}}function ja(e,t){var n=t?Ta(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Ra(e,t){if(e!==t){var n=e!==ae,r=null===e,a=e===e,o=mu(e),i=t!==ae,l=null===t,u=t===t,c=mu(t);if(!l&&!c&&!o&&e>t||o&&i&&u&&!l&&!c||r&&i&&u||!n&&u||!a)return 1;if(!r&&!o&&!c&&e<t||c&&n&&a&&!r&&!o||l&&n&&a||!i&&a||!u)return-1}return 0}function Ma(e,t,n){for(var r=-1,a=e.criteria,o=t.criteria,i=a.length,l=n.length;++r<i;){var u=Ra(a[r],o[r]);if(u){if(r>=l)return u;return u*("desc"==n[r]?-1:1)}}return e.index-t.index}function Na(e,t,n,r){for(var a=-1,o=e.length,i=n.length,l=-1,u=t.length,c=Hs(o-i,0),s=ns(u+c),f=!r;++l<u;)s[l]=t[l];for(;++a<i;)(f||a<o)&&(s[n[a]]=e[a]);for(;c--;)s[l++]=e[a++];return s}function Da(e,t,n,r){for(var a=-1,o=e.length,i=-1,l=n.length,u=-1,c=t.length,s=Hs(o-l,0),f=ns(s+c),p=!r;++a<s;)f[a]=e[a];for(var d=a;++u<c;)f[d+u]=t[u];for(;++i<l;)(p||a<o)&&(f[d+n[i]]=e[a++]);return f}function Ia(e,t){var n=-1,r=e.length;for(t||(t=ns(r));++n<r;)t[n]=e[n];return t}function za(e,t,n,r){var a=!n;n||(n={});for(var o=-1,i=t.length;++o<i;){var l=t[o],u=r?r(n[l],e[l],l,n,e):ae;u===ae&&(u=e[l]),a?er(n,l,u):Hn(n,l,u)}return n}function La(e,t){return za(e,Ff(e),t)}function Ba(e,t){return za(e,Tf(e),t)}function Ua(e,t){return function(n,r){var a=gp(n)?u:Xn,o=t?t():{};return a(n,e,ko(r,2),o)}}function qa(e){return na(function(t,n){var r=-1,a=n.length,o=a>1?n[a-1]:ae,i=a>2?n[2]:ae;for(o=e.length>3&&"function"==typeof o?(a--,o):ae,i&&Do(n[0],n[1],i)&&(o=a<3?ae:o,a=1),t=ls(t);++r<a;){var l=n[r];l&&e(t,l,r,o)}return t})}function Wa(e,t){return function(n,r){if(null==n)return n;if(!Vl(n))return e(n,r);for(var a=n.length,o=t?a:-1,i=ls(n);(t?o--:++o<a)&&!1!==r(i[o],o,i););return n}}function $a(e){return function(t,n,r){for(var a=-1,o=ls(t),i=r(t),l=i.length;l--;){var u=i[e?l:++a];if(!1===n(o[u],u,o))break}return t}}function Ha(e,t,n){function r(){return(this&&this!==Rn&&this instanceof r?o:e).apply(a?n:this,arguments)}var a=t&me,o=Ka(e);return r}function Va(e){return function(t){t=Su(t);var n=W(t)?ee(t):ae,r=n?n[0]:t.charAt(0),a=n?Ea(n,1).join(""):t.slice(1);return r[e]()+a}}function Qa(e){return function(t){return g(Fc(oc(t).replace(bn,"")),e,"")}}function Ka(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=hf(e.prototype),r=e.apply(n,t);return au(r)?r:n}}function Ya(e,t,n){function r(){for(var o=arguments.length,i=ns(o),u=o,c=_o(r);u--;)i[u]=arguments[u];var s=o<3&&i[0]!==c&&i[o-1]!==c?[]:K(i,c);return(o-=s.length)<n?io(e,t,Ga,r.placeholder,ae,i,s,ae,ae,n-o):l(this&&this!==Rn&&this instanceof r?a:e,this,i)}var a=Ka(e);return r}function Ja(e){return function(t,n,r){var a=ls(t);if(!Vl(t)){var o=ko(n,3);t=Bu(t),n=function(e){return o(a[e],e,a)}}var i=e(t,n,r);return i>-1?a[o?t[i]:i]:ae}}function Xa(e){return go(function(t){var n=t.length,r=n,o=a.prototype.thru;for(e&&t.reverse();r--;){var i=t[r];if("function"!=typeof i)throw new ss(le);if(o&&!l&&"wrapper"==wo(i))var l=new a([],!0)}for(r=l?r:n;++r<n;){i=t[r];var u=wo(i),c="wrapper"==u?Ef(i):ae;l=c&&Lo(c[0])&&c[1]==(xe|ye|_e|Ee)&&!c[4].length&&1==c[9]?l[wo(c[0])].apply(l,c[3]):1==i.length&&Lo(i)?l[u]():l.thru(i)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&gp(r))return l.plant(r).value();for(var a=0,o=n?t[a].apply(this,e):r;++a<n;)o=t[a].call(this,o);return o}})}function Ga(e,t,n,r,a,o,i,l,u,c){function s(){for(var g=arguments.length,v=ns(g),y=g;y--;)v[y]=arguments[y];if(h)var w=_o(s),_=B(v,w);if(r&&(v=Na(v,r,a,h)),o&&(v=Da(v,o,i,h)),g-=_,h&&g<c){var k=K(v,w);return io(e,t,Ga,s.placeholder,n,v,k,l,u,c-g)}var x=p?n:this,E=d?x[e]:e;return g=v.length,l?v=Yo(v,l):b&&g>1&&v.reverse(),f&&u<g&&(v.length=u),this&&this!==Rn&&this instanceof s&&(E=m||Ka(E)),E.apply(x,v)}var f=t&xe,p=t&me,d=t&ge,h=t&(ye|we),b=t&Fe,m=d?ae:Ka(e);return s}function Za(e,t){return function(n,r){return Er(n,e,t(r),{})}}function eo(e,t){return function(n,r){var a;if(n===ae&&r===ae)return t;if(n!==ae&&(a=n),r!==ae){if(a===ae)return r;"string"==typeof n||"string"==typeof r?(n=da(n),r=da(r)):(n=pa(n),r=pa(r)),a=e(n,r)}return a}}function to(e){return go(function(t){return t=b(t,N(ko())),na(function(n){var r=this;return e(t,function(e){return l(e,r,n)})})})}function no(e,t){t=t===ae?" ":da(t);var n=t.length;if(n<2)return n?ta(t,e):t;var r=ta(t,zs(e/Z(t)));return W(t)?Ea(ee(r),0,e).join(""):r.slice(0,e)}function ro(e,t,n,r){function a(){for(var t=-1,u=arguments.length,c=-1,s=r.length,f=ns(s+u),p=this&&this!==Rn&&this instanceof a?i:e;++c<s;)f[c]=r[c];for(;u--;)f[c++]=arguments[++t];return l(p,o?n:this,f)}var o=t&me,i=Ka(e);return a}function ao(e){return function(t,n,r){return r&&"number"!=typeof r&&Do(t,n,r)&&(n=r=ae),t=_u(t),n===ae?(n=t,t=0):n=_u(n),r=r===ae?t<n?1:-1:_u(r),ea(t,n,r,e)}}function oo(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Eu(t),n=Eu(n)),e(t,n)}}function io(e,t,n,r,a,o,i,l,u,c){var s=t&ye,f=s?i:ae,p=s?ae:i,d=s?o:ae,h=s?ae:o;t|=s?_e:ke,(t&=~(s?ke:_e))&ve||(t&=~(me|ge));var b=[e,t,a,d,f,h,p,l,u,c],m=n.apply(ae,b);return Lo(e)&&Pf(m,b),m.placeholder=r,Jo(m,e,t)}function lo(e){var t=is[e];return function(e,n){if(e=Eu(e),n=null==n?0:Vs(ku(n),292)){var r=(Su(e)+"e").split("e");return r=(Su(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"),+(r[0]+"e"+(+r[1]-n))}return t(e)}}function uo(e){return function(t){var n=Sf(t);return n==Ye?V(t):n==tt?J(t):M(t,e(t))}}function co(e,t,n,r,a,o,i,l){var u=t&ge;if(!u&&"function"!=typeof e)throw new ss(le);var c=r?r.length:0;if(c||(t&=~(_e|ke),r=a=ae),i=i===ae?i:Hs(ku(i),0),l=l===ae?l:ku(l),c-=a?a.length:0,t&ke){var s=r,f=a;r=a=ae}var p=u?ae:Ef(e),d=[e,t,n,r,a,s,f,o,i,l];if(p&&$o(d,p),e=d[0],t=d[1],n=d[2],r=d[3],a=d[4],l=d[9]=d[9]===ae?u?0:e.length:Hs(d[9]-c,0),!l&&t&(ye|we)&&(t&=~(ye|we)),t&&t!=me)h=t==ye||t==we?Ya(e,t,l):t!=_e&&t!=(me|_e)||a.length?Ga.apply(ae,d):ro(e,t,n,r);else var h=Ha(e,t,n);return Jo((p?yf:Pf)(h,d),e,t)}function so(e,t,n,r){return e===ae||Hl(e,ds[n])&&!ms.call(r,n)?t:e}function fo(e,t,n,r,a,o){return au(e)&&au(t)&&(o.set(t,e),$r(e,t,ae,fo,o),o.delete(t)),e}function po(e){return du(e)?ae:e}function ho(e,t,n,r,a,o){var i=n&he,l=e.length,u=t.length;if(l!=u&&!(i&&u>l))return!1;var c=o.get(e);if(c&&o.get(t))return c==t;var s=-1,f=!0,p=n&be?new gn:ae;for(o.set(e,t),o.set(t,e);++s<l;){var d=e[s],h=t[s];if(r)var b=i?r(h,d,s,t,e,o):r(d,h,s,e,t,o);if(b!==ae){if(b)continue;f=!1;break}if(p){if(!y(t,function(e,t){if(!I(p,t)&&(d===e||a(d,e,n,r,o)))return p.push(t)})){f=!1;break}}else if(d!==h&&!a(d,h,n,r,o)){f=!1;break}}return o.delete(e),o.delete(t),f}function bo(e,t,n,r,a,o,i){switch(n){case ut:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case lt:return!(e.byteLength!=t.byteLength||!o(new Fs(e),new Fs(t)));case We:case $e:case Je:return Hl(+e,+t);case Ve:return e.name==t.name&&e.message==t.message;case et:case nt:return e==t+"";case Ye:var l=V;case tt:var u=r&he;if(l||(l=Y),e.size!=t.size&&!u)return!1;var c=i.get(e);if(c)return c==t;r|=be,i.set(e,t);var s=ho(l(e),l(t),r,a,o,i);return i.delete(e),s;case rt:if(pf)return pf.call(e)==pf.call(t)}return!1}function mo(e,t,n,r,a,o){var i=n&he,l=vo(e),u=l.length;if(u!=vo(t).length&&!i)return!1;for(var c=u;c--;){var s=l[c];if(!(i?s in t:ms.call(t,s)))return!1}var f=o.get(e);if(f&&o.get(t))return f==t;var p=!0;o.set(e,t),o.set(t,e);for(var d=i;++c<u;){s=l[c];var h=e[s],b=t[s];if(r)var m=i?r(b,h,s,t,e,o):r(h,b,s,e,t,o);if(!(m===ae?h===b||a(h,b,n,r,o):m)){p=!1;break}d||(d="constructor"==s)}if(p&&!d){var g=e.constructor,v=t.constructor;g!=v&&"constructor"in e&&"constructor"in t&&!("function"==typeof g&&g instanceof g&&"function"==typeof v&&v instanceof v)&&(p=!1)}return o.delete(e),o.delete(t),p}function go(e){return Af(Qo(e,ae,di),e+"")}function vo(e){return gr(e,Bu,Ff)}function yo(e){return gr(e,Uu,Tf)}function wo(e){for(var t=e.name+"",n=af[t],r=ms.call(af,t)?n.length:0;r--;){var a=n[r],o=a.func;if(null==o||o==e)return a.name}return t}function _o(e){return(ms.call(n,"placeholder")?n:e).placeholder}function ko(){var e=n.iteratee||Ac;return e=e===Ac?Ir:e,arguments.length?e(arguments[0],arguments[1]):e}function xo(e,t){var n=e.__data__;return zo(t)?n["string"==typeof t?"string":"hash"]:n.map}function Eo(e){for(var t=Bu(e),n=t.length;n--;){var r=t[n],a=e[r];t[n]=[r,a,qo(a)]}return t}function Fo(e,t){var n=q(e,t);return Rr(n)?n:ae}function To(e){var t=ms.call(e,Rs),n=e[Rs];try{e[Rs]=ae;var r=!0}catch(e){}var a=ys.call(e);return r&&(t?e[Rs]=n:delete e[Rs]),a}function So(e,t,n){for(var r=-1,a=n.length;++r<a;){var o=n[r],i=o.size;switch(o.type){case"drop":e+=i;break;case"dropRight":t-=i;break;case"take":t=Vs(t,e+i);break;case"takeRight":e=Hs(e,t-i)}}return{start:e,end:t}}function Co(e){var t=e.match(zt);return t?t[1].split(Lt):[]}function Po(e,t,n){t=xa(t,e);for(var r=-1,a=t.length,o=!1;++r<a;){var i=Zo(t[r]);if(!(o=null!=e&&n(e,i)))break;e=e[i]}return o||++r!=a?o:!!(a=null==e?0:e.length)&&ru(a)&&No(i,a)&&(gp(e)||mp(e))}function Oo(e){var t=e.length,n=e.constructor(t);return t&&"string"==typeof e[0]&&ms.call(e,"index")&&(n.index=e.index,n.input=e.input),n}function Ao(e){return"function"!=typeof e.constructor||Uo(e)?{}:hf(Ss(e))}function jo(e,t,n,r){var a=e.constructor;switch(t){case lt:return Ta(e);case We:case $e:return new a(+e);case ut:return Sa(e,r);case ct:case st:case ft:case pt:case dt:case ht:case bt:case mt:case gt:return ja(e,r);case Ye:return Ca(e,r,n);case Je:case nt:return new a(e);case et:return Pa(e);case tt:return Oa(e,r,n);case rt:return Aa(e)}}function Ro(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(It,"{\n/* [wrapped with "+t+"] */\n")}function Mo(e){return gp(e)||mp(e)||!!(As&&e&&e[As])}function No(e,t){return!!(t=null==t?Re:t)&&("number"==typeof e||Kt.test(e))&&e>-1&&e%1==0&&e<t}function Do(e,t,n){if(!au(n))return!1;var r=typeof t;return!!("number"==r?Vl(n)&&No(t,n.length):"string"==r&&t in n)&&Hl(n[t],e)}function Io(e,t){if(gp(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!mu(e))||(Pt.test(e)||!Ct.test(e)||null!=t&&e in ls(t))}function zo(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function Lo(e){var t=wo(e),r=n[t];if("function"!=typeof r||!(t in w.prototype))return!1;if(e===r)return!0;var a=Ef(r);return!!a&&e===a[0]}function Bo(e){return!!vs&&vs in e}function Uo(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ds)}function qo(e){return e===e&&!au(e)}function Wo(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==ae||e in ls(n)))}}function $o(e,t){var n=e[1],r=t[1],a=n|r,o=a<(me|ge|xe),i=r==xe&&n==ye||r==xe&&n==Ee&&e[7].length<=t[8]||r==(xe|Ee)&&t[7].length<=t[8]&&n==ye;if(!o&&!i)return e;r&me&&(e[2]=t[2],a|=n&me?0:ve);var l=t[3];if(l){var u=e[3];e[3]=u?Na(u,l,t[4]):l,e[4]=u?K(e[3],se):t[4]}return l=t[5],l&&(u=e[5],e[5]=u?Da(u,l,t[6]):l,e[6]=u?K(e[5],se):t[6]),l=t[7],l&&(e[7]=l),r&xe&&(e[8]=null==e[8]?t[8]:Vs(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=a,e}function Ho(e){var t=[];if(null!=e)for(var n in ls(e))t.push(n);return t}function Vo(e){return ys.call(e)}function Qo(e,t,n){return t=Hs(t===ae?e.length-1:t,0),function(){for(var r=arguments,a=-1,o=Hs(r.length-t,0),i=ns(o);++a<o;)i[a]=r[t+a];a=-1;for(var u=ns(t+1);++a<t;)u[a]=r[a];return u[t]=n(i),l(e,this,u)}}function Ko(e,t){return t.length<2?e:mr(e,la(t,0,-1))}function Yo(e,t){for(var n=e.length,r=Vs(t.length,n),a=Ia(e);r--;){var o=t[r];e[r]=No(o,n)?a[o]:ae}return e}function Jo(e,t,n){var r=t+"";return Af(e,Ro(r,ti(Co(r),n)))}function Xo(e){var t=0,n=0;return function(){var r=Qs(),a=Pe-(r-n);if(n=r,a>0){if(++t>=Ce)return arguments[0]}else t=0;return e.apply(ae,arguments)}}function Go(e,t){var n=-1,r=e.length,a=r-1;for(t=t===ae?r:t;++n<t;){var o=Zr(n,a),i=e[o];e[o]=e[n],e[n]=i}return e.length=t,e}function Zo(e){if("string"==typeof e||mu(e))return e;var t=e+"";return"0"==t&&1/e==-je?"-0":t}function ei(e){if(null!=e){try{return bs.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ti(e,t){return c(Le,function(n){var r="_."+n[0];t&n[1]&&!d(e,r)&&e.push(r)}),e.sort()}function ni(e){if(e instanceof w)return e.clone();var t=new a(e.__wrapped__,e.__chain__);return t.__actions__=Ia(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}function ri(e,t,n){t=(n?Do(e,t,n):t===ae)?1:Hs(ku(t),0);var r=null==e?0:e.length;if(!r||t<1)return[];for(var a=0,o=0,i=ns(zs(r/t));a<r;)i[o++]=la(e,a,a+=t);return i}function ai(e){for(var t=-1,n=null==e?0:e.length,r=0,a=[];++t<n;){var o=e[t];o&&(a[r++]=o)}return a}function oi(){var e=arguments.length;if(!e)return[];for(var t=ns(e-1),n=arguments[0],r=e;r--;)t[r-1]=arguments[r];return m(gp(n)?Ia(n):[n],pr(t,1))}function ii(e,t,n){var r=null==e?0:e.length;return r?(t=n||t===ae?1:ku(t),la(e,t<0?0:t,r)):[]}function li(e,t,n){var r=null==e?0:e.length;return r?(t=n||t===ae?1:ku(t),t=r-t,la(e,0,t<0?0:t)):[]}function ui(e,t){return e&&e.length?ga(e,ko(t,3),!0,!0):[]}function ci(e,t){return e&&e.length?ga(e,ko(t,3),!0):[]}function si(e,t,n,r){var a=null==e?0:e.length;return a?(n&&"number"!=typeof n&&Do(e,t,n)&&(n=0,r=a),sr(e,t,n,r)):[]}function fi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:ku(n);return a<0&&(a=Hs(r+a,0)),x(e,ko(t,3),a)}function pi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r-1;return n!==ae&&(a=ku(n),a=n<0?Hs(r+a,0):Vs(a,r-1)),x(e,ko(t,3),a,!0)}function di(e){return(null==e?0:e.length)?pr(e,1):[]}function hi(e){return(null==e?0:e.length)?pr(e,je):[]}function bi(e,t){return(null==e?0:e.length)?(t=t===ae?1:ku(t),pr(e,t)):[]}function mi(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var a=e[t];r[a[0]]=a[1]}return r}function gi(e){return e&&e.length?e[0]:ae}function vi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:ku(n);return a<0&&(a=Hs(r+a,0)),E(e,t,a)}function yi(e){return(null==e?0:e.length)?la(e,0,-1):[]}function wi(e,t){return null==e?"":Ws.call(e,t)}function _i(e){var t=null==e?0:e.length;return t?e[t-1]:ae}function ki(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r;return n!==ae&&(a=ku(n),a=a<0?Hs(r+a,0):Vs(a,r-1)),t===t?G(e,t,a):x(e,T,a,!0)}function xi(e,t){return e&&e.length?Vr(e,ku(t)):ae}function Ei(e,t){return e&&e.length&&t&&t.length?Xr(e,t):e}function Fi(e,t,n){return e&&e.length&&t&&t.length?Xr(e,t,ko(n,2)):e}function Ti(e,t,n){return e&&e.length&&t&&t.length?Xr(e,t,ae,n):e}function Si(e,t){var n=[];if(!e||!e.length)return n;var r=-1,a=[],o=e.length;for(t=ko(t,3);++r<o;){var i=e[r];t(i,r,e)&&(n.push(i),a.push(r))}return Gr(e,a),n}function Ci(e){return null==e?e:Js.call(e)}function Pi(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Do(e,t,n)?(t=0,n=r):(t=null==t?0:ku(t),n=n===ae?r:ku(n)),la(e,t,n)):[]}function Oi(e,t){return ca(e,t)}function Ai(e,t,n){return sa(e,t,ko(n,2))}function ji(e,t){var n=null==e?0:e.length;if(n){var r=ca(e,t);if(r<n&&Hl(e[r],t))return r}return-1}function Ri(e,t){return ca(e,t,!0)}function Mi(e,t,n){return sa(e,t,ko(n,2),!0)}function Ni(e,t){if(null==e?0:e.length){var n=ca(e,t,!0)-1;if(Hl(e[n],t))return n}return-1}function Di(e){return e&&e.length?fa(e):[]}function Ii(e,t){return e&&e.length?fa(e,ko(t,2)):[]}function zi(e){var t=null==e?0:e.length;return t?la(e,1,t):[]}function Li(e,t,n){return e&&e.length?(t=n||t===ae?1:ku(t),la(e,0,t<0?0:t)):[]}function Bi(e,t,n){var r=null==e?0:e.length;return r?(t=n||t===ae?1:ku(t),t=r-t,la(e,t<0?0:t,r)):[]}function Ui(e,t){return e&&e.length?ga(e,ko(t,3),!1,!0):[]}function qi(e,t){return e&&e.length?ga(e,ko(t,3)):[]}function Wi(e){return e&&e.length?ha(e):[]}function $i(e,t){return e&&e.length?ha(e,ko(t,2)):[]}function Hi(e,t){return t="function"==typeof t?t:ae,e&&e.length?ha(e,ae,t):[]}function Vi(e){if(!e||!e.length)return[];var t=0;return e=p(e,function(e){if(Ql(e))return t=Hs(e.length,t),!0}),R(t,function(t){return b(e,C(t))})}function Qi(e,t){if(!e||!e.length)return[];var n=Vi(e);return null==t?n:b(n,function(e){return l(t,ae,e)})}function Ki(e,t){return wa(e||[],t||[],Hn)}function Yi(e,t){return wa(e||[],t||[],oa)}function Ji(e){var t=n(e);return t.__chain__=!0,t}function Xi(e,t){return t(e),e}function Gi(e,t){return t(e)}function Zi(){return Ji(this)}function el(){return new a(this.value(),this.__chain__)}function tl(){this.__values__===ae&&(this.__values__=wu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?ae:this.__values__[this.__index__++]}}function nl(){return this}function rl(e){for(var t,n=this;n instanceof r;){var a=ni(n);a.__index__=0,a.__values__=ae,t?o.__wrapped__=a:t=a;var o=a;n=n.__wrapped__}return o.__wrapped__=e,t}function al(){var e=this.__wrapped__;if(e instanceof w){var t=e;return this.__actions__.length&&(t=new w(this)),t=t.reverse(),t.__actions__.push({func:Gi,args:[Ci],thisArg:ae}),new a(t,this.__chain__)}return this.thru(Ci)}function ol(){return va(this.__wrapped__,this.__actions__)}function il(e,t,n){var r=gp(e)?f:ur;return n&&Do(e,t,n)&&(t=ae),r(e,ko(t,3))}function ll(e,t){return(gp(e)?p:fr)(e,ko(t,3))}function ul(e,t){return pr(hl(e,t),1)}function cl(e,t){return pr(hl(e,t),je)}function sl(e,t,n){return n=n===ae?1:ku(n),pr(hl(e,t),n)}function fl(e,t){return(gp(e)?c:bf)(e,ko(t,3))}function pl(e,t){return(gp(e)?s:mf)(e,ko(t,3))}function dl(e,t,n,r){e=Vl(e)?e:Zu(e),n=n&&!r?ku(n):0;var a=e.length;return n<0&&(n=Hs(a+n,0)),bu(e)?n<=a&&e.indexOf(t,n)>-1:!!a&&E(e,t,n)>-1}function hl(e,t){return(gp(e)?b:Ur)(e,ko(t,3))}function bl(e,t,n,r){return null==e?[]:(gp(t)||(t=null==t?[]:[t]),n=r?ae:n,gp(n)||(n=null==n?[]:[n]),Qr(e,t,n))}function ml(e,t,n){var r=gp(e)?g:O,a=arguments.length<3;return r(e,ko(t,4),n,a,bf)}function gl(e,t,n){var r=gp(e)?v:O,a=arguments.length<3;return r(e,ko(t,4),n,a,mf)}function vl(e,t){return(gp(e)?p:fr)(e,jl(ko(t,3)))}function yl(e){return(gp(e)?Mn:ra)(e)}function wl(e,t,n){return t=(n?Do(e,t,n):t===ae)?1:ku(t),(gp(e)?Nn:aa)(e,t)}function _l(e){return(gp(e)?In:ia)(e)}function kl(e){if(null==e)return 0;if(Vl(e))return bu(e)?Z(e):e.length;var t=Sf(e);return t==Ye||t==tt?e.size:zr(e).length}function xl(e,t,n){var r=gp(e)?y:ua;return n&&Do(e,t,n)&&(t=ae),r(e,ko(t,3))}function El(e,t){if("function"!=typeof t)throw new ss(le);return e=ku(e),function(){if(--e<1)return t.apply(this,arguments)}}function Fl(e,t,n){return t=n?ae:t,t=e&&null==t?e.length:t,co(e,xe,ae,ae,ae,ae,t)}function Tl(e,t){var n;if("function"!=typeof t)throw new ss(le);return e=ku(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=ae),n}}function Sl(e,t,n){t=n?ae:t;var r=co(e,ye,ae,ae,ae,ae,ae,t);return r.placeholder=Sl.placeholder,r}function Cl(e,t,n){t=n?ae:t;var r=co(e,we,ae,ae,ae,ae,ae,t);return r.placeholder=Cl.placeholder,r}function Pl(e,t,n){function r(t){var n=p,r=d;return p=d=ae,v=t,b=e.apply(r,n)}function a(e){return v=e,m=Of(l,t),y?r(e):b}function o(e){var n=e-g,r=e-v,a=t-n;return w?Vs(a,h-r):a}function i(e){var n=e-g,r=e-v;return g===ae||n>=t||n<0||w&&r>=h}function l(){var e=op();if(i(e))return u(e);m=Of(l,o(e))}function u(e){return m=ae,_&&p?r(e):(p=d=ae,b)}function c(){m!==ae&&kf(m),v=0,p=g=d=m=ae}function s(){return m===ae?b:u(op())}function f(){var e=op(),n=i(e);if(p=arguments,d=this,g=e,n){if(m===ae)return a(g);if(w)return m=Of(l,t),r(g)}return m===ae&&(m=Of(l,t)),b}var p,d,h,b,m,g,v=0,y=!1,w=!1,_=!0;if("function"!=typeof e)throw new ss(le);return t=Eu(t)||0,au(n)&&(y=!!n.leading,w="maxWait"in n,h=w?Hs(Eu(n.maxWait)||0,t):h,_="trailing"in n?!!n.trailing:_),f.cancel=c,f.flush=s,f}function Ol(e){return co(e,Fe)}function Al(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ss(le);var n=function(){var r=arguments,a=t?t.apply(this,r):r[0],o=n.cache;if(o.has(a))return o.get(a);var i=e.apply(this,r);return n.cache=o.set(a,i)||o,i};return n.cache=new(Al.Cache||cn),n}function jl(e){if("function"!=typeof e)throw new ss(le);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}function Rl(e){return Tl(2,e)}function Ml(e,t){if("function"!=typeof e)throw new ss(le);return t=t===ae?t:ku(t),na(e,t)}function Nl(e,t){if("function"!=typeof e)throw new ss(le);return t=null==t?0:Hs(ku(t),0),na(function(n){var r=n[t],a=Ea(n,0,t);return r&&m(a,r),l(e,this,a)})}function Dl(e,t,n){var r=!0,a=!0;if("function"!=typeof e)throw new ss(le);return au(n)&&(r="leading"in n?!!n.leading:r,a="trailing"in n?!!n.trailing:a),Pl(e,t,{leading:r,maxWait:t,trailing:a})}function Il(e){return Fl(e,1)}function zl(e,t){return fp(ka(t),e)}function Ll(){if(!arguments.length)return[];var e=arguments[0];return gp(e)?e:[e]}function Bl(e){return rr(e,de)}function Ul(e,t){return t="function"==typeof t?t:ae,rr(e,de,t)}function ql(e){return rr(e,fe|de)}function Wl(e,t){return t="function"==typeof t?t:ae,rr(e,fe|de,t)}function $l(e,t){return null==t||or(e,t,Bu(t))}function Hl(e,t){return e===t||e!==e&&t!==t}function Vl(e){return null!=e&&ru(e.length)&&!tu(e)}function Ql(e){return ou(e)&&Vl(e)}function Kl(e){return!0===e||!1===e||ou(e)&&vr(e)==We}function Yl(e){return ou(e)&&1===e.nodeType&&!du(e)}function Jl(e){if(null==e)return!0;if(Vl(e)&&(gp(e)||"string"==typeof e||"function"==typeof e.splice||yp(e)||Ep(e)||mp(e)))return!e.length;var t=Sf(e);if(t==Ye||t==tt)return!e.size;if(Uo(e))return!zr(e).length;for(var n in e)if(ms.call(e,n))return!1;return!0}function Xl(e,t){return Pr(e,t)}function Gl(e,t,n){n="function"==typeof n?n:ae;var r=n?n(e,t):ae;return r===ae?Pr(e,t,ae,n):!!r}function Zl(e){if(!ou(e))return!1;var t=vr(e);return t==Ve||t==He||"string"==typeof e.message&&"string"==typeof e.name&&!du(e)}function eu(e){return"number"==typeof e&&qs(e)}function tu(e){if(!au(e))return!1;var t=vr(e);return t==Qe||t==Ke||t==qe||t==Ze}function nu(e){return"number"==typeof e&&e==ku(e)}function ru(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=Re}function au(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ou(e){return null!=e&&"object"==typeof e}function iu(e,t){return e===t||jr(e,t,Eo(t))}function lu(e,t,n){return n="function"==typeof n?n:ae,jr(e,t,Eo(t),n)}function uu(e){return pu(e)&&e!=+e}function cu(e){if(Cf(e))throw new as(ie);return Rr(e)}function su(e){return null===e}function fu(e){return null==e}function pu(e){return"number"==typeof e||ou(e)&&vr(e)==Je}function du(e){if(!ou(e)||vr(e)!=Ge)return!1;var t=Ss(e);if(null===t)return!0;var n=ms.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&bs.call(n)==ws}function hu(e){return nu(e)&&e>=-Re&&e<=Re}function bu(e){return"string"==typeof e||!gp(e)&&ou(e)&&vr(e)==nt}function mu(e){return"symbol"==typeof e||ou(e)&&vr(e)==rt}function gu(e){return e===ae}function vu(e){return ou(e)&&Sf(e)==ot}function yu(e){return ou(e)&&vr(e)==it}function wu(e){if(!e)return[];if(Vl(e))return bu(e)?ee(e):Ia(e);if(js&&e[js])return H(e[js]());var t=Sf(e);return(t==Ye?V:t==tt?Y:Zu)(e)}function _u(e){if(!e)return 0===e?e:0;if((e=Eu(e))===je||e===-je){return(e<0?-1:1)*Me}return e===e?e:0}function ku(e){var t=_u(e),n=t%1;return t===t?n?t-n:t:0}function xu(e){return e?nr(ku(e),0,De):0}function Eu(e){if("number"==typeof e)return e;if(mu(e))return Ne;if(au(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=au(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Mt,"");var n=Ht.test(e);return n||Qt.test(e)?On(e.slice(2),n?2:8):$t.test(e)?Ne:+e}function Fu(e){return za(e,Uu(e))}function Tu(e){return e?nr(ku(e),-Re,Re):0===e?e:0}function Su(e){return null==e?"":da(e)}function Cu(e,t){var n=hf(e);return null==t?n:Gn(n,t)}function Pu(e,t){return k(e,ko(t,3),dr)}function Ou(e,t){return k(e,ko(t,3),hr)}function Au(e,t){return null==e?e:gf(e,ko(t,3),Uu)}function ju(e,t){return null==e?e:vf(e,ko(t,3),Uu)}function Ru(e,t){return e&&dr(e,ko(t,3))}function Mu(e,t){return e&&hr(e,ko(t,3))}function Nu(e){return null==e?[]:br(e,Bu(e))}function Du(e){return null==e?[]:br(e,Uu(e))}function Iu(e,t,n){var r=null==e?ae:mr(e,t);return r===ae?n:r}function zu(e,t){return null!=e&&Po(e,t,wr)}function Lu(e,t){return null!=e&&Po(e,t,_r)}function Bu(e){return Vl(e)?jn(e):zr(e)}function Uu(e){return Vl(e)?jn(e,!0):Lr(e)}function qu(e,t){var n={};return t=ko(t,3),dr(e,function(e,r,a){er(n,t(e,r,a),e)}),n}function Wu(e,t){var n={};return t=ko(t,3),dr(e,function(e,r,a){er(n,r,t(e,r,a))}),n}function $u(e,t){return Hu(e,jl(ko(t)))}function Hu(e,t){if(null==e)return{};var n=b(yo(e),function(e){return[e]});return t=ko(t),Yr(e,n,function(e,n){return t(e,n[0])})}function Vu(e,t,n){t=xa(t,e);var r=-1,a=t.length;for(a||(a=1,e=ae);++r<a;){var o=null==e?ae:e[Zo(t[r])];o===ae&&(r=a,o=n),e=tu(o)?o.call(e):o}return e}function Qu(e,t,n){return null==e?e:oa(e,t,n)}function Ku(e,t,n,r){return r="function"==typeof r?r:ae,null==e?e:oa(e,t,n,r)}function Yu(e,t,n){var r=gp(e),a=r||yp(e)||Ep(e);if(t=ko(t,4),null==n){var o=e&&e.constructor;n=a?r?new o:[]:au(e)&&tu(o)?hf(Ss(e)):{}}return(a?c:dr)(e,function(e,r,a){return t(n,e,r,a)}),n}function Ju(e,t){return null==e||ba(e,t)}function Xu(e,t,n){return null==e?e:ma(e,t,ka(n))}function Gu(e,t,n,r){return r="function"==typeof r?r:ae,null==e?e:ma(e,t,ka(n),r)}function Zu(e){return null==e?[]:D(e,Bu(e))}function ec(e){return null==e?[]:D(e,Uu(e))}function tc(e,t,n){return n===ae&&(n=t,t=ae),n!==ae&&(n=Eu(n),n=n===n?n:0),t!==ae&&(t=Eu(t),t=t===t?t:0),nr(Eu(e),t,n)}function nc(e,t,n){return t=_u(t),n===ae?(n=t,t=0):n=_u(n),e=Eu(e),kr(e,t,n)}function rc(e,t,n){if(n&&"boolean"!=typeof n&&Do(e,t,n)&&(t=n=ae),n===ae&&("boolean"==typeof t?(n=t,t=ae):"boolean"==typeof e&&(n=e,e=ae)),e===ae&&t===ae?(e=0,t=1):(e=_u(e),t===ae?(t=e,e=0):t=_u(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var a=Ys();return Vs(e+a*(t-e+Pn("1e-"+((a+"").length-1))),t)}return Zr(e,t)}function ac(e){return Jp(Su(e).toLowerCase())}function oc(e){return(e=Su(e))&&e.replace(Yt,Vn).replace(mn,"")}function ic(e,t,n){e=Su(e),t=da(t);var r=e.length;n=n===ae?r:nr(ku(n),0,r);var a=n;return(n-=t.length)>=0&&e.slice(n,a)==t}function lc(e){return e=Su(e),e&&Et.test(e)?e.replace(kt,Qn):e}function uc(e){return e=Su(e),e&&Rt.test(e)?e.replace(jt,"\\$&"):e}function cc(e,t,n){e=Su(e),t=ku(t);var r=t?Z(e):0;if(!t||r>=t)return e;var a=(t-r)/2;return no(Ls(a),n)+e+no(zs(a),n)}function sc(e,t,n){e=Su(e),t=ku(t);var r=t?Z(e):0;return t&&r<t?e+no(t-r,n):e}function fc(e,t,n){e=Su(e),t=ku(t);var r=t?Z(e):0;return t&&r<t?no(t-r,n)+e:e}function pc(e,t,n){return n||null==t?t=0:t&&(t=+t),Ks(Su(e).replace(Nt,""),t||0)}function dc(e,t,n){return t=(n?Do(e,t,n):t===ae)?1:ku(t),ta(Su(e),t)}function hc(){var e=arguments,t=Su(e[0]);return e.length<3?t:t.replace(e[1],e[2])}function bc(e,t,n){return n&&"number"!=typeof n&&Do(e,t,n)&&(t=n=ae),(n=n===ae?De:n>>>0)?(e=Su(e),e&&("string"==typeof t||null!=t&&!kp(t))&&!(t=da(t))&&W(e)?Ea(ee(e),0,n):e.split(t,n)):[]}function mc(e,t,n){return e=Su(e),n=null==n?0:nr(ku(n),0,e.length),t=da(t),e.slice(n,n+t.length)==t}function gc(e,t,r){var a=n.templateSettings;r&&Do(e,t,r)&&(t=ae),e=Su(e),t=Pp({},t,a,so);var o,i,l=Pp({},t.imports,a.imports,so),u=Bu(l),c=D(l,u),s=0,f=t.interpolate||Jt,p="__p += '",d=us((t.escape||Jt).source+"|"+f.source+"|"+(f===St?qt:Jt).source+"|"+(t.evaluate||Jt).source+"|$","g"),h="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++kn+"]")+"\n";e.replace(d,function(t,n,r,a,l,u){return r||(r=a),p+=e.slice(s,u).replace(Xt,U),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),l&&(i=!0,p+="';\n"+l+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=u+t.length,t}),p+="';\n";var b=t.variable;b||(p="with (obj) {\n"+p+"\n}\n"),p=(i?p.replace(vt,""):p).replace(yt,"$1").replace(wt,"$1;"),p="function("+(b||"obj")+") {\n"+(b?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var m=Xp(function(){return os(u,h+"return "+p).apply(ae,c)});if(m.source=p,Zl(m))throw m;return m}function vc(e){return Su(e).toLowerCase()}function yc(e){return Su(e).toUpperCase()}function wc(e,t,n){if((e=Su(e))&&(n||t===ae))return e.replace(Mt,"");if(!e||!(t=da(t)))return e;var r=ee(e),a=ee(t);return Ea(r,z(r,a),L(r,a)+1).join("")}function _c(e,t,n){if((e=Su(e))&&(n||t===ae))return e.replace(Dt,"");if(!e||!(t=da(t)))return e;var r=ee(e);return Ea(r,0,L(r,ee(t))+1).join("")}function kc(e,t,n){if((e=Su(e))&&(n||t===ae))return e.replace(Nt,"");if(!e||!(t=da(t)))return e;var r=ee(e);return Ea(r,z(r,ee(t))).join("")}function xc(e,t){var n=Te,r=Se;if(au(t)){var a="separator"in t?t.separator:a;n="length"in t?ku(t.length):n,r="omission"in t?da(t.omission):r}e=Su(e);var o=e.length;if(W(e)){var i=ee(e);o=i.length}if(n>=o)return e;var l=n-Z(r);if(l<1)return r;var u=i?Ea(i,0,l).join(""):e.slice(0,l);if(a===ae)return u+r;if(i&&(l+=u.length-l),kp(a)){if(e.slice(l).search(a)){var c,s=u;for(a.global||(a=us(a.source,Su(Wt.exec(a))+"g")),a.lastIndex=0;c=a.exec(s);)var f=c.index;u=u.slice(0,f===ae?l:f)}}else if(e.indexOf(da(a),l)!=l){var p=u.lastIndexOf(a);p>-1&&(u=u.slice(0,p))}return u+r}function Ec(e){return e=Su(e),e&&xt.test(e)?e.replace(_t,Kn):e}function Fc(e,t,n){return e=Su(e),t=n?ae:t,t===ae?$(e)?re(e):_(e):e.match(t)||[]}function Tc(e){var t=null==e?0:e.length,n=ko();return e=t?b(e,function(e){if("function"!=typeof e[1])throw new ss(le);return[n(e[0]),e[1]]}):[],na(function(n){for(var r=-1;++r<t;){var a=e[r];if(l(a[0],this,n))return l(a[1],this,n)}})}function Sc(e){return ar(rr(e,fe))}function Cc(e){return function(){return e}}function Pc(e,t){return null==e||e!==e?t:e}function Oc(e){return e}function Ac(e){return Ir("function"==typeof e?e:rr(e,fe))}function jc(e){return qr(rr(e,fe))}function Rc(e,t){return Wr(e,rr(t,fe))}function Mc(e,t,n){var r=Bu(t),a=br(t,r);null!=n||au(t)&&(a.length||!r.length)||(n=t,t=e,e=this,a=br(t,Bu(t)));var o=!(au(n)&&"chain"in n&&!n.chain),i=tu(e);return c(a,function(n){var r=t[n];e[n]=r,i&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__);return(n.__actions__=Ia(this.__actions__)).push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,m([this.value()],arguments))})}),e}function Nc(){return Rn._===this&&(Rn._=_s),this}function Dc(){}function Ic(e){return e=ku(e),na(function(t){return Vr(t,e)})}function zc(e){return Io(e)?C(Zo(e)):Jr(e)}function Lc(e){return function(t){return null==e?ae:mr(e,t)}}function Bc(){return[]}function Uc(){return!1}function qc(){return{}}function Wc(){return""}function $c(){return!0}function Hc(e,t){if((e=ku(e))<1||e>Re)return[];var n=De,r=Vs(e,De);t=ko(t),e-=De;for(var a=R(r,t);++n<e;)t(n);return a}function Vc(e){return gp(e)?b(e,Zo):mu(e)?[e]:Ia(jf(Su(e)))}function Qc(e){var t=++gs;return Su(e)+t}function Kc(e){return e&&e.length?cr(e,Oc,yr):ae}function Yc(e,t){return e&&e.length?cr(e,ko(t,2),yr):ae}function Jc(e){return S(e,Oc)}function Xc(e,t){return S(e,ko(t,2))}function Gc(e){return e&&e.length?cr(e,Oc,Br):ae}function Zc(e,t){return e&&e.length?cr(e,ko(t,2),Br):ae}function es(e){return e&&e.length?j(e,Oc):0}function ts(e,t){return e&&e.length?j(e,ko(t,2)):0}t=null==t?Rn:Yn.defaults(Rn.Object(),t,Yn.pick(Rn,_n));var ns=t.Array,rs=t.Date,as=t.Error,os=t.Function,is=t.Math,ls=t.Object,us=t.RegExp,cs=t.String,ss=t.TypeError,fs=ns.prototype,ps=os.prototype,ds=ls.prototype,hs=t["__core-js_shared__"],bs=ps.toString,ms=ds.hasOwnProperty,gs=0,vs=function(){var e=/[^.]+$/.exec(hs&&hs.keys&&hs.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),ys=ds.toString,ws=bs.call(ls),_s=Rn._,ks=us("^"+bs.call(ms).replace(jt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),xs=Dn?t.Buffer:ae,Es=t.Symbol,Fs=t.Uint8Array,Ts=xs?xs.allocUnsafe:ae,Ss=Q(ls.getPrototypeOf,ls),Cs=ls.create,Ps=ds.propertyIsEnumerable,Os=fs.splice,As=Es?Es.isConcatSpreadable:ae,js=Es?Es.iterator:ae,Rs=Es?Es.toStringTag:ae,Ms=function(){try{var e=Fo(ls,"defineProperty");return e({},"",{}),e}catch(e){}}(),Ns=t.clearTimeout!==Rn.clearTimeout&&t.clearTimeout,Ds=rs&&rs.now!==Rn.Date.now&&rs.now,Is=t.setTimeout!==Rn.setTimeout&&t.setTimeout,zs=is.ceil,Ls=is.floor,Bs=ls.getOwnPropertySymbols,Us=xs?xs.isBuffer:ae,qs=t.isFinite,Ws=fs.join,$s=Q(ls.keys,ls),Hs=is.max,Vs=is.min,Qs=rs.now,Ks=t.parseInt,Ys=is.random,Js=fs.reverse,Xs=Fo(t,"DataView"),Gs=Fo(t,"Map"),Zs=Fo(t,"Promise"),ef=Fo(t,"Set"),tf=Fo(t,"WeakMap"),nf=Fo(ls,"create"),rf=tf&&new tf,af={},of=ei(Xs),lf=ei(Gs),uf=ei(Zs),cf=ei(ef),sf=ei(tf),ff=Es?Es.prototype:ae,pf=ff?ff.valueOf:ae,df=ff?ff.toString:ae,hf=function(){function e(){}return function(t){if(!au(t))return{};if(Cs)return Cs(t);e.prototype=t;var n=new e;return e.prototype=ae,n}}();n.templateSettings={escape:Ft,evaluate:Tt,interpolate:St,variable:"",imports:{_:n}},n.prototype=r.prototype,n.prototype.constructor=n,a.prototype=hf(r.prototype),a.prototype.constructor=a,w.prototype=hf(r.prototype),w.prototype.constructor=w,ne.prototype.clear=Bt,ne.prototype.delete=Gt,ne.prototype.get=Zt,ne.prototype.has=en,ne.prototype.set=tn,nn.prototype.clear=rn,nn.prototype.delete=an,nn.prototype.get=on,nn.prototype.has=ln,nn.prototype.set=un,cn.prototype.clear=sn,cn.prototype.delete=fn,cn.prototype.get=pn,cn.prototype.has=dn,cn.prototype.set=hn,gn.prototype.add=gn.prototype.push=vn,gn.prototype.has=yn,wn.prototype.clear=Fn,wn.prototype.delete=Tn,wn.prototype.get=Sn,wn.prototype.has=Cn,wn.prototype.set=An;var bf=Wa(dr),mf=Wa(hr,!0),gf=$a(),vf=$a(!0),yf=rf?function(e,t){return rf.set(e,t),e}:Oc,wf=Ms?function(e,t){return Ms(e,"toString",{configurable:!0,enumerable:!1,value:Cc(t),writable:!0})}:Oc,_f=na,kf=Ns||function(e){return Rn.clearTimeout(e)},xf=ef&&1/Y(new ef([,-0]))[1]==je?function(e){return new ef(e)}:Dc,Ef=rf?function(e){return rf.get(e)}:Dc,Ff=Bs?function(e){return null==e?[]:(e=ls(e),p(Bs(e),function(t){return Ps.call(e,t)}))}:Bc,Tf=Bs?function(e){for(var t=[];e;)m(t,Ff(e)),e=Ss(e);return t}:Bc,Sf=vr;(Xs&&Sf(new Xs(new ArrayBuffer(1)))!=ut||Gs&&Sf(new Gs)!=Ye||Zs&&"[object Promise]"!=Sf(Zs.resolve())||ef&&Sf(new ef)!=tt||tf&&Sf(new tf)!=ot)&&(Sf=function(e){var t=vr(e),n=t==Ge?e.constructor:ae,r=n?ei(n):"";if(r)switch(r){case of:return ut;case lf:return Ye;case uf:return"[object Promise]";case cf:return tt;case sf:return ot}return t});var Cf=hs?tu:Uc,Pf=Xo(yf),Of=Is||function(e,t){return Rn.setTimeout(e,t)},Af=Xo(wf),jf=function(e){var t=Al(e,function(e){return n.size===ce&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return Ot.test(e)&&t.push(""),e.replace(At,function(e,n,r,a){t.push(r?a.replace(Ut,"$1"):n||e)}),t}),Rf=na(function(e,t){return Ql(e)?lr(e,pr(t,1,Ql,!0)):[]}),Mf=na(function(e,t){var n=_i(t);return Ql(n)&&(n=ae),Ql(e)?lr(e,pr(t,1,Ql,!0),ko(n,2)):[]}),Nf=na(function(e,t){var n=_i(t);return Ql(n)&&(n=ae),Ql(e)?lr(e,pr(t,1,Ql,!0),ae,n):[]}),Df=na(function(e){var t=b(e,_a);return t.length&&t[0]===e[0]?xr(t):[]}),If=na(function(e){var t=_i(e),n=b(e,_a);return t===_i(n)?t=ae:n.pop(),n.length&&n[0]===e[0]?xr(n,ko(t,2)):[]}),zf=na(function(e){var t=_i(e),n=b(e,_a);return t="function"==typeof t?t:ae,t&&n.pop(),n.length&&n[0]===e[0]?xr(n,ae,t):[]}),Lf=na(Ei),Bf=go(function(e,t){var n=null==e?0:e.length,r=tr(e,t);return Gr(e,b(t,function(e){return No(e,n)?+e:e}).sort(Ra)),r}),Uf=na(function(e){return ha(pr(e,1,Ql,!0))}),qf=na(function(e){var t=_i(e);return Ql(t)&&(t=ae),ha(pr(e,1,Ql,!0),ko(t,2))}),Wf=na(function(e){var t=_i(e);return t="function"==typeof t?t:ae,ha(pr(e,1,Ql,!0),ae,t)}),$f=na(function(e,t){return Ql(e)?lr(e,t):[]}),Hf=na(function(e){return ya(p(e,Ql))}),Vf=na(function(e){var t=_i(e);return Ql(t)&&(t=ae),ya(p(e,Ql),ko(t,2))}),Qf=na(function(e){var t=_i(e);return t="function"==typeof t?t:ae,ya(p(e,Ql),ae,t)}),Kf=na(Vi),Yf=na(function(e){var t=e.length,n=t>1?e[t-1]:ae;return n="function"==typeof n?(e.pop(),n):ae,Qi(e,n)}),Jf=go(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return tr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof w&&No(n)?(r=r.slice(n,+n+(t?1:0)),r.__actions__.push({func:Gi,args:[o],thisArg:ae}),new a(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(ae),e})):this.thru(o)}),Xf=Ua(function(e,t,n){ms.call(e,n)?++e[n]:er(e,n,1)}),Gf=Ja(fi),Zf=Ja(pi),ep=Ua(function(e,t,n){ms.call(e,n)?e[n].push(t):er(e,n,[t])}),tp=na(function(e,t,n){var r=-1,a="function"==typeof t,o=Vl(e)?ns(e.length):[];return bf(e,function(e){o[++r]=a?l(t,e,n):Fr(e,t,n)}),o}),np=Ua(function(e,t,n){er(e,n,t)}),rp=Ua(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]}),ap=na(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Do(e,t[0],t[1])?t=[]:n>2&&Do(t[0],t[1],t[2])&&(t=[t[0]]),Qr(e,pr(t,1),[])}),op=Ds||function(){return Rn.Date.now()},ip=na(function(e,t,n){var r=me;if(n.length){var a=K(n,_o(ip));r|=_e}return co(e,r,t,n,a)}),lp=na(function(e,t,n){var r=me|ge;if(n.length){var a=K(n,_o(lp));r|=_e}return co(t,r,e,n,a)}),up=na(function(e,t){return ir(e,1,t)}),cp=na(function(e,t,n){return ir(e,Eu(t)||0,n)});Al.Cache=cn;var sp=_f(function(e,t){t=1==t.length&&gp(t[0])?b(t[0],N(ko())):b(pr(t,1),N(ko()));var n=t.length;return na(function(r){for(var a=-1,o=Vs(r.length,n);++a<o;)r[a]=t[a].call(this,r[a]);return l(e,this,r)})}),fp=na(function(e,t){var n=K(t,_o(fp));return co(e,_e,ae,t,n)}),pp=na(function(e,t){var n=K(t,_o(pp));return co(e,ke,ae,t,n)}),dp=go(function(e,t){return co(e,Ee,ae,ae,ae,t)}),hp=oo(yr),bp=oo(function(e,t){return e>=t}),mp=Tr(function(){return arguments}())?Tr:function(e){return ou(e)&&ms.call(e,"callee")&&!Ps.call(e,"callee")},gp=ns.isArray,vp=Ln?N(Ln):Sr,yp=Us||Uc,wp=Bn?N(Bn):Cr,_p=Un?N(Un):Ar,kp=qn?N(qn):Mr,xp=Wn?N(Wn):Nr,Ep=$n?N($n):Dr,Fp=oo(Br),Tp=oo(function(e,t){return e<=t}),Sp=qa(function(e,t){if(Uo(t)||Vl(t))return void za(t,Bu(t),e);for(var n in t)ms.call(t,n)&&Hn(e,n,t[n])}),Cp=qa(function(e,t){za(t,Uu(t),e)}),Pp=qa(function(e,t,n,r){za(t,Uu(t),e,r)}),Op=qa(function(e,t,n,r){za(t,Bu(t),e,r)}),Ap=go(tr),jp=na(function(e){return e.push(ae,so),l(Pp,ae,e)}),Rp=na(function(e){return e.push(ae,fo),l(zp,ae,e)}),Mp=Za(function(e,t,n){e[t]=n},Cc(Oc)),Np=Za(function(e,t,n){ms.call(e,t)?e[t].push(n):e[t]=[n]},ko),Dp=na(Fr),Ip=qa(function(e,t,n){$r(e,t,n)}),zp=qa(function(e,t,n,r){$r(e,t,n,r)}),Lp=go(function(e,t){var n={};if(null==e)return n;var r=!1;t=b(t,function(t){return t=xa(t,e),r||(r=t.length>1),t}),za(e,yo(e),n),r&&(n=rr(n,fe|pe|de,po));for(var a=t.length;a--;)ba(n,t[a]);return n}),Bp=go(function(e,t){return null==e?{}:Kr(e,t)}),Up=uo(Bu),qp=uo(Uu),Wp=Qa(function(e,t,n){return t=t.toLowerCase(),e+(n?ac(t):t)}),$p=Qa(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),Hp=Qa(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),Vp=Va("toLowerCase"),Qp=Qa(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}),Kp=Qa(function(e,t,n){return e+(n?" ":"")+Jp(t)}),Yp=Qa(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Jp=Va("toUpperCase"),Xp=na(function(e,t){try{return l(e,ae,t)}catch(e){return Zl(e)?e:new as(e)}}),Gp=go(function(e,t){return c(t,function(t){t=Zo(t),er(e,t,ip(e[t],e))}),e}),Zp=Xa(),ed=Xa(!0),td=na(function(e,t){return function(n){return Fr(n,e,t)}}),nd=na(function(e,t){return function(n){return Fr(e,n,t)}}),rd=to(b),ad=to(f),od=to(y),id=ao(),ld=ao(!0),ud=eo(function(e,t){return e+t},0),cd=lo("ceil"),sd=eo(function(e,t){return e/t},1),fd=lo("floor"),pd=eo(function(e,t){return e*t},1),dd=lo("round"),hd=eo(function(e,t){return e-t},0);return n.after=El,n.ary=Fl,n.assign=Sp,n.assignIn=Cp,n.assignInWith=Pp,n.assignWith=Op,n.at=Ap,n.before=Tl,n.bind=ip,n.bindAll=Gp,n.bindKey=lp,n.castArray=Ll,n.chain=Ji,n.chunk=ri,n.compact=ai,n.concat=oi,n.cond=Tc,n.conforms=Sc,n.constant=Cc,n.countBy=Xf,n.create=Cu,n.curry=Sl,n.curryRight=Cl,n.debounce=Pl,n.defaults=jp,n.defaultsDeep=Rp,n.defer=up,n.delay=cp,n.difference=Rf,n.differenceBy=Mf,n.differenceWith=Nf,n.drop=ii,n.dropRight=li,n.dropRightWhile=ui,n.dropWhile=ci,n.fill=si,n.filter=ll,n.flatMap=ul,n.flatMapDeep=cl,n.flatMapDepth=sl,n.flatten=di,n.flattenDeep=hi,n.flattenDepth=bi,n.flip=Ol,n.flow=Zp,n.flowRight=ed,n.fromPairs=mi,n.functions=Nu,n.functionsIn=Du,n.groupBy=ep,n.initial=yi,n.intersection=Df,n.intersectionBy=If,n.intersectionWith=zf,n.invert=Mp,n.invertBy=Np,n.invokeMap=tp,n.iteratee=Ac,n.keyBy=np,n.keys=Bu,n.keysIn=Uu,n.map=hl,n.mapKeys=qu,n.mapValues=Wu,n.matches=jc,n.matchesProperty=Rc,n.memoize=Al,n.merge=Ip,n.mergeWith=zp,n.method=td,n.methodOf=nd,n.mixin=Mc,n.negate=jl,n.nthArg=Ic,n.omit=Lp,n.omitBy=$u,n.once=Rl,n.orderBy=bl,n.over=rd,n.overArgs=sp,n.overEvery=ad,n.overSome=od,n.partial=fp,n.partialRight=pp,n.partition=rp,n.pick=Bp,n.pickBy=Hu,n.property=zc,n.propertyOf=Lc,n.pull=Lf,n.pullAll=Ei,n.pullAllBy=Fi,n.pullAllWith=Ti,n.pullAt=Bf,n.range=id,n.rangeRight=ld,n.rearg=dp,n.reject=vl,n.remove=Si,n.rest=Ml,n.reverse=Ci,n.sampleSize=wl,n.set=Qu,n.setWith=Ku,n.shuffle=_l,n.slice=Pi,n.sortBy=ap,n.sortedUniq=Di,n.sortedUniqBy=Ii,n.split=bc,n.spread=Nl,n.tail=zi,n.take=Li,n.takeRight=Bi,n.takeRightWhile=Ui,n.takeWhile=qi,n.tap=Xi,n.throttle=Dl,n.thru=Gi,n.toArray=wu,n.toPairs=Up,n.toPairsIn=qp,n.toPath=Vc,n.toPlainObject=Fu,n.transform=Yu,n.unary=Il,n.union=Uf,n.unionBy=qf,n.unionWith=Wf,n.uniq=Wi,n.uniqBy=$i,n.uniqWith=Hi,n.unset=Ju,n.unzip=Vi,n.unzipWith=Qi,n.update=Xu,n.updateWith=Gu,n.values=Zu,n.valuesIn=ec,n.without=$f,n.words=Fc,n.wrap=zl,n.xor=Hf,n.xorBy=Vf,n.xorWith=Qf,n.zip=Kf,n.zipObject=Ki,n.zipObjectDeep=Yi,n.zipWith=Yf,n.entries=Up,n.entriesIn=qp,n.extend=Cp,n.extendWith=Pp,Mc(n,n),n.add=ud,n.attempt=Xp,n.camelCase=Wp,n.capitalize=ac,n.ceil=cd,n.clamp=tc,n.clone=Bl,n.cloneDeep=ql,n.cloneDeepWith=Wl,n.cloneWith=Ul,n.conformsTo=$l,n.deburr=oc,n.defaultTo=Pc,n.divide=sd,n.endsWith=ic,n.eq=Hl,n.escape=lc,n.escapeRegExp=uc,n.every=il,n.find=Gf,n.findIndex=fi,n.findKey=Pu,n.findLast=Zf,n.findLastIndex=pi,n.findLastKey=Ou,n.floor=fd,n.forEach=fl,n.forEachRight=pl,n.forIn=Au,n.forInRight=ju,n.forOwn=Ru,n.forOwnRight=Mu,n.get=Iu,n.gt=hp,n.gte=bp,n.has=zu,n.hasIn=Lu,n.head=gi,n.identity=Oc,n.includes=dl,n.indexOf=vi,n.inRange=nc,n.invoke=Dp,n.isArguments=mp,n.isArray=gp,n.isArrayBuffer=vp,n.isArrayLike=Vl,n.isArrayLikeObject=Ql,n.isBoolean=Kl,n.isBuffer=yp,n.isDate=wp,n.isElement=Yl,n.isEmpty=Jl,n.isEqual=Xl,n.isEqualWith=Gl,n.isError=Zl,n.isFinite=eu,n.isFunction=tu,n.isInteger=nu,n.isLength=ru,n.isMap=_p,n.isMatch=iu,n.isMatchWith=lu,n.isNaN=uu,n.isNative=cu,n.isNil=fu,n.isNull=su,n.isNumber=pu,n.isObject=au,n.isObjectLike=ou,n.isPlainObject=du,n.isRegExp=kp,n.isSafeInteger=hu,n.isSet=xp,n.isString=bu,n.isSymbol=mu,n.isTypedArray=Ep,n.isUndefined=gu,n.isWeakMap=vu,n.isWeakSet=yu,n.join=wi,n.kebabCase=$p,n.last=_i,n.lastIndexOf=ki,n.lowerCase=Hp,n.lowerFirst=Vp,n.lt=Fp,n.lte=Tp,n.max=Kc,n.maxBy=Yc,n.mean=Jc,n.meanBy=Xc,n.min=Gc,n.minBy=Zc,n.stubArray=Bc,n.stubFalse=Uc,n.stubObject=qc,n.stubString=Wc,n.stubTrue=$c,n.multiply=pd,n.nth=xi,n.noConflict=Nc,n.noop=Dc,n.now=op,n.pad=cc,n.padEnd=sc,n.padStart=fc,n.parseInt=pc,n.random=rc,n.reduce=ml,n.reduceRight=gl,n.repeat=dc,n.replace=hc,n.result=Vu,n.round=dd,n.runInContext=e,n.sample=yl,n.size=kl,n.snakeCase=Qp,n.some=xl,n.sortedIndex=Oi,n.sortedIndexBy=Ai,n.sortedIndexOf=ji,n.sortedLastIndex=Ri,n.sortedLastIndexBy=Mi,n.sortedLastIndexOf=Ni,n.startCase=Kp,n.startsWith=mc,n.subtract=hd,n.sum=es,n.sumBy=ts,n.template=gc,n.times=Hc,n.toFinite=_u,n.toInteger=ku,n.toLength=xu,n.toLower=vc,n.toNumber=Eu,n.toSafeInteger=Tu,n.toString=Su,n.toUpper=yc,n.trim=wc,n.trimEnd=_c,n.trimStart=kc,n.truncate=xc,n.unescape=Ec,n.uniqueId=Qc,n.upperCase=Yp,n.upperFirst=Jp,n.each=fl,n.eachRight=pl,n.first=gi,Mc(n,function(){var e={};return dr(n,function(t,r){ms.call(n.prototype,r)||(e[r]=t)}),e}(),{chain:!1}),n.VERSION="4.17.4",c(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){n[e].placeholder=n}),c(["drop","take"],function(e,t){w.prototype[e]=function(n){n=n===ae?1:Hs(ku(n),0);var r=this.__filtered__&&!t?new w(this):this.clone();return r.__filtered__?r.__takeCount__=Vs(n,r.__takeCount__):r.__views__.push({size:Vs(n,De),type:e+(r.__dir__<0?"Right":"")}),r},w.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),c(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==Oe||3==n;w.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:ko(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),c(["head","last"],function(e,t){var n="take"+(t?"Right":"");w.prototype[e]=function(){return this[n](1).value()[0]}}),c(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");w.prototype[e]=function(){return this.__filtered__?new w(this):this[n](1)}}),w.prototype.compact=function(){return this.filter(Oc)},w.prototype.find=function(e){return this.filter(e).head()},w.prototype.findLast=function(e){return this.reverse().find(e)},w.prototype.invokeMap=na(function(e,t){return"function"==typeof e?new w(this):this.map(function(n){return Fr(n,e,t)})}),w.prototype.reject=function(e){return this.filter(jl(ko(e)))},w.prototype.slice=function(e,t){e=ku(e);var n=this;return n.__filtered__&&(e>0||t<0)?new w(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==ae&&(t=ku(t),n=t<0?n.dropRight(-t):n.take(t-e)),n)},w.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},w.prototype.toArray=function(){return this.take(De)},dr(w.prototype,function(e,t){var r=/^(?:filter|find|map|reject)|While$/.test(t),o=/^(?:head|last)$/.test(t),i=n[o?"take"+("last"==t?"Right":""):t],l=o||/^find/.test(t);i&&(n.prototype[t]=function(){var t=this.__wrapped__,u=o?[1]:arguments,c=t instanceof w,s=u[0],f=c||gp(t),p=function(e){var t=i.apply(n,m([e],u));return o&&d?t[0]:t};f&&r&&"function"==typeof s&&1!=s.length&&(c=f=!1);var d=this.__chain__,h=!!this.__actions__.length,b=l&&!d,g=c&&!h;if(!l&&f){t=g?t:new w(this);var v=e.apply(t,u);return v.__actions__.push({func:Gi,args:[p],thisArg:ae}),new a(v,d)}return b&&g?e.apply(this,u):(v=this.thru(p),b?o?v.value()[0]:v.value():v)})}),c(["pop","push","shift","sort","splice","unshift"],function(e){var t=fs[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",a=/^(?:pop|shift)$/.test(e);n.prototype[e]=function(){var e=arguments;if(a&&!this.__chain__){var n=this.value();return t.apply(gp(n)?n:[],e)}return this[r](function(n){return t.apply(gp(n)?n:[],e)})}}),dr(w.prototype,function(e,t){var r=n[t];if(r){var a=r.name+"";(af[a]||(af[a]=[])).push({name:t,func:r})}}),af[Ga(ae,ge).name]=[{name:"wrapper",func:ae}],w.prototype.clone=P,w.prototype.reverse=X,w.prototype.value=te,n.prototype.at=Jf,n.prototype.chain=Zi,n.prototype.commit=el,n.prototype.next=tl,n.prototype.plant=rl,n.prototype.reverse=al,n.prototype.toJSON=n.prototype.valueOf=n.prototype.value=ol,n.prototype.first=n.prototype.head,js&&(n.prototype[js]=nl),n}();Rn._=Yn,(a=function(){return Yn}.call(t,n,t,r))!==ae&&(r.exports=a)}).call(this)}).call(t,n(13),n(62)(e))},function(e,t,n){e.exports=n(54)()},function(e,t,n){"use strict"},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}t.a=r},function(e,t,n){"use strict";function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}t.a=r},function(e,t,n){"use strict";function r(e,t){if(!e){if(a)throw new Error(o);throw new Error(o+": "+(t||""))}}var a=!0,o="Invariant failed";t.a=r},function(e,t,n){"use strict";function r(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var a=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=r(e),c=1;c<arguments.length;c++){n=Object(arguments[c]);for(var s in n)o.call(n,s)&&(u[s]=n[s]);if(a){l=a(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";function r(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r)}catch(e){console.error(e)}}r(),e.exports=n(28)},function(e,t,n){"use strict";function r(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function a(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter(function(e){return e}).join(" ")}Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"BrowserRouter",function(){return h}),n.d(t,"HashRouter",function(){return b}),n.d(t,"Link",function(){return _}),n.d(t,"NavLink",function(){return E});var o=n(10);n.d(t,"MemoryRouter",function(){return o.a}),n.d(t,"Prompt",function(){return o.b}),n.d(t,"Redirect",function(){return o.c}),n.d(t,"Route",function(){return o.d}),n.d(t,"Router",function(){return o.e}),n.d(t,"StaticRouter",function(){return o.f}),n.d(t,"Switch",function(){return o.g}),n.d(t,"generatePath",function(){return o.i}),n.d(t,"matchPath",function(){return o.j}),n.d(t,"useHistory",function(){return o.k}),n.d(t,"useLocation",function(){return o.l}),n.d(t,"useParams",function(){return o.m}),n.d(t,"useRouteMatch",function(){return o.n}),n.d(t,"withRouter",function(){return o.o});var i=n(4),l=n(0),u=n.n(l),c=n(12),s=n(40),f=(n.n(s),n(3),n(5)),p=n(15),d=n(6),h=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return t=e.call.apply(e,[this].concat(r))||this,t.history=Object(c.a)(t.props),t}return Object(i.a)(t,e),t.prototype.render=function(){return u.a.createElement(o.e,{history:this.history,children:this.props.children})},t}(u.a.Component),b=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return t=e.call.apply(e,[this].concat(r))||this,t.history=Object(c.b)(t.props),t}return Object(i.a)(t,e),t.prototype.render=function(){return u.a.createElement(o.e,{history:this.history,children:this.props.children})},t}(u.a.Component),m=function(e,t){return"function"==typeof e?e(t):e},g=function(e,t){return"string"==typeof e?Object(c.c)(e,null,null,t):e},v=function(e){return e},y=u.a.forwardRef;void 0===y&&(y=v);var w=y(function(e,t){var n=e.innerRef,a=e.navigate,o=e.onClick,i=Object(p.a)(e,["innerRef","navigate","onClick"]),l=i.target,c=Object(f.a)({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||r(e)||(e.preventDefault(),a())}});return c.ref=v!==y?t||n:n,u.a.createElement("a",c)}),_=y(function(e,t){var n=e.component,r=void 0===n?w:n,a=e.replace,i=e.to,l=e.innerRef,c=Object(p.a)(e,["component","replace","to","innerRef"]);return u.a.createElement(o.h.Consumer,null,function(e){e||Object(d.a)(!1);var n=e.history,o=g(m(i,e.location),e.location),s=o?n.createHref(o):"",p=Object(f.a)({},c,{href:s,navigate:function(){var t=m(i,e.location);(a?n.replace:n.push)(t)}});return v!==y?p.ref=t||l:p.innerRef=l,u.a.createElement(r,p)})}),k=function(e){return e},x=u.a.forwardRef;void 0===x&&(x=k);var E=x(function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,l=void 0===i?"active":i,c=e.activeStyle,s=e.className,h=e.exact,b=e.isActive,v=e.location,y=e.sensitive,w=e.strict,E=e.style,F=e.to,T=e.innerRef,S=Object(p.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return u.a.createElement(o.h.Consumer,null,function(e){e||Object(d.a)(!1);var n=v||e.location,i=g(m(F,n),n),p=i.pathname,C=p&&p.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),P=C?Object(o.j)(n.pathname,{path:C,exact:h,sensitive:y,strict:w}):null,O=!!(b?b(P,n):P),A=O?a(s,l):s,j=O?Object(f.a)({},E,{},c):E,R=Object(f.a)({"aria-current":O&&r||null,className:A,style:j,to:i},S);return k!==x?R.ref=t||T:R.innerRef=T,u.a.createElement(_,R)})})},function(e,t,n){"use strict";function r(e){var t=e.message,n=e.when,r=void 0===n||n;return k.a.createElement(N.Consumer,null,function(e){if(e||Object(T.a)(!1),!r||e.staticContext)return null;var n=e.history.block;return k.a.createElement(z,{onMount:function(e){e.release=n(t)},onUpdate:function(e,r){r.message!==t&&(e.release(),e.release=n(t))},onUnmount:function(e){e.release()},message:t})})}function a(e){if(L[e])return L[e];var t=P.a.compile(e);return U<B&&(L[e]=t,U++),t}function o(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:a(e)(t,{pretty:!0})}function i(e){var t=e.computedMatch,n=e.to,r=e.push,a=void 0!==r&&r;return k.a.createElement(N.Consumer,null,function(e){e||Object(T.a)(!1);var r=e.history,i=e.staticContext,l=a?r.push:r.replace,u=Object(E.c)(t?"string"==typeof n?o(n,t.params):Object(S.a)({},n,{pathname:o(n.pathname,t.params)}):n);return i?(l(u),null):k.a.createElement(z,{onMount:function(){l(u)},onUpdate:function(e,t){var n=Object(E.c)(t.to);Object(E.f)(n,Object(S.a)({},u,{key:n.key}))||l(u)},to:n})})}function l(e,t){var n=""+t.end+t.strict+t.sensitive,r=q[n]||(q[n]={});if(r[e])return r[e];var a=[],o=P()(e,a,t),i={regexp:o,keys:a};return $<W&&(r[e]=i,$++),i}function u(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,u=void 0!==i&&i,c=n.sensitive,s=void 0!==c&&c;return[].concat(r).reduce(function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=l(n,{end:o,strict:u,sensitive:s}),a=r.regexp,i=r.keys,c=a.exec(e);if(!c)return null;var f=c[0],p=c.slice(1),d=e===f;return o&&!d?null:{path:n,url:"/"===n&&""===f?"/":f,isExact:d,params:i.reduce(function(e,t,n){return e[t.name]=p[n],e},{})}},null)}function c(e){return"/"===e.charAt(0)?e:"/"+e}function s(e,t){return e?Object(S.a)({},t,{pathname:c(e)+t.pathname}):t}function f(e,t){if(!e)return t;var n=c(e);return 0!==t.pathname.indexOf(n)?t:Object(S.a)({},t,{pathname:t.pathname.substr(n.length)})}function p(e){return"string"==typeof e?e:Object(E.e)(e)}function d(e){return function(){Object(T.a)(!1)}}function h(){}function b(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(A.a)(t,["wrappedComponentRef"]);return k.a.createElement(N.Consumer,null,function(t){return t||Object(T.a)(!1),k.a.createElement(e,Object(S.a)({},r,t,{ref:n}))})};return n.displayName=t,n.WrappedComponent=e,R()(n,e)}function m(){return K(M)}function g(){return K(N).location}function v(){var e=K(N).match;return e?e.params:{}}function y(e){var t=g(),n=K(N).match;return e?u(t.pathname,e):n}n.d(t,"a",function(){return I}),n.d(t,"b",function(){return r}),n.d(t,"c",function(){return i}),n.d(t,"d",function(){return H}),n.d(t,"e",function(){return D}),n.d(t,"f",function(){return V}),n.d(t,"g",function(){return Q}),n.d(t,"h",function(){return N}),n.d(t,"i",function(){return o}),n.d(t,"j",function(){return u}),n.d(t,"k",function(){return m}),n.d(t,"l",function(){return g}),n.d(t,"m",function(){return v}),n.d(t,"n",function(){return y}),n.d(t,"o",function(){return b});var w=n(4),_=n(0),k=n.n(_),x=n(11),E=(n.n(x),n(12)),F=(n(3),n(35)),T=n(6),S=n(5),C=n(36),P=n.n(C),O=n(14),A=(n.n(O),n(15)),j=n(39),R=n.n(j),M=function(e){var t=Object(F.a)();return t.displayName=e,t}("Router-History"),N=function(e){var t=Object(F.a)();return t.displayName=e,t}("Router"),D=function(e){function t(t){var n;return n=e.call(this,t)||this,n.state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen(function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e})),n}Object(w.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return k.a.createElement(N.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},k.a.createElement(M.Provider,{children:this.props.children||null,value:this.props.history}))},t}(k.a.Component),I=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return t=e.call.apply(e,[this].concat(r))||this,t.history=Object(E.d)(t.props),t}return Object(w.a)(t,e),t.prototype.render=function(){return k.a.createElement(D,{history:this.history,children:this.props.children})},t}(k.a.Component),z=function(e){function t(){return e.apply(this,arguments)||this}Object(w.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(k.a.Component),L={},B=1e4,U=0,q={},W=1e4,$=0,H=function(e){function t(){return e.apply(this,arguments)||this}return Object(w.a)(t,e),t.prototype.render=function(){var e=this;return k.a.createElement(N.Consumer,null,function(t){t||Object(T.a)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?u(n.pathname,e.props):t.match,a=Object(S.a)({},t,{location:n,match:r}),o=e.props,i=o.children,l=o.component,c=o.render;return Array.isArray(i)&&0===i.length&&(i=null),k.a.createElement(N.Provider,{value:a},a.match?i?"function"==typeof i?i(a):i:l?k.a.createElement(l,a):c?c(a):null:"function"==typeof i?i(a):null)})},t}(k.a.Component),V=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return t=e.call.apply(e,[this].concat(r))||this,t.handlePush=function(e){return t.navigateTo(e,"PUSH")},t.handleReplace=function(e){return t.navigateTo(e,"REPLACE")},t.handleListen=function(){return h},t.handleBlock=function(){return h},t}Object(w.a)(t,e);var n=t.prototype;return n.navigateTo=function(e,t){var n=this.props,r=n.basename,a=void 0===r?"":r,o=n.context,i=void 0===o?{}:o;i.action=t,i.location=s(a,Object(E.c)(e)),i.url=p(i.location)},n.render=function(){var e=this.props,t=e.basename,n=void 0===t?"":t,r=e.context,a=void 0===r?{}:r,o=e.location,i=void 0===o?"/":o,l=Object(A.a)(e,["basename","context","location"]),u={createHref:function(e){return c(n+p(e))},action:"POP",location:f(n,Object(E.c)(i)),push:this.handlePush,replace:this.handleReplace,go:d("go"),goBack:d("goBack"),goForward:d("goForward"),listen:this.handleListen,block:this.handleBlock};return k.a.createElement(D,Object(S.a)({},l,{history:u,staticContext:a}))},t}(k.a.Component),Q=function(e){function t(){return e.apply(this,arguments)||this}return Object(w.a)(t,e),t.prototype.render=function(){var e=this;return k.a.createElement(N.Consumer,null,function(t){t||Object(T.a)(!1);var n,r,a=e.props.location||t.location;return k.a.Children.forEach(e.props.children,function(e){if(null==r&&k.a.isValidElement(e)){n=e;var o=e.props.path||e.props.from;r=o?u(a.pathname,Object(S.a)({},e.props,{path:o})):t.match}}),r?k.a.cloneElement(n,{location:a,computedMatch:r}):null})},t}(k.a.Component),K=k.a.useContext},function(e,t,n){e.exports=n(31)()},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)?e:"/"+e}function a(e){return"/"===e.charAt(0)?e.substr(1):e}function o(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}function i(e,t){return o(e,t)?e.substr(t.length):e}function l(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function u(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}function c(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function s(e,t,n,r){var a;"string"==typeof e?(a=u(e),a.state=t):(a=Object(S.a)({},e),void 0===a.pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=Object(C.a)(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function f(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(P.a)(e.state,t.state)}function p(){function e(e){return a=e,function(){a===e&&(a=null)}}function t(e,t,n,r){if(null!=a){var o="function"==typeof a?a(e,t):a;"string"==typeof o?"function"==typeof n?n(o,r):r(!0):r(!1!==o)}else r(!0)}function n(e){function t(){n&&e.apply(void 0,arguments)}var n=!0;return o.push(t),function(){n=!1,o=o.filter(function(e){return e!==t})}}function r(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];o.forEach(function(e){return e.apply(void 0,t)})}var a=null,o=[];return{setPrompt:e,confirmTransitionTo:t,appendListener:n,notifyListeners:r}}function d(e,t){t(window.confirm(e))}function h(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}function b(){return-1===window.navigator.userAgent.indexOf("Trident")}function m(){return-1===window.navigator.userAgent.indexOf("Firefox")}function g(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}function v(){try{return window.history.state||{}}catch(e){return{}}}function y(e){function t(e){var t=e||{},n=t.key,r=t.state,a=window.location,o=a.pathname,l=a.search,u=a.hash,c=o+l+u;return W&&(c=i(c,W)),s(c,r,n)}function n(){return Math.random().toString(36).substr(2,q)}function a(e){Object(S.a)(J,e),J.length=P.length,$.notifyListeners(J.location,J.action)}function o(e){g(e)||f(t(e.state))}function u(){f(t(v()))}function f(e){if(H)H=!1,a();else{$.confirmTransitionTo(e,"POP",B,function(t){t?a({action:"POP",location:e}):m(e)})}}function m(e){var t=J.location,n=Q.indexOf(t.key);-1===n&&(n=0);var r=Q.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(H=!0,k(a))}function y(e){return W+c(e)}function w(e,t){var r=s(e,t,n(),J.location);$.confirmTransitionTo(r,"PUSH",B,function(e){if(e){var t=y(r),n=r.key,o=r.state;if(M)if(P.pushState({key:n,state:o},null,t),z)window.location.href=t;else{var i=Q.indexOf(J.location.key),l=Q.slice(0,i+1);l.push(r.key),Q=l,a({action:"PUSH",location:r})}else window.location.href=t}})}function _(e,t){var r=s(e,t,n(),J.location);$.confirmTransitionTo(r,"REPLACE",B,function(e){if(e){var t=y(r),n=r.key,o=r.state;if(M)if(P.replaceState({key:n,state:o},null,t),z)window.location.replace(t);else{var i=Q.indexOf(J.location.key);-1!==i&&(Q[i]=r.key),a({action:"REPLACE",location:r})}else window.location.replace(t)}})}function k(e){P.go(e)}function x(){k(-1)}function E(){k(1)}function F(e){K+=e,1===K&&1===e?(window.addEventListener(j,o),N&&window.addEventListener(R,u)):0===K&&(window.removeEventListener(j,o),N&&window.removeEventListener(R,u))}function T(e){void 0===e&&(e=!1);var t=$.setPrompt(e);return Y||(F(1),Y=!0),function(){return Y&&(Y=!1,F(-1)),t()}}function C(e){var t=$.appendListener(e);return F(1),function(){F(-1),t()}}void 0===e&&(e={}),A||Object(O.a)(!1);var P=window.history,M=h(),N=!b(),D=e,I=D.forceRefresh,z=void 0!==I&&I,L=D.getUserConfirmation,B=void 0===L?d:L,U=D.keyLength,q=void 0===U?6:U,W=e.basename?l(r(e.basename)):"",$=p(),H=!1,V=t(v()),Q=[V.key],K=0,Y=!1,J={length:P.length,action:"POP",location:V,createHref:y,push:w,replace:_,go:k,goBack:x,goForward:E,block:T,listen:C};return J}function w(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function _(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function k(e){window.location.hash=e}function x(e){window.location.replace(w(window.location.href)+"#"+e)}function E(e){function t(){var e=q(_());return L&&(e=i(e,L)),s(e)}function n(e){Object(S.a)(G,e),G.length=P.length,W.notifyListeners(G.location,G.action)}function a(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash}function o(){var e=_(),n=U(e);if(e!==n)x(n);else{var r=t(),o=G.location;if(!$&&a(o,r))return;if(H===c(r))return;H=null,u(r)}}function u(e){if($)$=!1,n();else{W.confirmTransitionTo(e,"POP",D,function(t){t?n({action:"POP",location:e}):f(e)})}}function f(e){var t=G.location,n=Y.lastIndexOf(c(t));-1===n&&(n=0);var r=Y.lastIndexOf(c(e));-1===r&&(r=0);var a=n-r;a&&($=!0,v(a))}function h(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=w(window.location.href)),n+"#"+U(L+c(e))}function b(e,t){var r=s(e,void 0,void 0,G.location);W.confirmTransitionTo(r,"PUSH",D,function(e){if(e){var t=c(r),a=U(L+t);if(_()!==a){H=t,k(a);var o=Y.lastIndexOf(c(G.location)),i=Y.slice(0,o+1);i.push(t),Y=i,n({action:"PUSH",location:r})}else n()}})}function g(e,t){var r=s(e,void 0,void 0,G.location);W.confirmTransitionTo(r,"REPLACE",D,function(e){if(e){var t=c(r),a=U(L+t);_()!==a&&(H=t,x(a));var o=Y.indexOf(c(G.location));-1!==o&&(Y[o]=t),n({action:"REPLACE",location:r})}})}function v(e){P.go(e)}function y(){v(-1)}function E(){v(1)}function F(e){J+=e,1===J&&1===e?window.addEventListener(M,o):0===J&&window.removeEventListener(M,o)}function T(e){void 0===e&&(e=!1);var t=W.setPrompt(e);return X||(F(1),X=!0),function(){return X&&(X=!1,F(-1)),t()}}function C(e){var t=W.appendListener(e);return F(1),function(){F(-1),t()}}void 0===e&&(e={}),A||Object(O.a)(!1);var P=window.history,j=(m(),e),R=j.getUserConfirmation,D=void 0===R?d:R,I=j.hashType,z=void 0===I?"slash":I,L=e.basename?l(r(e.basename)):"",B=N[z],U=B.encodePath,q=B.decodePath,W=p(),$=!1,H=null,V=_(),Q=U(V);V!==Q&&x(Q);var K=t(),Y=[c(K)],J=0,X=!1,G={length:P.length,action:"POP",location:K,createHref:h,push:b,replace:g,go:v,goBack:y,goForward:E,block:T,listen:C};return G}function F(e,t,n){return Math.min(Math.max(e,t),n)}function T(e){function t(e){Object(S.a)(C,e),C.length=C.entries.length,k.notifyListeners(C.location,C.action)}function n(){return Math.random().toString(36).substr(2,_)}function r(e,r){var a=s(e,r,n(),C.location);k.confirmTransitionTo(a,"PUSH",b,function(e){if(e){var n=C.index,r=n+1,o=C.entries.slice(0);o.length>r?o.splice(r,o.length-r,a):o.push(a),t({action:"PUSH",location:a,index:r,entries:o})}})}function a(e,r){var a=s(e,r,n(),C.location);k.confirmTransitionTo(a,"REPLACE",b,function(e){e&&(C.entries[C.index]=a,t({action:"REPLACE",location:a}))})}function o(e){var n=F(C.index+e,0,C.entries.length-1),r=C.entries[n];k.confirmTransitionTo(r,"POP",b,function(e){e?t({action:"POP",location:r,index:n}):t()})}function i(){o(-1)}function l(){o(1)}function u(e){var t=C.index+e;return t>=0&&t<C.entries.length}function f(e){return void 0===e&&(e=!1),k.setPrompt(e)}function d(e){return k.appendListener(e)}void 0===e&&(e={});var h=e,b=h.getUserConfirmation,m=h.initialEntries,g=void 0===m?["/"]:m,v=h.initialIndex,y=void 0===v?0:v,w=h.keyLength,_=void 0===w?6:w,k=p(),x=F(y,0,g.length-1),E=g.map(function(e){return"string"==typeof e?s(e,void 0,n()):s(e,void 0,e.key||n())}),T=c,C={length:E.length,action:"POP",location:E[x],index:x,entries:E,createHref:T,push:r,replace:a,go:o,goBack:i,goForward:l,canGo:u,block:f,listen:d};return C}n.d(t,"a",function(){return y}),n.d(t,"b",function(){return E}),n.d(t,"d",function(){return T}),n.d(t,"c",function(){return s}),n.d(t,"f",function(){return f}),n.d(t,"e",function(){return c});var S=n(5),C=n(33),P=n(34),O=(n(3),n(6)),A=!("undefined"==typeof window||!window.document||!window.document.createElement),j="popstate",R="hashchange",M="hashchange",N={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+a(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:a,decodePath:r},slash:{encodePath:r,decodePath:r}}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(38)},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}t.a=r},function(e,t,n){"use strict";function r(e){var t=e.children;return o.default.createElement("div",null,t.split("\n").map(function(e,t){return o.default.createElement("p",{key:t},e)}))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var a=n(0),o=function(e){return e&&e.__esModule?e:{default:e}}(a)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),c=r(u),s=n(2),f=r(s),p=n(1),d=(r(p),n(69)),h=r(d),b=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.full,n=e.author;return c.default.createElement("div",{className:h.default.Author,style:{display:"inline"}},n.site?c.default.createElement("a",{target:"_blank",href:n.site},n.who):c.default.createElement("span",null,n.who),t&&n.affiliation?c.default.createElement("span",null,", ",n.affiliation):null)}}]),t}(u.Component);b.propTypes={author:f.default.object.isRequired,full:f.default.bool},b.defaultProps={full:!1},t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){var t=e.href,n=e.type,r=void 0;return r="pdf"===n?i.default.createElement("span",null,i.default.createElement("span",{className:"fa fa-file"})," PDF"):"code"===n?i.default.createElement("span",null,i.default.createElement("span",{className:"fa fa-code"})," Code"):i.default.createElement("span",null,i.default.createElement("span",{className:"fa fa-link"})," ",n),i.default.createElement("a",{target:"_blank",href:t},r)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var o=n(0),i=r(o),l=n(2),u=(r(l),n(1));r(u)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){var t=e.pub,n=e.children,r=t.title,a=t.subtitle,o=t.abstract;return i.default.createElement("div",{className:s.default.PaperContainer},i.default.createElement("div",{className:s.default.Paper},i.default.createElement("h1",null,r),i.default.createElement("h2",null,a),i.default.createElement("ol",{className:s.default.Authors},u.default.map(t.authors,function(e,t){return i.default.createElement("li",{key:t},i.default.createElement(h.default,{author:e,full:!0}))})),i.default.createElement("ul",{className:s.default.Links},u.default.map(t.links,function(e,t){return"site"!=t?i.default.createElement("li",{key:t},i.default.createElement(m.default,{type:t,href:e})):null})),i.default.createElement("div",{className:s.default.Abstract},i.default.createElement("h4",null,"Abstract"),i.default.createElement(p.default,null,o)),i.default.createElement("div",{className:s.default.Abstract},n)))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var o=n(0),i=r(o),l=n(1),u=r(l),c=n(78),s=r(c),f=n(16),p=r(f),d=n(17),h=r(d),b=n(18),m=r(b)},function(e,t){e.exports={oopsla:{authors:[{who:"Arjen Rouvoet",affiliation:"Delft University of Technology",site:"https://ajrouvoet.github.io/"},{who:"Hendrik van Antwerpen",affiliation:"Delft Universtiy of Technology",site:"https://hendrik.van-antwerpen.net/"},{who:"Casper Bach Poulsen",affiliation:"Delft University of Technology",site:"http://casperbp.net/"},{who:"Robbert Krebbers",affiliation:"Radboud University and Delft University of Technology",site:"https://robbertkrebbers.nl/"},{who:"Eelco Visser",affiliation:"Delft University of Technology",site:"http://eelcovisser.org/"}],title:"Knowing when to ask",subtitle:"Sound scheduling name resolution queries in type checkers derived from declarative specifications\n",publication:null,abstract:"There is a large gap between the specification of type systems and the implementation of their type checkers, which impedes reasoning about the soundness of the type checker with respect to the specification. A vision to close this gap involves automatically obtaining type checkers from declarative programming language specifications. This moves the burden of proving correctness from a case-by-case basis for concrete languages, to a single correctness proof for the specification language. This vision is obstructed by an aspect common to all programming languages: name resolution. Naming and scoping are pervasive and complex aspects of the static semantics of programming languages. Implementations of type checkers for languages with name binding features such as modules, imports, classes, and inheritance interleave collection of binding information (i.e., declarations, scoping structure, and imports) and querying that information. This requires scheduling those two aspects in such a way that query answers are stable—i.e., they are computed only after all relevant binding structure has been collected. Type checkers for concrete languages accomplish stability using language-specific knowledge about the type system.\nIn this paper we give a language independent characterization of necessary and sufficient conditions to guarantee stability of name and type queries during type checking in terms of critical edges in an incomplete scope graph. We use critical edges to give a formal small-step operational semantics to a declarative specification language for type systems, delaying queries that may depend on missing information. This yields type checkers for the specified languages that are safe-by-construction—i.e., they safely schedule queries and only accept programs that are name- and type-correct according to the declarative language specification. We implement this approach, and evaluate it against specifications of a small module and record language, as well as subsets of Java and Scala.\n",links:{OOPSLA:"https://2020.splashcon.org/track/splash-2020-oopsla#event-overview",pdf:"./files/oopsla-2020.pdf",site:"/#/papers/knowing-when-to-ask",Extended:"https://zenodo.org/record/4091445",Artifact:"https://zenodo.org/record/4068065"}},cpp:{authors:[{who:"Arjen Rouvoet",affiliation:"Delft University of Technology"},{who:"Casper Bach Poulsen",affiliation:"Delft University of Technology",site:"http://casperbp.net/"},{who:"Robbert Krebbers",affiliation:"Delft University of Technology",site:"https://robbertkrebbers.nl/"},{who:"Eelco Visser",affiliation:"Delft University of Technology",site:"http://eelcovisser.org/"}],publication:null,title:"Intrinsically-Typed Definitional Interpreters for Linear, Session-Typed Languages",abstract:"An intrinsically-typed definitional interpreter is a concise specification of dynamic semantics, that is executable and type safe by construction.  Unfortunately, scaling intrinsically-typed definitional interpreters to more complicated object languages often results in definitions that are cluttered with manual proof work.  For linearly-typed languages (including session-typed languages) one has to prove that the interpreter, as well as all the operations on semantic components, treat values linearly. We present new methods and tools that make it possible to implement intrinsically-typed definitional interpreters for linearly-typed languages in a way that hides the majority of the manual proof work. Inspired by separation logic, we develop reusable and composable abstractions for programming with linear operations using dependent types. Using these abstractions, we define interpreters for linear lambda calculi with strong references, concurrency, and session-typed communication in Agda.\n",links:{pdf:"https://dl.acm.org/doi/pdf/10.1145/3372885.3373818",code:"https://github.com/metaborg/linear.agda","LFCS talk":"https://www.youtube.com/watch?v=9WmOmpyz_qo","CPP talk":"https://www.youtube.com/watch?v=xzGzwiYQJWE"}}}},function(e,t){e.exports={popl:{authors:[{who:"Arjen Rouvoet",affiliation:"Delft University of Technology",site:"https://ajrouvoet.github.io/"},{who:"Robbert Krebbers",affiliation:"Radboud University and Delft University of Technology",site:"https://robbertkrebbers.nl/"},{who:"Eelco Visser",affiliation:"Delft University of Technology",site:"http://eelcovisser.org/"}],title:"Intrinsically Typed Compilation with Nameless Labels",publication:null,abstract:"To avoid compilation errors it is desirable to verify that a compiler is type correct---i.e., given well-typed source code, it always outputs well-typed target code. This can be done intrinsically by implementing it as a function in a dependently typed programming language, such as Agda. This function manipulates data types of well-typed source and target programs, and is therefore type correct by construction. A key challenge in implementing an intrinsically typed compiler is the representation of labels in bytecode. Because label names are global, bytecode typing appears to be inherently a non-compositional, whole-program property. The individual operations of the compiler do not preserve this property, which requires the programmer to reason about labels, which spoils the compiler definition with proof terms.\nIn this paper, we address this problem using a new nameless and co-contextual representation of typed global label binding, which is compositional. Our key idea is to use linearity to ensure that all labels are defined exactly once. To write concise compilers that manipulate programs in our representation, we develop a linear, dependently typed, shallowly embedded language in Agda, based on separation logic. We show that this language enables the concise specification and implementation of intrinsically typed operations on bytecode, culminating in an intrinsically typed compiler for a language with structured control-flow.\n",links:{Preprint:"./files/popl-21-preprint.pdf","Agda sources":"https://doi.org/10.5281/zenodo.4072067","Artifact VM":"https://doi.org/10.5281/zenodo.4071953"}}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e){if(null==e)throw new TypeError("Cannot destructure undefined")}function u(){return m.default.createElement("div",{className:w.default.Section},m.default.createElement("h2",{className:w.default.SectionTitle},"Publications"),m.default.createElement("h3",{className:w.default.PubYear},"2021"),m.default.createElement(F.Publications,{pubs:H.default}),m.default.createElement("h3",{className:w.default.PubYear},"2020"),m.default.createElement(F.Publications,{pubs:W.default}),m.default.createElement("h3",{className:w.default.PubYear},"2018"),m.default.createElement(F.Publications,{pubs:U.default}),m.default.createElement("h3",{className:w.default.PubYear},"2017"),m.default.createElement(F.Publications,{pubs:L.default}),m.default.createElement("h3",{className:w.default.PubYear},"2016"),m.default.createElement(F.Publications,{pubs:I.default}),m.default.createElement("h3",{className:w.default.PubYear},"2013"),m.default.createElement(F.Publications,{pubs:N.default}))}function c(e){return l(e),m.default.createElement("ol",{className:w.default.Menu},m.default.createElement("li",null,m.default.createElement(v.Link,{to:"/"},"News & Publications")),m.default.createElement("li",null,m.default.createElement(v.Link,{to:"/blog"},"Blog")))}function s(e){return l(e),m.default.createElement("div",{className:w.default.Section,style:{background:"transparent"}},m.default.createElement("h2",{className:w.default.SectionTitle},"Updates"),m.default.createElement(S.default,{news:Q.default}))}function f(){return m.default.createElement("div",{className:w.default.Section,style:{background:"transparent"}},m.default.createElement("h2",{className:w.default.SectionTitle},"Blog"),m.default.createElement(C.BlogIndex,null),m.default.createElement(P.default,null))}function p(e){return l(e),m.default.createElement("div",null,m.default.createElement(s,null),m.default.createElement(u,null))}function d(){var e=(0,v.useRouteMatch)(),t=e.path;e.url;return m.default.createElement(v.Switch,null,m.default.createElement(v.Route,{exact:!0,path:t+"/knowing-when-to-ask",component:A.default}),m.default.createElement(v.Route,{exact:!0,path:t+"/typesafe-compilation",component:R.default}),m.default.createElement(v.Route,null,"404"))}var h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(23);var b=n(0),m=r(b),g=n(8),v=n(9),y=n(43),w=r(y);n(44),n(45);var _=n(53),k=r(_),x=n(61),E=r(x),F=n(64),T=(r(F),n(70)),S=r(T),C=n(72),P=r(C),O=n(77),A=r(O),j=n(79),R=r(j),M=n(80),N=r(M),D=n(81),I=r(D),z=n(82),L=r(z),B=n(83),U=r(B),q=n(20),W=r(q),$=n(21),H=r($),V=n(84),Q=r(V),K=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),h(t,[{key:"render",value:function(){return m.default.createElement(v.HashRouter,null,m.default.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap",rel:"stylesheet"}),m.default.createElement(v.Switch,null,m.default.createElement(v.Route,{path:"/papers",component:d}),m.default.createElement(v.Route,null,m.default.createElement("style",{dangerouslySetInnerHTML:{__html:"\n                         body {\n                           background: linear-gradient(to bottom right, darkcyan, #232839 75%);\n                         }"}}),m.default.createElement("div",{className:w.default.columns},m.default.createElement("div",{className:w.default.left},m.default.createElement(E.default,null),m.default.createElement(k.default,null),m.default.createElement("p",null,"<>< ",m.default.createElement("a",{taret:"_blank",href:"https://www.bible.com/bible/116/PSA.139"},"Ps. 139"))),m.default.createElement("div",{className:w.default.right},m.default.createElement(c,null),m.default.createElement(v.Route,{exact:!0,path:"/",component:p}),m.default.createElement(v.Route,{path:"/blog",component:f}))))))}}]),t}(b.Component);(0,g.render)(m.default.createElement(K,null),document.getElementById("root"))},function(e,t){},function(e,t){function n(e,t){var n=e[1]||"",a=e[3];if(!a)return n;if(t&&"function"==typeof btoa){var o=r(a);return[n].concat(a.sources.map(function(e){return"/*# sourceURL="+a.sourceRoot+e+" */"})).concat([o]).join("\n")}return[n].join("\n")}function r(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=n(t,e);return t[2]?"@media "+t[2]+"{"+r+"}":r}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var o=this[a][0];"number"==typeof o&&(r[o]=!0)}for(a=0;a<e.length;a++){var i=e[a];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=h[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(s(r.parts[o],t))}else{for(var i=[],o=0;o<r.parts.length;o++)i.push(s(r.parts[o],t));h[r.id]={id:r.id,refs:1,parts:i}}}}function a(e,t){for(var n=[],r={},a=0;a<e.length;a++){var o=e[a],i=t.base?o[0]+t.base:o[0],l=o[1],u=o[2],c=o[3],s={css:l,media:u,sourceMap:c};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function o(e,t){var n=m(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=y[y.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),y.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=m(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,a)}}function i(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=y.indexOf(e);t>=0&&y.splice(t,1)}function l(e){var t=document.createElement("style");return e.attrs.type="text/css",c(t,e.attrs),o(e,t),t}function u(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",c(t,e.attrs),o(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function s(e,t){var n,r,a,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=v++;n=g||(g=l(t)),r=f.bind(null,n,c,!1),a=f.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=u(t),r=d.bind(null,n,t),a=function(){i(n),n.href&&URL.revokeObjectURL(n.href)}):(n=l(t),r=p.bind(null,n),a=function(){i(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}function f(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=_(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function d(e,t,n){var r=n.css,a=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||o)&&(r=w(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}var h={},b=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),m=function(e){var t={};return function(n){if(void 0===t[n]){var r=e.call(this,n);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[n]=r}return t[n]}}(function(e){return document.querySelector(e)}),g=null,v=0,y=[],w=n(26);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");t=t||{},t.attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=b()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=a(e,t);return r(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var l=n[i],u=h[l.id];u.refs--,o.push(u)}if(e){r(a(e,t),t)}for(var i=0;i<o.length;i++){var u=o[i];if(0===u.refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete h[u.id]}}}};var _=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(a))return e;var o;return o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")"})}},function(e,t,n){"use strict";function r(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(e,t,n){this.props=e,this.context=t,this.refs=N,this.updater=n||M}function o(){}function i(e,t,n){this.props=e,this.context=t,this.refs=N,this.updater=n||M}function l(e,t,n){var r,a={},o=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(o=""+t.key),t)z.call(t,r)&&!L.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:k,type:e,key:o,ref:i,props:a,_owner:I.current}}function u(e,t){return{$$typeof:k,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function c(e){return"object"==typeof e&&null!==e&&e.$$typeof===k}function s(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}function f(e,t,n,r){if(U.length){var a=U.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function p(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>U.length&&U.push(e)}function d(e,t,n,a){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case k:case x:i=!0}}if(i)return n(a,e,""===t?"."+b(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){o=e[l];var u=t+b(o,l);i+=d(o,u,n,a)}else if(null===e||"object"!=typeof e?u=null:(u=R&&e[R]||e["@@iterator"],u="function"==typeof u?u:null),"function"==typeof u)for(e=u.call(e),l=0;!(o=e.next()).done;)o=o.value,u=t+b(o,l++),i+=d(o,u,n,a);else if("object"===o)throw n=""+e,Error(r(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return i}function h(e,t,n){return null==e?0:d(e,"",t,n)}function b(e,t){return"object"==typeof e&&null!==e&&null!=e.key?s(e.key):t.toString(36)}function m(e,t){e.func.call(e.context,t,e.count++)}function g(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?v(e,r,n,function(e){return e}):null!=e&&(c(e)&&(e=u(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(B,"$&/")+"/")+n)),r.push(e))}function v(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(B,"$&/")+"/"),t=f(t,o,r,a),h(e,g,t),p(t)}function y(){var e=q.current;if(null===e)throw Error(r(321));return e}/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var w=n(7),_="function"==typeof Symbol&&Symbol.for,k=_?Symbol.for("react.element"):60103,x=_?Symbol.for("react.portal"):60106,E=_?Symbol.for("react.fragment"):60107,F=_?Symbol.for("react.strict_mode"):60108,T=_?Symbol.for("react.profiler"):60114,S=_?Symbol.for("react.provider"):60109,C=_?Symbol.for("react.context"):60110,P=_?Symbol.for("react.forward_ref"):60112,O=_?Symbol.for("react.suspense"):60113,A=_?Symbol.for("react.memo"):60115,j=_?Symbol.for("react.lazy"):60116,R="function"==typeof Symbol&&Symbol.iterator,M={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},N={};a.prototype.isReactComponent={},a.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(r(85));this.updater.enqueueSetState(this,e,t,"setState")},a.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},o.prototype=a.prototype;var D=i.prototype=new o;D.constructor=i,w(D,a.prototype),D.isPureReactComponent=!0;var I={current:null},z=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0},B=/\/+/g,U=[],q={current:null},W={ReactCurrentDispatcher:q,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:I,IsSomeRendererActing:{current:!1},assign:w};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return v(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=f(null,null,t,n),h(e,m,t),p(t)},count:function(e){return h(e,function(){return null},null)},toArray:function(e){var t=[];return v(e,t,null,function(e){return e}),t},only:function(e){if(!c(e))throw Error(r(143));return e}},t.Component=a,t.Fragment=E,t.Profiler=T,t.PureComponent=i,t.StrictMode=F,t.Suspense=O,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W,t.cloneElement=function(e,t,n){if(null===e||void 0===e)throw Error(r(267,e));var a=w({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=I.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)z.call(t,c)&&!L.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];a.children=u}return{$$typeof:k,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),e={$$typeof:C,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null},e.Provider={$$typeof:S,_context:e},e.Consumer=e},t.createElement=l,t.createFactory=function(e){var t=l.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:P,render:e}},t.isValidElement=c,t.lazy=function(e){return{$$typeof:j,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:A,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return y().useCallback(e,t)},t.useContext=function(e,t){return y().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return y().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return y().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return y().useLayoutEffect(e,t)},t.useMemo=function(e,t){return y().useMemo(e,t)},t.useReducer=function(e,t,n){return y().useReducer(e,t,n)},t.useRef=function(e){return y().useRef(e)},t.useState=function(e){return y().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";function r(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(e,t,n,r,a,o,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}function o(e,t,n,r,o,i,l,u,c){Ua=!1,qa=null,a.apply(Ha,arguments)}function i(e,t,n,a,i,l,u,c,s){if(o.apply(this,arguments),Ua){if(!Ua)throw Error(r(198));var f=qa;Ua=!1,qa=null,Wa||(Wa=!0,$a=f)}}function l(e,t,n){var r=e.type||"unknown-event";e.currentTarget=Ka(n),i(r,t,void 0,e),e.currentTarget=null}function u(){if(Ya)for(var e in Ja){var t=Ja[e],n=Ya.indexOf(e);if(!(-1<n))throw Error(r(96,e));if(!Xa[n]){if(!t.extractEvents)throw Error(r(97,e));Xa[n]=t,n=t.eventTypes;for(var a in n){var o=void 0,i=n[a],l=t,u=a;if(Ga.hasOwnProperty(u))throw Error(r(99,u));Ga[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&c(s[o],l,u);o=!0}else i.registrationName?(c(i.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(r(98,a,e))}}}}function c(e,t,n){if(Za[e])throw Error(r(100,e));Za[e]=t,eo[e]=t.eventTypes[n].dependencies}function s(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var a=e[t];if(!Ja.hasOwnProperty(t)||Ja[t]!==a){if(Ja[t])throw Error(r(102,t));Ja[t]=a,n=!0}}n&&u()}function f(e){if(e=Qa(e)){if("function"!=typeof no)throw Error(r(280));var t=e.stateNode;t&&(t=Va(t),no(e.stateNode,e.type,t))}}function p(e){ro?ao?ao.push(e):ao=[e]:ro=e}function d(){if(ro){var e=ro,t=ao;if(ao=ro=null,f(e),t)for(e=0;e<t.length;e++)f(t[e])}}function h(e,t){return e(t)}function b(e,t,n,r,a){return e(t,n,r,a)}function m(){}function g(){null===ro&&null===ao||(m(),d())}function v(e,t,n){if(lo)return e(t,n);lo=!0;try{return oo(e,t,n)}finally{lo=!1,g()}}function y(e){return!!co.call(fo,e)||!co.call(so,e)&&(uo.test(e)?fo[e]=!0:(so[e]=!0,!1))}function w(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}function _(e,t,n,r){if(null===t||void 0===t||w(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function k(e,t,n,r,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}function x(e){return e[1].toUpperCase()}function E(e,t,n,r){var a=po.hasOwnProperty(t)?po[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(_(t,n,a,r)&&(n=null),r||null===a?y(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(a=a.type,n=3===a||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function F(e){return null===e||"object"!=typeof e?null:(e=Ro&&e[Ro]||e["@@iterator"],"function"==typeof e?e:null)}function T(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)})}}function S(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _o:return"Fragment";case wo:return"Portal";case xo:return"Profiler";case ko:return"StrictMode";case Co:return"Suspense";case Po:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case Fo:return"Context.Consumer";case Eo:return"Context.Provider";case So:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case Oo:return S(e.type);case jo:return S(e.render);case Ao:if(e=1===e._status?e._result:null)return S(e)}return null}function C(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,o=S(e.type);n=null,r&&(n=S(r.type)),r=o,o="",a?o=" (at "+a.fileName.replace(go,"")+":"+a.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function P(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function O(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function A(e){var t=O(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function j(e){e._valueTracker||(e._valueTracker=A(e))}function R(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=O(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function M(e,t){var n=t.checked;return La({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function N(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=P(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function D(e,t){null!=(t=t.checked)&&E(e,"checked",t,!1)}function I(e,t){D(e,t);var n=P(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?L(e,t.type,n):t.hasOwnProperty("defaultValue")&&L(e,t.type,P(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,""!==n&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function L(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function B(e){var t="";return za.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}function U(e,t){return e=La({children:void 0},t),(t=B(t.children))&&(e.children=t),e}function q(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+P(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function W(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(r(91));return La({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function $(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(r(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(r(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:P(n)}}function H(e,t){var n=P(t.value),r=P(t.defaultValue);null!=n&&(n=""+n,n!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function V(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function Q(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function K(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Q(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}function Y(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function J(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}function X(e){if(Io[e])return Io[e];if(!Do[e])return e;var t,n=Do[e];for(t in n)if(n.hasOwnProperty(t)&&t in zo)return Io[e]=n[t];return e}function G(e){var t=Qo.get(e);return void 0===t&&(t=new Map,Qo.set(e,t)),t}function Z(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{t=e,0!=(1026&t.effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function ee(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function te(e){if(Z(e)!==e)throw Error(r(188))}function ne(e){var t=e.alternate;if(!t){if(null===(t=Z(e)))throw Error(r(188));return t!==e?null:e}for(var n=e,a=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(a=o.return)){n=a;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return te(o),e;if(i===a)return te(o),t;i=i.sibling}throw Error(r(188))}if(n.return!==a.return)n=o,a=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,a=i;break}if(u===a){l=!0,a=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,a=o;break}if(u===a){l=!0,a=i,n=o;break}u=u.sibling}if(!l)throw Error(r(189))}}if(n.alternate!==a)throw Error(r(190))}if(3!==n.tag)throw Error(r(188));return n.stateNode.current===n?e:t}function re(e){if(!(e=ne(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function ae(e,t){if(null==t)throw Error(r(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function oe(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}function ie(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)l(e,t[r],n[r]);else t&&l(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function le(e){if(null!==e&&(Ko=ae(Ko,e)),e=Ko,Ko=null,e){if(oe(e,ie),Ko)throw Error(r(95));if(Wa)throw e=$a,Wa=!1,$a=null,e}}function ue(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ce(e){if(!to)return!1;e="on"+e;var t=e in document;return t||(t=document.createElement("div"),t.setAttribute(e,"return;"),t="function"==typeof t[e]),t}function se(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Yo.length&&Yo.push(e)}function fe(e,t,n,r){if(Yo.length){var a=Yo.pop();return a.topLevelType=e,a.eventSystemFlags=r,a.nativeEvent=t,a.targetInst=n,a}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pe(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;t=n.tag,5!==t&&6!==t||e.ancestors.push(n),n=Ke(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=ue(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,u=0;u<Xa.length;u++){var c=Xa[u];c&&(c=c.extractEvents(r,t,o,a,i))&&(l=ae(l,c))}le(l)}}function de(e,t,n){if(!n.has(e)){switch(e){case"scroll":Se(t,"scroll",!0);break;case"focus":case"blur":Se(t,"focus",!0),Se(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ce(e)&&Se(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Vo.indexOf(e)&&Te(e,t)}n.set(e,null)}}function he(e,t){var n=G(t);ai.forEach(function(e){de(e,t,n)}),oi.forEach(function(e){de(e,t,n)})}function be(e,t,n,r,a){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:a,container:r}}function me(e,t){switch(e){case"focus":case"blur":Go=null;break;case"dragenter":case"dragleave":Zo=null;break;case"mouseover":case"mouseout":ei=null;break;case"pointerover":case"pointerout":ti.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ni.delete(t.pointerId)}}function ge(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=be(t,n,r,a,o),null!==t&&null!==(t=Ye(t))&&Bo(t),e):(e.eventSystemFlags|=r,e)}function ve(e,t,n,r,a){switch(t){case"focus":return Go=ge(Go,e,t,n,r,a),!0;case"dragenter":return Zo=ge(Zo,e,t,n,r,a),!0;case"mouseover":return ei=ge(ei,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return ti.set(o,ge(ti.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ni.set(o,ge(ni.get(o)||null,e,t,n,r,a)),!0}return!1}function ye(e){var t=Ke(e.target);if(null!==t){var n=Z(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=ee(n)))return e.blockedOn=t,void Ba.unstable_runWithPriority(e.priority,function(){Uo(n)})}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function we(e){if(null!==e.blockedOn)return!1;var t=Ae(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Ye(t);return null!==n&&Bo(n),e.blockedOn=t,!1}return!0}function _e(e,t,n){we(e)&&n.delete(t)}function ke(){for(Jo=!1;0<Xo.length;){var e=Xo[0];if(null!==e.blockedOn){e=Ye(e.blockedOn),null!==e&&Lo(e);break}var t=Ae(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:Xo.shift()}null!==Go&&we(Go)&&(Go=null),null!==Zo&&we(Zo)&&(Zo=null),null!==ei&&we(ei)&&(ei=null),ti.forEach(_e),ni.forEach(_e)}function xe(e,t){e.blockedOn===t&&(e.blockedOn=null,Jo||(Jo=!0,Ba.unstable_scheduleCallback(Ba.unstable_NormalPriority,ke)))}function Ee(e){function t(t){return xe(t,e)}if(0<Xo.length){xe(Xo[0],e);for(var n=1;n<Xo.length;n++){var r=Xo[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Go&&xe(Go,e),null!==Zo&&xe(Zo,e),null!==ei&&xe(ei,e),ti.forEach(t),ni.forEach(t),n=0;n<ri.length;n++)r=ri[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<ri.length&&(n=ri[0],null===n.blockedOn);)ye(n),null===n.blockedOn&&ri.shift()}function Fe(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],o="on"+(a[0].toUpperCase()+a.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},ui.set(r,t),li.set(r,o),ii[a]=o}}function Te(e,t){Se(t,e,!1)}function Se(e,t,n){var r=ui.get(t);switch(void 0===r?2:r){case 0:r=Ce.bind(null,t,1,e);break;case 1:r=Pe.bind(null,t,1,e);break;default:r=Oe.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Ce(e,t,n,r){io||m();var a=Oe,o=io;io=!0;try{b(a,e,t,n,r)}finally{(io=o)||g()}}function Pe(e,t,n,r){di(pi,Oe.bind(null,e,t,n,r))}function Oe(e,t,n,r){if(hi)if(0<Xo.length&&-1<ai.indexOf(e))e=be(null,e,t,n,r),Xo.push(e);else{var a=Ae(e,t,n,r);if(null===a)me(e,r);else if(-1<ai.indexOf(e))e=be(a,e,t,n,r),Xo.push(e);else if(!ve(a,e,t,n,r)){me(e,r),e=fe(e,r,null,t);try{v(pe,e)}finally{se(e)}}}}function Ae(e,t,n,r){if(n=ue(r),null!==(n=Ke(n))){var a=Z(n);if(null===a)n=null;else{var o=a.tag;if(13===o){if(null!==(n=ee(a)))return n;n=null}else if(3===o){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;n=null}else a!==n&&(n=null)}}e=fe(e,r,n,t);try{v(pe,e)}finally{se(e)}return null}function je(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||bi.hasOwnProperty(e)&&bi[e]?(""+t).trim():t+"px"}function Re(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=je(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}function Me(e,t){if(t){if(gi[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(r(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(r(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(r(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(r(62,""))}}function Ne(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function De(e,t){e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument;var n=G(e);t=eo[t];for(var r=0;r<t.length;r++)de(t[r],e,n)}function Ie(){}function ze(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Le(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Be(e,t){var n=Le(e);e=0;for(var r;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Le(n)}}function Ue(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Ue(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function qe(){for(var e=window,t=ze();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;e=t.contentWindow,t=ze(e.document)}return t}function We(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function $e(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function He(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function Ve(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qe(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===yi||n===ki||n===_i){if(0===t)return e;t--}else n===wi&&t++}e=e.previousSibling}return null}function Ke(e){var t=e[Ci];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Oi]||n[Ci]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Qe(e);null!==e;){if(n=e[Ci])return n;e=Qe(e)}return t}e=n,n=e.parentNode}return null}function Ye(e){return e=e[Ci]||e[Oi],!e||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Je(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(r(33))}function Xe(e){return e[Pi]||null}function Ge(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ze(e,t){var n=e.stateNode;if(!n)return null;var a=Va(n);if(!a)return null;n=a[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(e=e.type,a=!("button"===e||"input"===e||"select"===e||"textarea"===e)),e=!a;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(r(231,t,typeof n));return n}function et(e,t,n){(t=Ze(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=ae(n._dispatchListeners,t),n._dispatchInstances=ae(n._dispatchInstances,e))}function tt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Ge(t);for(t=n.length;0<t--;)et(n[t],"captured",e);for(t=0;t<n.length;t++)et(n[t],"bubbled",e)}}function nt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Ze(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=ae(n._dispatchListeners,t),n._dispatchInstances=ae(n._dispatchInstances,e))}function rt(e){e&&e.dispatchConfig.registrationName&&nt(e._targetInst,null,e)}function at(e){oe(e,tt)}function ot(){if(Ri)return Ri;var e,t,n=ji,r=n.length,a="value"in Ai?Ai.value:Ai.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Ri=a.slice(e,1<t?1-t:void 0)}function it(){return!0}function lt(){return!1}function ut(e,t,n,r){this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface;for(var a in e)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?it:lt,this.isPropagationStopped=lt,this}function ct(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function st(e){if(!(e instanceof this))throw Error(r(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ft(e){e.eventPool=[],e.getPooled=ct,e.release=st}function pt(e,t){switch(e){case"keyup":return-1!==Di.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function dt(e){return e=e.detail,"object"==typeof e&&"data"in e?e.data:null}function ht(e,t){switch(e){case"compositionend":return dt(t);case"keypress":return 32!==t.which?null:(Wi=!0,Ui);case"textInput":return e=t.data,e===Ui&&Wi?null:e;default:return null}}function bt(e,t){if($i)return"compositionend"===e||!Ii&&pt(e,t)?(e=ot(),Ri=ji=Ai=null,$i=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bi&&"ko"!==t.locale?null:t.data;default:return null}}function mt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vi[e.type]:"textarea"===t}function gt(e,t,n){return e=ut.getPooled(Qi.change,e,t,n),e.type="change",p(n),at(e),e}function vt(e){le(e)}function yt(e){if(R(Je(e)))return e}function wt(e,t){if("change"===e)return t}function _t(){Ki&&(Ki.detachEvent("onpropertychange",kt),Yi=Ki=null)}function kt(e){if("value"===e.propertyName&&yt(Yi))if(e=gt(Yi,e,ue(e)),io)le(e);else{io=!0;try{h(vt,e)}finally{io=!1,g()}}}function xt(e,t,n){"focus"===e?(_t(),Ki=t,Yi=n,Ki.attachEvent("onpropertychange",kt)):"blur"===e&&_t()}function Et(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return yt(Yi)}function Ft(e,t){if("click"===e)return yt(t)}function Tt(e,t){if("input"===e||"change"===e)return yt(t)}function St(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Zi[e])&&!!t[e]}function Ct(){return St}function Pt(e,t){return e===t&&(0!==e||1/e==1/t)||e!==e&&t!==t}function Ot(e,t){if(ul(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cl.call(t,n[r])||!ul(e[n[r]],t[n[r]]))return!1;return!0}function At(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return bl||null==pl||pl!==ze(n)?null:(n=pl,"selectionStart"in n&&We(n)?n={start:n.selectionStart,end:n.selectionEnd}:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection(),n={anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}),hl&&Ot(hl,n)?null:(hl=n,e=ut.getPooled(fl.select,dl,e,t),e.type="select",e.target=pl,at(e),e))}function jt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Rt(e){0>Ml||(e.current=Rl[Ml],Rl[Ml]=null,Ml--)}function Mt(e,t){Ml++,Rl[Ml]=e.current,e.current=t}function Nt(e,t){var n=e.type.contextTypes;if(!n)return Nl;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Dt(e){return null!==(e=e.childContextTypes)&&void 0!==e}function It(){Rt(Il),Rt(Dl)}function zt(e,t,n){if(Dl.current!==Nl)throw Error(r(168));Mt(Dl,t),Mt(Il,n)}function Lt(e,t,n){var a=e.stateNode;if(e=t.childContextTypes,"function"!=typeof a.getChildContext)return n;a=a.getChildContext();for(var o in a)if(!(o in e))throw Error(r(108,S(t)||"Unknown",o));return La({},n,{},a)}function Bt(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Nl,zl=Dl.current,Mt(Dl,e),Mt(Il,Il.current),!0}function Ut(e,t,n){var a=e.stateNode;if(!a)throw Error(r(169));n?(e=Lt(e,t,zl),a.__reactInternalMemoizedMergedChildContext=e,Rt(Il),Rt(Dl),Mt(Dl,e)):Rt(Il),Mt(Il,n)}function qt(){switch($l()){case Hl:return 99;case Vl:return 98;case Ql:return 97;case Kl:return 96;case Yl:return 95;default:throw Error(r(332))}}function Wt(e){switch(e){case 99:return Hl;case 98:return Vl;case 97:return Ql;case 96:return Kl;case 95:return Yl;default:throw Error(r(332))}}function $t(e,t){return e=Wt(e),Ll(e,t)}function Ht(e,t,n){return e=Wt(e),Bl(e,t,n)}function Vt(e){return null===Zl?(Zl=[e],eu=Bl(Hl,Kt)):Zl.push(e),Jl}function Qt(){if(null!==eu){var e=eu;eu=null,Ul(e)}Kt()}function Kt(){if(!tu&&null!==Zl){tu=!0;var e=0;try{var t=Zl;$t(99,function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}}),Zl=null}catch(t){throw null!==Zl&&(Zl=Zl.slice(e+1)),Bl(Hl,Qt),t}finally{tu=!1}}}function Yt(e,t,n){return n/=10,1073741821-(1+((1073741821-e+t/10)/n|0))*n}function Jt(e,t){if(e&&e.defaultProps){t=La({},t),e=e.defaultProps;for(var n in e)void 0===t[n]&&(t[n]=e[n])}return t}function Xt(){lu=iu=ou=null}function Gt(e){var t=au.current;Rt(au),e.type._context._currentValue=t}function Zt(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function en(e,t){ou=e,lu=iu=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Nu=!0),e.firstContext=null)}function tn(e,t){if(lu!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(lu=e,t=1073741823),t={context:e,observedBits:t,next:null},null===iu){if(null===ou)throw Error(r(308));iu=t,ou.dependencies={expirationTime:0,firstContext:t,responders:null}}else iu=iu.next=t;return e._currentValue}function nn(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function rn(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function an(e,t){return e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null},e.next=e}function on(e,t){if(null!==(e=e.updateQueue)){e=e.shared;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ln(e,t){var n=e.alternate;null!==n&&rn(n,e),e=e.updateQueue,n=e.baseQueue,null===n?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function un(e,t,n,r){var a=e.updateQueue;uu=!1;var o=a.baseQueue,i=a.shared.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}o=i,a.shared.pending=null,l=e.alternate,null!==l&&null!==(l=l.updateQueue)&&(l.baseQueue=i)}if(null!==o){l=o.next;var u=a.baseState,c=0,s=null,f=null,p=null;if(null!==l)for(var d=l;;){if((i=d.expirationTime)<r){var h={expirationTime:d.expirationTime,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null};null===p?(f=p=h,s=u):p=p.next=h,i>c&&(c=i)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null}),Xr(i,d.suspenseConfig);e:{var b=e,m=d;switch(i=t,h=n,m.tag){case 1:if("function"==typeof(b=m.payload)){u=b.call(h,u,i);break e}u=b;break e;case 3:b.effectTag=-4097&b.effectTag|64;case 0:if(b=m.payload,null===(i="function"==typeof b?b.call(h,u,i):b)||void 0===i)break e;u=La({},u,i);break e;case 2:uu=!0}}null!==d.callback&&(e.effectTag|=32,i=a.effects,null===i?a.effects=[d]:i.push(d))}if(null===(d=d.next)||d===l){if(null===(i=a.shared.pending))break;d=o.next=i.next,i.next=l,a.baseQueue=o=i,a.shared.pending=null}}null===p?s=u:p.next=f,a.baseState=s,a.baseQueue=p,Gr(c),e.expirationTime=c,e.memoizedState=u}}function cn(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var a=e[t],o=a.callback;if(null!==o){if(a.callback=null,a=o,o=n,"function"!=typeof a)throw Error(r(191,a));a.call(o)}}}function sn(e,t,n,r){t=e.memoizedState,n=n(r,t),n=null===n||void 0===n?t:La({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}function fn(e,t,n,r,a,o,i){return e=e.stateNode,"function"==typeof e.shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!Ot(n,r)||!Ot(a,o))}function pn(e,t,n){var r=!1,a=Nl,o=t.contextType;return"object"==typeof o&&null!==o?o=tn(o):(a=Dt(t)?zl:Dl.current,r=t.contextTypes,o=(r=null!==r&&void 0!==r)?Nt(e,a):Nl),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=fu,e.stateNode=t,t._reactInternalFiber=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function dn(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&fu.enqueueReplaceState(t,t.state,null)}function hn(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=su,nn(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=tn(o):(o=Dt(t)?zl:Dl.current,a.context=Nt(e,o)),un(e,n,a,r),a.state=e.memoizedState,o=t.getDerivedStateFromProps,"function"==typeof o&&(sn(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&fu.enqueueReplaceState(a,a.state,null),un(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}function bn(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(r(309));var a=n.stateNode}if(!a)throw Error(r(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=a.refs;t===su&&(t=a.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(r(284));if(!n._owner)throw Error(r(290,e))}return e}function mn(e,t){if("textarea"!==e.type)throw Error(r(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function gn(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function a(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return e=va(e,t),e.index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index,r<n?(t.effectTag=2,n):r):(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?(t=_a(n,e.mode,r),t.return=e,t):(t=o(t,n),t.return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?(r=o(t,n.props),r.ref=bn(e,t,n),r.return=e,r):(r=ya(n.type,n.key,n.props,null,e.mode,r),r.ref=bn(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?(t=ka(n,e.mode,r),t.return=e,t):(t=o(t,n.children||[]),t.return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?(t=wa(n,e.mode,r,a),t.return=e,t):(t=o(t,n),t.return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return t=_a(""+t,e.mode,n),t.return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case yo:return n=ya(t.type,t.key,t.props,null,e.mode,n),n.ref=bn(e,null,t),n.return=e,n;case wo:return t=ka(t,e.mode,n),t.return=e,t}if(pu(t)||F(t))return t=wa(t,e.mode,n,null),t.return=e,t;mn(e,t)}return null}function d(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case yo:return n.key===a?n.type===_o?f(e,t,n.props.children,r,a):c(e,t,n,r):null;case wo:return n.key===a?s(e,t,n,r):null}if(pu(n)||F(n))return null!==a?null:f(e,t,n,r,null);mn(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return e=e.get(n)||null,u(t,e,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case yo:return e=e.get(null===r.key?n:r.key)||null,r.type===_o?f(t,e,r.props.children,a,r.key):c(t,e,r,a);case wo:return e=e.get(null===r.key?n:r.key)||null,s(t,e,r,a)}if(pu(r)||F(r))return e=e.get(n)||null,f(t,e,r,a,null);mn(t,r)}return null}function b(r,o,l,u){for(var c=null,s=null,f=o,b=o=0,m=null;null!==f&&b<l.length;b++){f.index>b?(m=f,f=null):m=f.sibling;var g=d(r,f,l[b],u);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(r,f),o=i(g,o,b),null===s?c=g:s.sibling=g,s=g,f=m}if(b===l.length)return n(r,f),c;if(null===f){for(;b<l.length;b++)null!==(f=p(r,l[b],u))&&(o=i(f,o,b),null===s?c=f:s.sibling=f,s=f);return c}for(f=a(r,f);b<l.length;b++)null!==(m=h(f,r,b,l[b],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?b:m.key),o=i(m,o,b),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach(function(e){return t(r,e)}),c}function m(o,l,u,c){var s=F(u);if("function"!=typeof s)throw Error(r(150));if(null==(u=s.call(u)))throw Error(r(151));for(var f=s=null,b=l,m=l=0,g=null,v=u.next();null!==b&&!v.done;m++,v=u.next()){b.index>m?(g=b,b=null):g=b.sibling;var y=d(o,b,v.value,c);if(null===y){null===b&&(b=g);break}e&&b&&null===y.alternate&&t(o,b),l=i(y,l,m),null===f?s=y:f.sibling=y,f=y,b=g}if(v.done)return n(o,b),s;if(null===b){for(;!v.done;m++,v=u.next())null!==(v=p(o,v.value,c))&&(l=i(v,l,m),null===f?s=v:f.sibling=v,f=v);return s}for(b=a(o,b);!v.done;m++,v=u.next())null!==(v=h(b,o,m,v.value,c))&&(e&&null!==v.alternate&&b.delete(null===v.key?m:v.key),l=i(v,l,m),null===f?s=v:f.sibling=v,f=v);return e&&b.forEach(function(e){return t(o,e)}),s}return function(e,a,i,u){var c="object"==typeof i&&null!==i&&i.type===_o&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case yo:e:{for(s=i.key,c=a;null!==c;){if(c.key===s){switch(c.tag){case 7:if(i.type===_o){n(e,c.sibling),a=o(c,i.props.children),a.return=e,e=a;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),a=o(c,i.props),a.ref=bn(e,c,i),a.return=e,e=a;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===_o?(a=wa(i.props.children,e.mode,u,i.key),a.return=e,e=a):(u=ya(i.type,i.key,i.props,null,e.mode,u),u.ref=bn(e,a,i),u.return=e,e=u)}return l(e);case wo:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(e,a.sibling),a=o(a,i.children||[]),a.return=e,e=a;break e}n(e,a);break}t(e,a),a=a.sibling}a=ka(i,e.mode,u),a.return=e,e=a}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==a&&6===a.tag?(n(e,a.sibling),a=o(a,i),a.return=e,e=a):(n(e,a),a=_a(i,e.mode,u),a.return=e,e=a),l(e);if(pu(i))return b(e,a,i,u);if(F(i))return m(e,a,i,u);if(s&&mn(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(r(152,e.displayName||e.name||"Component"))}return n(e,a)}}function vn(e){if(e===bu)throw Error(r(174));return e}function yn(e,t){switch(Mt(vu,t),Mt(gu,e),Mt(mu,bu),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:K(null,"");break;default:e=8===e?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=K(t,e)}Rt(mu),Mt(mu,t)}function wn(){Rt(mu),Rt(gu),Rt(vu)}function _n(e){vn(vu.current);var t=vn(mu.current),n=K(t,e.type);t!==n&&(Mt(gu,e),Mt(mu,n))}function kn(e){gu.current===e&&(Rt(mu),Rt(gu))}function xn(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===_i||n.data===ki))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function En(e,t){return{responder:e,props:t}}function Fn(){throw Error(r(321))}function Tn(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ul(e[n],t[n]))return!1;return!0}function Sn(e,t,n,a,o,i){if(ku=i,xu=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,wu.current=null===e||null===e.memoizedState?Cu:Pu,e=n(a,o),t.expirationTime===ku){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(r(301));i+=1,Fu=Eu=null,t.updateQueue=null,wu.current=Ou,e=n(a,o)}while(t.expirationTime===ku)}if(wu.current=Su,t=null!==Eu&&null!==Eu.next,ku=0,Fu=Eu=xu=null,Tu=!1,t)throw Error(r(300));return e}function Cn(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Fu?xu.memoizedState=Fu=e:Fu=Fu.next=e,Fu}function Pn(){if(null===Eu){var e=xu.alternate;e=null!==e?e.memoizedState:null}else e=Eu.next;var t=null===Fu?xu.memoizedState:Fu.next;if(null!==t)Fu=t,Eu=e;else{if(null===e)throw Error(r(310));Eu=e,e={memoizedState:Eu.memoizedState,baseState:Eu.baseState,baseQueue:Eu.baseQueue,queue:Eu.queue,next:null},null===Fu?xu.memoizedState=Fu=e:Fu=Fu.next=e}return Fu}function On(e,t){return"function"==typeof t?t(e):t}function An(e){var t=Pn(),n=t.queue;if(null===n)throw Error(r(311));n.lastRenderedReducer=e;var a=Eu,o=a.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}a.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,a=a.baseState;var u=l=i=null,c=o;do{var s=c.expirationTime;if(s<ku){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,i=a):u=u.next=f,s>xu.expirationTime&&(xu.expirationTime=s,Gr(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),Xr(s,c.suspenseConfig),a=c.eagerReducer===e?c.eagerState:e(a,c.action);c=c.next}while(null!==c&&c!==o);null===u?i=a:u.next=l,ul(a,t.memoizedState)||(Nu=!0),t.memoizedState=a,t.baseState=i,t.baseQueue=u,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function jn(e){var t=Pn(),n=t.queue;if(null===n)throw Error(r(311));n.lastRenderedReducer=e;var a=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ul(i,t.memoizedState)||(Nu=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,a]}function Rn(e){var t=Cn();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=t.queue={pending:null,dispatch:null,lastRenderedReducer:On,lastRenderedState:e},e=e.dispatch=Kn.bind(null,xu,e),[t.memoizedState,e]}function Mn(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=xu.updateQueue,null===t?(t={lastEffect:null},xu.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,null===n?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Nn(){return Pn().memoizedState}function Dn(e,t,n,r){var a=Cn();xu.effectTag|=e,a.memoizedState=Mn(1|t,n,void 0,void 0===r?null:r)}function In(e,t,n,r){var a=Pn();r=void 0===r?null:r;var o=void 0;if(null!==Eu){var i=Eu.memoizedState;if(o=i.destroy,null!==r&&Tn(r,i.deps))return void Mn(t,n,o,r)}xu.effectTag|=e,a.memoizedState=Mn(1|t,n,o,r)}function zn(e,t){return Dn(516,4,e,t)}function Ln(e,t){return In(516,4,e,t)}function Bn(e,t){return In(4,2,e,t)}function Un(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qn(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,In(4,2,Un.bind(null,t,e),n)}function Wn(){}function $n(e,t){return Cn().memoizedState=[e,void 0===t?null:t],e}function Hn(e,t){var n=Pn();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Tn(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Vn(e,t){var n=Pn();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Tn(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Qn(e,t,n){var r=qt();$t(98>r?98:r,function(){e(!0)}),$t(97<r?97:r,function(){var r=_u.suspense;_u.suspense=void 0===t?null:t;try{e(!1),n()}finally{_u.suspense=r}})}function Kn(e,t,n){var r=Ir(),a=cu.suspense;r=zr(r,e,a),a={expirationTime:r,suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?a.next=a:(a.next=o.next,o.next=a),t.pending=a,o=e.alternate,e===xu||null!==o&&o===xu)Tu=!0,a.expirationTime=ku,xu.expirationTime=ku;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.eagerReducer=o,a.eagerState=l,ul(l,i))return}catch(e){}Lr(e,r)}}function Yn(e,t){var n=ba(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Jn(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Xn(e){if(Ru){var t=ju;if(t){var n=t;if(!Jn(e,t)){if(!(t=Ve(n.nextSibling))||!Jn(e,t))return e.effectTag=-1025&e.effectTag|2,Ru=!1,void(Au=e);Yn(Au,n)}Au=e,ju=Ve(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ru=!1,Au=e}}function Gn(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Au=e}function Zn(e){if(e!==Au)return!1;if(!Ru)return Gn(e),Ru=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!He(t,e.memoizedProps))for(t=ju;t;)Yn(e,t),t=Ve(t.nextSibling);if(Gn(e),13===e.tag){if(e=e.memoizedState,!(e=null!==e?e.dehydrated:null))throw Error(r(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===wi){if(0===t){ju=Ve(e.nextSibling);break e}t--}else n!==yi&&n!==ki&&n!==_i||t++}e=e.nextSibling}ju=null}}else ju=Au?Ve(e.stateNode.nextSibling):null;return!0}function er(){ju=Au=null,Ru=!1}function tr(e,t,n,r){t.child=null===e?hu(t,null,n,r):du(t,e.child,n,r)}function nr(e,t,n,r,a){n=n.render;var o=t.ref;return en(t,a),r=Sn(e,t,n,r,o,a),null===e||Nu?(t.effectTag|=1,tr(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),hr(e,t,a))}function rr(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||ma(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?(e=ya(n.type,null,r,null,t.mode,o),e.ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ar(e,t,i,r,a,o))}return i=e.child,a<o&&(a=i.memoizedProps,n=n.compare,(n=null!==n?n:Ot)(a,r)&&e.ref===t.ref)?hr(e,t,o):(t.effectTag|=1,e=va(i,r),e.ref=t.ref,e.return=t,t.child=e)}function ar(e,t,n,r,a,o){return null!==e&&Ot(e.memoizedProps,r)&&e.ref===t.ref&&(Nu=!1,a<o)?(t.expirationTime=e.expirationTime,hr(e,t,o)):ir(e,t,n,r,o)}function or(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ir(e,t,n,r,a){var o=Dt(n)?zl:Dl.current;return o=Nt(t,o),en(t,a),n=Sn(e,t,n,r,o,a),null===e||Nu?(t.effectTag|=1,tr(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),hr(e,t,a))}function lr(e,t,n,r,a){if(Dt(n)){var o=!0;Bt(t)}else o=!1;if(en(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),pn(t,n,r),hn(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=tn(c):(c=Dt(n)?zl:Dl.current,c=Nt(t,c));var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&dn(t,i,r,c),uu=!1;var p=t.memoizedState;i.state=p,un(t,r,i,a),u=t.memoizedState,l!==r||p!==u||Il.current||uu?("function"==typeof s&&(sn(t,n,s,r),u=t.memoizedState),(l=uu||fn(t,n,l,r,p,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,rn(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Jt(t.type,l),u=i.context,c=n.contextType,"object"==typeof c&&null!==c?c=tn(c):(c=Dt(n)?zl:Dl.current,c=Nt(t,c)),s=n.getDerivedStateFromProps,(f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&dn(t,i,r,c),uu=!1,u=t.memoizedState,i.state=u,un(t,r,i,a),p=t.memoizedState,l!==r||u!==p||Il.current||uu?("function"==typeof s&&(sn(t,n,s,r),p=t.memoizedState),(s=uu||fn(t,n,l,r,u,p,c))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=c,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return ur(e,t,n,r,o,a)}function ur(e,t,n,r,a,o){or(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return a&&Ut(t,n,!1),hr(e,t,o);r=t.stateNode,Mu.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=du(t,e.child,null,o),t.child=du(t,null,l,o)):tr(e,t,l,o),t.memoizedState=r.state,a&&Ut(t,n,!0),t.child}function cr(e){var t=e.stateNode;t.pendingContext?zt(e,t.pendingContext,t.pendingContext!==t.context):t.context&&zt(e,t.context,!1),yn(e,t.containerInfo)}function sr(e,t,n){var r,a=t.mode,o=t.pendingProps,i=yu.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),Mt(yu,1&i),null===e){if(void 0!==o.fallback&&Xn(t),l){if(l=o.fallback,o=wa(null,a,0,null),o.return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return n=wa(l,a,n,null),n.return=t,o.sibling=n,t.memoizedState=Du,t.child=o,n}return a=o.children,t.memoizedState=null,t.child=hu(t,null,a,n)}if(null!==e.memoizedState){if(e=e.child,a=e.sibling,l){if(o=o.fallback,n=va(e,e.pendingProps),n.return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return a=va(a,o),a.return=t,n.sibling=a,n.childExpirationTime=0,t.memoizedState=Du,t.child=n,a}return n=du(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=o.fallback,o=wa(null,a,0,null),o.return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return n=wa(l,a,n,null),n.return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Du,t.child=o,n}return t.memoizedState=null,t.child=du(t,e,o.children,n)}function fr(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),Zt(e.return,t)}function pr(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=a,i.lastEffect=o)}function dr(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(tr(e,t,r.children,n),0!=(2&(r=yu.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&fr(e,n);else if(19===e.tag)fr(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Mt(yu,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)e=n.alternate,null!==e&&null===xn(e)&&(a=n),n=n.sibling;n=a,null===n?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),pr(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===xn(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}pr(t,!0,n,null,o,t.lastEffect);break;case"together":pr(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function hr(e,t,n){null!==e&&(t.dependencies=e.dependencies);var a=t.expirationTime;if(0!==a&&Gr(a),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(r(153));if(null!==t.child){for(e=t.child,n=va(e,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,n=n.sibling=va(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function br(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function mr(e,t,n){var a=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Dt(t.type)&&It(),null;case 3:return wn(),Rt(Il),Rt(Dl),n=t.stateNode,n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Zn(t)||(t.effectTag|=4),Ol(t),null;case 5:kn(t),n=vn(vu.current);var o=t.type;if(null!==e&&null!=t.stateNode)Al(e,t,o,a,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!a){if(null===t.stateNode)throw Error(r(166));return null}if(e=vn(mu.current),Zn(t)){a=t.stateNode,o=t.type;var i=t.memoizedProps;switch(a[Ci]=t,a[Pi]=i,o){case"iframe":case"object":case"embed":Te("load",a);break;case"video":case"audio":for(e=0;e<Vo.length;e++)Te(Vo[e],a);break;case"source":Te("error",a);break;case"img":case"image":case"link":Te("error",a),Te("load",a);break;case"form":Te("reset",a),Te("submit",a);break;case"details":Te("toggle",a);break;case"input":N(a,i),Te("invalid",a),De(n,"onChange");break;case"select":a._wrapperState={wasMultiple:!!i.multiple},Te("invalid",a),De(n,"onChange");break;case"textarea":$(a,i),Te("invalid",a),De(n,"onChange")}Me(o,i),e=null;for(var l in i)if(i.hasOwnProperty(l)){var u=i[l];"children"===l?"string"==typeof u?a.textContent!==u&&(e=["children",u]):"number"==typeof u&&a.textContent!==""+u&&(e=["children",""+u]):Za.hasOwnProperty(l)&&null!=u&&De(n,l)}switch(o){case"input":j(a),z(a,i,!0);break;case"textarea":j(a),V(a);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(a.onclick=Ie)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===vi&&(e=Q(o)),e===vi?"script"===o?(e=l.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof a.is?e=l.createElement(o,{is:a.is}):(e=l.createElement(o),"select"===o&&(l=e,a.multiple?l.multiple=!0:a.size&&(l.size=a.size))):e=l.createElementNS(e,o),e[Ci]=t,e[Pi]=a,Pl(e,t,!1,!1),t.stateNode=e,l=Ne(o,a),o){case"iframe":case"object":case"embed":Te("load",e),u=a;break;case"video":case"audio":for(u=0;u<Vo.length;u++)Te(Vo[u],e);u=a;break;case"source":Te("error",e),u=a;break;case"img":case"image":case"link":Te("error",e),Te("load",e),u=a;break;case"form":Te("reset",e),Te("submit",e),u=a;break;case"details":Te("toggle",e),u=a;break;case"input":N(e,a),u=M(e,a),Te("invalid",e),De(n,"onChange");break;case"option":u=U(e,a);break;case"select":e._wrapperState={wasMultiple:!!a.multiple},u=La({},a,{value:void 0}),Te("invalid",e),De(n,"onChange");break;case"textarea":$(e,a),u=W(e,a),Te("invalid",e),De(n,"onChange");break;default:u=a}Me(o,u);var c=u;for(i in c)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?Re(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&No(e,s):"children"===i?"string"==typeof s?("textarea"!==o||""!==s)&&Y(e,s):"number"==typeof s&&Y(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(Za.hasOwnProperty(i)?null!=s&&De(n,i):null!=s&&E(e,i,s,l))}switch(o){case"input":j(e),z(e,a,!1);break;case"textarea":j(e),V(e);break;case"option":null!=a.value&&e.setAttribute("value",""+P(a.value));break;case"select":e.multiple=!!a.multiple,n=a.value,null!=n?q(e,!!a.multiple,n,!1):null!=a.defaultValue&&q(e,!!a.multiple,a.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=Ie)}$e(o,a)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)jl(e,t,e.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(r(166));n=vn(vu.current),vn(mu.current),Zn(t)?(n=t.stateNode,a=t.memoizedProps,n[Ci]=t,n.nodeValue!==a&&(t.effectTag|=4)):(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(a),n[Ci]=t,t.stateNode=n)}return null;case 13:return Rt(yu),(a=t.memoizedState,0!=(64&t.effectTag))?(t.expirationTime=n,t):(n=null!==a,a=!1,null===e?void 0!==t.memoizedProps.fallback&&Zn(t):(o=e.memoizedState,a=null!==o,n||null===o||null!==(o=e.child.sibling)&&(i=t.firstEffect,null!==i?(t.firstEffect=o,o.nextEffect=i):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!a&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&yu.current)?rc===Qu&&(rc=Ju):(rc!==Qu&&rc!==Ju||(rc=Xu),0!==uc&&null!==ec&&(Fa(ec,nc),Ta(ec,uc)))),(n||a)&&(t.effectTag|=4),null);case 4:return wn(),Ol(t),null;case 10:return Gt(t),null;case 17:return Dt(t.type)&&It(),null;case 19:if(Rt(yu),null===(a=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(i=a.rendering)){if(o)br(a,!1);else if(rc!==Qu||null!==e&&0!=(64&e.effectTag))for(i=t.child;null!==i;){if(null!==(e=xn(i))){for(t.effectTag|=64,br(a,!1),o=e.updateQueue,null!==o&&(t.updateQueue=o,t.effectTag|=4),null===a.lastEffect&&(t.firstEffect=null),t.lastEffect=a.lastEffect,a=t.child;null!==a;)o=a,i=n,o.effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,e=o.alternate,null===e?(o.childExpirationTime=0,o.expirationTime=i,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,i=e.dependencies,o.dependencies=null===i?null:{expirationTime:i.expirationTime,firstContext:i.firstContext,responders:i.responders}),a=a.sibling;return Mt(yu,1&yu.current|2),t.child}i=i.sibling}}else{if(!o)if(null!==(e=xn(i))){if(t.effectTag|=64,o=!0,n=e.updateQueue,null!==n&&(t.updateQueue=n,t.effectTag|=4),br(a,!0),null===a.tail&&"hidden"===a.tailMode&&!i.alternate)return t=t.lastEffect=a.lastEffect,null!==t&&(t.nextEffect=null),null}else 2*ru()-a.renderingStartTime>a.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,br(a,!1),t.expirationTime=t.childExpirationTime=n-1);a.isBackwards?(i.sibling=t.child,t.child=i):(n=a.last,null!==n?n.sibling=i:t.child=i,a.last=i)}return null!==a.tail?(0===a.tailExpiration&&(a.tailExpiration=ru()+500),n=a.tail,a.rendering=n,a.tail=n.sibling,a.lastEffect=t.lastEffect,a.renderingStartTime=ru(),n.sibling=null,t=yu.current,Mt(yu,o?1&t|2:1&t),n):null}throw Error(r(156,t.tag))}function gr(e){switch(e.tag){case 1:Dt(e.type)&&It();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(wn(),Rt(Il),Rt(Dl),0!=(64&(t=e.effectTag)))throw Error(r(285));return e.effectTag=-4097&t|64,e;case 5:return kn(e),null;case 13:return Rt(yu),t=e.effectTag,4096&t?(e.effectTag=-4097&t|64,e):null;case 19:return Rt(yu),null;case 4:return wn(),null;case 10:return Gt(e),null;default:return null}}function vr(e,t){return{value:e,source:t,stack:C(t)}}function yr(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=C(n)),null!==n&&S(n.type),t=t.value,null!==e&&1===e.tag&&S(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function wr(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){sa(e,t)}}function _r(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){sa(e,t)}else t.current=null}function kr(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,a=e.memoizedState;e=t.stateNode,t=e.getSnapshotBeforeUpdate(t.elementType===t.type?n:Jt(t.type,n),a),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(r(163))}function xr(e,t){if(t=t.updateQueue,null!==(t=null!==t?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function Er(e,t){if(t=t.updateQueue,null!==(t=null!==t?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Fr(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void Er(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:Jt(n.type,t.memoizedProps);e.componentDidUpdate(a,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&cn(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}cn(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&$e(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&null!==(n=n.alternate)&&null!==(n=n.memoizedState)&&null!==(n=n.dehydrated)&&Ee(n));case 19:case 17:case 20:case 21:return}throw Error(r(163))}function Tr(e,t,n){switch("function"==typeof Ec&&Ec(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;$t(97<n?97:n,function(){var e=r;do{var n=e.destroy;if(void 0!==n){var a=t;try{n()}catch(e){sa(a,e)}}e=e.next}while(e!==r)})}break;case 1:_r(t),n=t.stateNode,"function"==typeof n.componentWillUnmount&&wr(t,n);break;case 5:_r(t);break;case 4:jr(e,t,n)}}function Sr(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&Sr(t)}function Cr(e){return 5===e.tag||3===e.tag||4===e.tag}function Pr(e){e:{for(var t=e.return;null!==t;){if(Cr(t)){var n=t;break e}t=t.return}throw Error(r(160))}switch(t=n.stateNode,n.tag){case 5:var a=!1;break;case 3:case 4:t=t.containerInfo,a=!0;break;default:throw Error(r(161))}16&n.effectTag&&(Y(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Cr(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}a?Or(e,n,t):Ar(e,n,t)}function Or(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),null!==(n=n._reactRootContainer)&&void 0!==n||null!==t.onclick||(t.onclick=Ie));else if(4!==r&&null!==(e=e.child))for(Or(e,t,n),e=e.sibling;null!==e;)Or(e,t,n),e=e.sibling}function Ar(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Ar(e,t,n),e=e.sibling;null!==e;)Ar(e,t,n),e=e.sibling}function jr(e,t,n){for(var a,o,i=t,l=!1;;){if(!l){l=i.return;e:for(;;){if(null===l)throw Error(r(160));switch(a=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:a=a.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===i.tag||6===i.tag){e:for(var u=e,c=i,s=n,f=c;;)if(Tr(u,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=a,c=i.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):a.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){a=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(Tr(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return,4===i.tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function Rr(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void xr(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var a=t.memoizedProps,o=null!==e?e.memoizedProps:a;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Pi]=a,"input"===e&&"radio"===a.type&&null!=a.name&&D(n,a),Ne(e,o),t=Ne(e,a),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?Re(n,u):"dangerouslySetInnerHTML"===l?No(n,u):"children"===l?Y(n,u):E(n,l,u,t)}switch(e){case"input":I(n,a);break;case"textarea":H(n,a);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!a.multiple,e=a.value,null!=e?q(n,!!a.multiple,e,!1):t!==!!a.multiple&&(null!=a.defaultValue?q(n,!!a.multiple,a.defaultValue,!0):q(n,!!a.multiple,a.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(r(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return t=t.stateNode,void(t.hydrate&&(t.hydrate=!1,Ee(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?a=!1:(a=!0,n=t.child,sc=ru()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,a?(i=i.style,"function"==typeof i.setProperty?i.setProperty("display","none","important"):i.display="none"):(i=e.stateNode,o=e.memoizedProps.style,o=void 0!==o&&null!==o&&o.hasOwnProperty("display")?o.display:null,i.style.display=je("display",o));else if(6===e.tag)e.stateNode.nodeValue=a?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){i=e.child.sibling,i.return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void Mr(t);case 19:return void Mr(t);case 17:return}throw Error(r(163))}function Mr(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new zu),t.forEach(function(t){var r=pa.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}function Nr(e,t,n){n=an(n,null),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){dc||(dc=!0,hc=r),yr(e,t)},n}function Dr(e,t,n){n=an(n,null),n.tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return yr(e,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===bc?bc=new Set([this]):bc.add(this),yr(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}function Ir(){return(Zu&(Hu|Vu))!==Wu?1073741821-(ru()/10|0):0!==kc?kc:kc=1073741821-(ru()/10|0)}function zr(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var a=qt();if(0==(4&t))return 99===a?1073741823:1073741822;if((Zu&Hu)!==Wu)return nc;if(null!==n)e=Yt(e,0|n.timeoutMs||5e3,250);else switch(a){case 99:e=1073741823;break;case 98:e=Yt(e,150,100);break;case 97:case 96:e=Yt(e,5e3,250);break;case 95:e=2;break;default:throw Error(r(326))}return null!==ec&&e===nc&&--e,e}function Lr(e,t){if(50<wc)throw wc=0,_c=null,Error(r(185));if(null!==(e=Br(e,t))){var n=qt();1073741823===t?(Zu&$u)!==Wu&&(Zu&(Hu|Vu))===Wu?$r(e):(qr(e),Zu===Wu&&Qt()):qr(e),(4&Zu)===Wu||98!==n&&99!==n||(null===yc?yc=new Map([[e,t]]):(void 0===(n=yc.get(e))||n>t)&&yc.set(e,t))}}function Br(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(ec===a&&(Gr(t),rc===Xu&&Fa(a,nc)),Ta(a,t)),a}function Ur(e){var t=e.lastExpiredTime;if(0!==t)return t;if(t=e.firstPendingTime,!Ea(e,t))return t;var n=e.lastPingedTime;return e=e.nextKnownPendingLevel,e=n>e?n:e,2>=e&&t!==e?0:e}function qr(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vt($r.bind(null,e));else{var t=Ur(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Ir();if(1073741823===t?r=99:1===t||2===t?r=95:(r=10*(1073741821-t)-10*(1073741821-r),r=0>=r?99:250>=r?98:5250>=r?97:95),null!==n){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;n!==Jl&&Ul(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Vt($r.bind(null,e)):Ht(r,Wr.bind(null,e),{timeout:10*(1073741821-t)-ru()}),e.callbackNode=t}}}function Wr(e,t){if(kc=0,t)return t=Ir(),Sa(e,t),qr(e),null;var n=Ur(e);if(0!==n){if(t=e.callbackNode,(Zu&(Hu|Vu))!==Wu)throw Error(r(327));if(la(),e===ec&&n===nc||Kr(e,n),null!==tc){var a=Zu;Zu|=Hu;for(var o=Jr();;)try{ea();break}catch(t){Yr(e,t)}if(Xt(),Zu=a,Uu.current=o,rc===Ku)throw t=ac,Kr(e,n),Fa(e,n),qr(e),t;if(null===tc)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,a=rc,ec=null,a){case Qu:case Ku:throw Error(r(345));case Yu:Sa(e,2<n?2:n);break;case Ju:if(Fa(e,n),a=e.lastSuspendedTime,n===a&&(e.nextKnownPendingLevel=ra(o)),1073741823===oc&&10<(o=sc+fc-ru())){if(cc){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,Kr(e,n);break}}if(0!==(i=Ur(e))&&i!==n)break;if(0!==a&&a!==n){e.lastPingedTime=a;break}e.timeoutHandle=Fi(aa.bind(null,e),o);break}aa(e);break;case Xu:if(Fa(e,n),a=e.lastSuspendedTime,n===a&&(e.nextKnownPendingLevel=ra(o)),cc&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,Kr(e,n);break}if(0!==(o=Ur(e))&&o!==n)break;if(0!==a&&a!==n){e.lastPingedTime=a;break}if(1073741823!==ic?a=10*(1073741821-ic)-ru():1073741823===oc?a=0:(a=10*(1073741821-oc)-5e3,o=ru(),n=10*(1073741821-n)-o,a=o-a,0>a&&(a=0),a=(120>a?120:480>a?480:1080>a?1080:1920>a?1920:3e3>a?3e3:4320>a?4320:1960*Bu(a/1960))-a,n<a&&(a=n)),10<a){e.timeoutHandle=Fi(aa.bind(null,e),a);break}aa(e);break;case Gu:if(1073741823!==oc&&null!==lc){i=oc;var l=lc;if(a=0|l.busyMinDurationMs,0>=a?a=0:(o=0|l.busyDelayMs,i=ru()-(10*(1073741821-i)-(0|l.timeoutMs||5e3)),a=i<=o?0:o+a-i),10<a){Fa(e,n),e.timeoutHandle=Fi(aa.bind(null,e),a);break}}aa(e);break;default:throw Error(r(329))}if(qr(e),e.callbackNode===t)return Wr.bind(null,e)}}return null}function $r(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,(Zu&(Hu|Vu))!==Wu)throw Error(r(327));if(la(),e===ec&&t===nc||Kr(e,t),null!==tc){var n=Zu;Zu|=Hu;for(var a=Jr();;)try{Zr();break}catch(t){Yr(e,t)}if(Xt(),Zu=n,Uu.current=a,rc===Ku)throw n=ac,Kr(e,t),Fa(e,t),qr(e),n;if(null!==tc)throw Error(r(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ec=null,aa(e),qr(e)}return null}function Hr(){if(null!==yc){var e=yc;yc=null,e.forEach(function(e,t){Sa(t,e),qr(t)}),Qt()}}function Vr(e,t){var n=Zu;Zu|=1;try{return e(t)}finally{(Zu=n)===Wu&&Qt()}}function Qr(e,t){var n=Zu;Zu&=-2,Zu|=$u;try{return e(t)}finally{(Zu=n)===Wu&&Qt()}}function Kr(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ti(n)),null!==tc)for(n=tc.return;null!==n;){var r=n;switch(r.tag){case 1:r=r.type.childContextTypes,null!==r&&void 0!==r&&It();break;case 3:wn(),Rt(Il),Rt(Dl);break;case 5:kn(r);break;case 4:wn();break;case 13:case 19:Rt(yu);break;case 10:Gt(r)}n=n.return}ec=e,tc=va(e.current,null),nc=t,rc=Qu,ac=null,ic=oc=1073741823,lc=null,uc=0,cc=!1}function Yr(e,t){for(;;){try{if(Xt(),wu.current=Su,Tu)for(var n=xu.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(ku=0,Fu=Eu=xu=null,Tu=!1,null===tc||null===tc.return)return rc=Ku,ac=t,tc=null;e:{var a=e,o=tc.return,i=tc,l=t;if(t=nc,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&i.mode)){var c=i.alternate;c?(i.updateQueue=c.updateQueue,i.memoizedState=c.memoizedState,i.expirationTime=c.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&yu.current),f=o;do{var p;if(p=13===f.tag){var d=f.memoizedState;if(null!==d)p=null!==d.dehydrated;else{var h=f.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(p){var b=f.updateQueue;if(null===b){var m=new Set;m.add(u),f.updateQueue=m}else b.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var g=an(1073741823,null);g.tag=2,on(i,g)}i.expirationTime=1073741823;break e}l=void 0,i=t;var v=a.pingCache;if(null===v?(v=a.pingCache=new Lu,l=new Set,v.set(u,l)):void 0===(l=v.get(u))&&(l=new Set,v.set(u,l)),!l.has(i)){l.add(i);var y=fa.bind(null,a,u,i);u.then(y,y)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((S(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+C(i))}rc!==Gu&&(rc=Yu),l=vr(l,i),f=o;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t;ln(f,Nr(f,u,t));break e;case 1:u=l;var w=f.type,_=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===bc||!bc.has(_)))){f.effectTag|=4096,f.expirationTime=t;ln(f,Dr(f,u,t));break e}}f=f.return}while(null!==f)}tc=na(tc)}catch(e){t=e;continue}break}}function Jr(){var e=Uu.current;return Uu.current=Su,null===e?Su:e}function Xr(e,t){e<oc&&2<e&&(oc=e),null!==t&&e<ic&&2<e&&(ic=e,lc=t)}function Gr(e){e>uc&&(uc=e)}function Zr(){for(;null!==tc;)tc=ta(tc)}function ea(){for(;null!==tc&&!Xl();)tc=ta(tc)}function ta(e){var t=Iu(e.alternate,e,nc);return e.memoizedProps=e.pendingProps,null===t&&(t=na(e)),qu.current=null,t}function na(e){tc=e;do{var t=tc.alternate;if(e=tc.return,0==(2048&tc.effectTag)){if(t=mr(t,tc,nc),1===nc||1!==tc.childExpirationTime){for(var n=0,r=tc.child;null!==r;){var a=r.expirationTime,o=r.childExpirationTime;a>n&&(n=a),o>n&&(n=o),r=r.sibling}tc.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=tc.firstEffect),null!==tc.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=tc.firstEffect),e.lastEffect=tc.lastEffect),1<tc.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=tc:e.firstEffect=tc,e.lastEffect=tc))}else{if(null!==(t=gr(tc)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=tc.sibling))return t;tc=e}while(null!==tc);return rc===Qu&&(rc=Gu),null}function ra(e){var t=e.expirationTime;return e=e.childExpirationTime,t>e?t:e}function aa(e){var t=qt();return $t(99,oa.bind(null,e,t)),null}function oa(e,t){do{la()}while(null!==gc);if((Zu&(Hu|Vu))!==Wu)throw Error(r(327));var n=e.finishedWork,a=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(r(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=ra(n);if(e.firstPendingTime=o,a<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:a<=e.firstSuspendedTime&&(e.firstSuspendedTime=a-1),a<=e.lastPingedTime&&(e.lastPingedTime=0),a<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ec&&(tc=ec=null,nc=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Zu;Zu|=Vu,qu.current=null,xi=hi;var l=qe();if(We(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{u=(u=l.ownerDocument)&&u.defaultView||window;var c=u.getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var p=0,d=-1,h=-1,b=0,m=0,g=l,v=null;t:for(;;){for(var y;g!==u||0!==s&&3!==g.nodeType||(d=p+s),g!==f||0!==c&&3!==g.nodeType||(h=p+c),3===g.nodeType&&(p+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===l)break t;if(v===u&&++b===s&&(d=p),v===f&&++m===c&&(h=p),null!==(y=g.nextSibling))break;g=v,v=g.parentNode}g=y}u=-1===d||-1===h?null:{start:d,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;Ei={activeElementDetached:null,focusedElem:l,selectionRange:u},hi=!1,pc=o;do{try{ia()}catch(e){if(null===pc)throw Error(r(330));sa(pc,e),pc=pc.nextEffect}}while(null!==pc);pc=o;do{try{for(l=e,u=t;null!==pc;){var w=pc.effectTag;if(16&w&&Y(pc.stateNode,""),128&w){var _=pc.alternate;if(null!==_){var k=_.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&w){case 2:Pr(pc),pc.effectTag&=-3;break;case 6:Pr(pc),pc.effectTag&=-3,Rr(pc.alternate,pc);break;case 1024:pc.effectTag&=-1025;break;case 1028:pc.effectTag&=-1025,Rr(pc.alternate,pc);break;case 4:Rr(pc.alternate,pc);break;case 8:s=pc,jr(l,s,u),Sr(s)}pc=pc.nextEffect}}catch(e){if(null===pc)throw Error(r(330));sa(pc,e),pc=pc.nextEffect}}while(null!==pc);if(k=Ei,_=qe(),w=k.focusedElem,u=k.selectionRange,_!==w&&w&&w.ownerDocument&&Ue(w.ownerDocument.documentElement,w)){null!==u&&We(w)&&(_=u.start,k=u.end,void 0===k&&(k=_),"selectionStart"in w?(w.selectionStart=_,w.selectionEnd=Math.min(k,w.value.length)):(k=(_=w.ownerDocument||document)&&_.defaultView||window,k.getSelection&&(k=k.getSelection(),s=w.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!k.extend&&l>u&&(s=u,u=l,l=s),s=Be(w,l),f=Be(w,u),s&&f&&(1!==k.rangeCount||k.anchorNode!==s.node||k.anchorOffset!==s.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&(_=_.createRange(),_.setStart(s.node,s.offset),k.removeAllRanges(),l>u?(k.addRange(_),k.extend(f.node,f.offset)):(_.setEnd(f.node,f.offset),k.addRange(_)))))),_=[];for(k=w;k=k.parentNode;)1===k.nodeType&&_.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<_.length;w++)k=_[w],k.element.scrollLeft=k.left,k.element.scrollTop=k.top}hi=!!xi,Ei=xi=null,e.current=n,pc=o;do{try{for(w=e;null!==pc;){var x=pc.effectTag;if(36&x&&Fr(w,pc.alternate,pc),128&x){_=void 0;var E=pc.ref;if(null!==E){var F=pc.stateNode;switch(pc.tag){case 5:_=F;break;default:_=F}"function"==typeof E?E(_):E.current=_}}pc=pc.nextEffect}}catch(e){if(null===pc)throw Error(r(330));sa(pc,e),pc=pc.nextEffect}}while(null!==pc);pc=null,Gl(),Zu=i}else e.current=n;if(mc)mc=!1,gc=e,vc=t;else for(pc=o;null!==pc;)t=pc.nextEffect,pc.nextEffect=null,pc=t;if(t=e.firstPendingTime,0===t&&(bc=null),1073741823===t?e===_c?wc++:(wc=0,_c=e):wc=0,"function"==typeof xc&&xc(n.stateNode,a),qr(e),dc)throw dc=!1,e=hc,hc=null,e;return(Zu&$u)!==Wu?null:(Qt(),null)}function ia(){for(;null!==pc;){var e=pc.effectTag;0!=(256&e)&&kr(pc.alternate,pc),0==(512&e)||mc||(mc=!0,Ht(97,function(){return la(),null})),pc=pc.nextEffect}}function la(){if(90!==vc){var e=97<vc?97:vc;return vc=90,$t(e,ua)}}function ua(){if(null===gc)return!1;var e=gc;if(gc=null,(Zu&(Hu|Vu))!==Wu)throw Error(r(331));var t=Zu;for(Zu|=Vu,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:xr(5,n),Er(5,n)}}catch(t){if(null===e)throw Error(r(330));sa(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Zu=t,Qt(),!0}function ca(e,t,n){t=vr(n,t),t=Nr(e,t,1073741823),on(e,t),null!==(e=Br(e,1073741823))&&qr(e)}function sa(e,t){if(3===e.tag)ca(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){ca(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===bc||!bc.has(r))){e=vr(t,e),e=Dr(n,e,1073741823),on(n,e),n=Br(n,1073741823),null!==n&&qr(n);break}}n=n.return}}function fa(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ec===e&&nc===n?rc===Xu||rc===Ju&&1073741823===oc&&ru()-sc<fc?Kr(e,nc):cc=!0:Ea(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,qr(e)))}function pa(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=0,0===t&&(t=Ir(),t=zr(t,e,null)),null!==(e=Br(e,t))&&qr(e)}function da(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xc=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Ec=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}return!0}function ha(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function ba(e,t,n,r){return new ha(e,t,n,r)}function ma(e){return!(!(e=e.prototype)||!e.isReactComponent)}function ga(e){if("function"==typeof e)return ma(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===So)return 11;if(e===Oo)return 14}return 2}function va(e,t){var n=e.alternate;return null===n?(n=ba(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ya(e,t,n,a,o,i){var l=2;if(a=e,"function"==typeof e)ma(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case _o:return wa(n.children,o,i,t);case To:l=8,o|=7;break;case ko:l=8,o|=1;break;case xo:return e=ba(12,n,t,8|o),e.elementType=xo,e.type=xo,e.expirationTime=i,e;case Co:return e=ba(13,n,t,o),e.type=Co,e.elementType=Co,e.expirationTime=i,e;case Po:return e=ba(19,n,t,o),e.elementType=Po,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Eo:l=10;break e;case Fo:l=9;break e;case So:l=11;break e;case Oo:l=14;break e;case Ao:l=16,a=null;break e;case jo:l=22;break e}throw Error(r(130,null==e?e:typeof e,""))}return t=ba(l,n,t,o),t.elementType=e,t.type=a,t.expirationTime=i,t}function wa(e,t,n,r){return e=ba(7,e,r,t),e.expirationTime=n,e}function _a(e,t,n){return e=ba(6,e,null,t),e.expirationTime=n,e}function ka(e,t,n){return t=ba(4,null!==e.children?e.children:[],e.key,t),t.expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function xa(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Ea(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Fa(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ta(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Sa(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Ca(e,t,n,a){var o=t.current,i=Ir(),l=cu.suspense;i=zr(i,o,l);e:if(n){n=n._reactInternalFiber;t:{if(Z(n)!==n||1!==n.tag)throw Error(r(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Dt(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(r(171))}if(1===n.tag){var c=n.type;if(Dt(c)){n=Lt(n,c,u);break e}}n=u}else n=Nl;return null===t.context?t.context=n:t.pendingContext=n,t=an(i,l),t.payload={element:e},a=void 0===a?null:a,null!==a&&(t.callback=a),on(o,t),Lr(o,i),i}function Pa(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Oa(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Aa(e,t){Oa(e,t),(e=e.alternate)&&Oa(e,t)}function ja(e,t,n){n=null!=n&&!0===n.hydrate;var r=new xa(e,t,n),a=ba(3,null,null,2===t?7:1===t?3:0);r.current=a,a.stateNode=r,nn(a),e[Oi]=r.current,n&&0!==t&&he(e,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Ra(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ma(e,t){if(t||(t=e?9===e.nodeType?e.documentElement:e.firstChild:null,t=!(!t||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ja(e,0,t?{hydrate:!0}:void 0)}function Na(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Pa(i);l.call(e)}}Ca(t,i,e,a)}else{if(o=n._reactRootContainer=Ma(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Pa(i);u.call(e)}}Qr(function(){Ca(t,i,e,a)})}return Pa(i)}function Da(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wo,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ia(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ra(t))throw Error(r(200));return Da(e,t,null,n)}/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var za=n(0),La=n(7),Ba=n(29);if(!za)throw Error(r(227));var Ua=!1,qa=null,Wa=!1,$a=null,Ha={onError:function(e){Ua=!0,qa=e}},Va=null,Qa=null,Ka=null,Ya=null,Ja={},Xa=[],Ga={},Za={},eo={},to=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),no=null,ro=null,ao=null,oo=h,io=!1,lo=!1,uo=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,co=Object.prototype.hasOwnProperty,so={},fo={},po={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){po[e]=new k(e,0,!1,e,null,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];po[t]=new k(t,1,!1,e[1],null,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){po[e]=new k(e,2,!1,e.toLowerCase(),null,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){po[e]=new k(e,2,!1,e,null,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){po[e]=new k(e,3,!1,e.toLowerCase(),null,!1)}),["checked","multiple","muted","selected"].forEach(function(e){po[e]=new k(e,3,!0,e,null,!1)}),["capture","download"].forEach(function(e){po[e]=new k(e,4,!1,e,null,!1)}),["cols","rows","size","span"].forEach(function(e){po[e]=new k(e,6,!1,e,null,!1)}),["rowSpan","start"].forEach(function(e){po[e]=new k(e,5,!1,e.toLowerCase(),null,!1)});var ho=/[\-:]([a-z])/g;"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(ho,x);po[t]=new k(t,1,!1,e,null,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(ho,x);po[t]=new k(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(ho,x);po[t]=new k(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)}),["tabIndex","crossOrigin"].forEach(function(e){po[e]=new k(e,1,!1,e.toLowerCase(),null,!1)}),po.xlinkHref=new k("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach(function(e){po[e]=new k(e,1,!1,e.toLowerCase(),null,!0)});var bo=za.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;bo.hasOwnProperty("ReactCurrentDispatcher")||(bo.ReactCurrentDispatcher={current:null}),bo.hasOwnProperty("ReactCurrentBatchConfig")||(bo.ReactCurrentBatchConfig={suspense:null});var mo,go=/^(.*)[\\\/]/,vo="function"==typeof Symbol&&Symbol.for,yo=vo?Symbol.for("react.element"):60103,wo=vo?Symbol.for("react.portal"):60106,_o=vo?Symbol.for("react.fragment"):60107,ko=vo?Symbol.for("react.strict_mode"):60108,xo=vo?Symbol.for("react.profiler"):60114,Eo=vo?Symbol.for("react.provider"):60109,Fo=vo?Symbol.for("react.context"):60110,To=vo?Symbol.for("react.concurrent_mode"):60111,So=vo?Symbol.for("react.forward_ref"):60112,Co=vo?Symbol.for("react.suspense"):60113,Po=vo?Symbol.for("react.suspense_list"):60120,Oo=vo?Symbol.for("react.memo"):60115,Ao=vo?Symbol.for("react.lazy"):60116,jo=vo?Symbol.for("react.block"):60121,Ro="function"==typeof Symbol&&Symbol.iterator,Mo={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"},No=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Mo.svg||"innerHTML"in e)e.innerHTML=t;else{for(mo=mo||document.createElement("div"),mo.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=mo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}),Do={animationend:J("Animation","AnimationEnd"),animationiteration:J("Animation","AnimationIteration"),animationstart:J("Animation","AnimationStart"),transitionend:J("Transition","TransitionEnd")},Io={},zo={};to&&(zo=document.createElement("div").style,"AnimationEvent"in window||(delete Do.animationend.animation,delete Do.animationiteration.animation,delete Do.animationstart.animation),"TransitionEvent"in window||delete Do.transitionend.transition);var Lo,Bo,Uo,qo=X("animationend"),Wo=X("animationiteration"),$o=X("animationstart"),Ho=X("transitionend"),Vo="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qo=new("function"==typeof WeakMap?WeakMap:Map),Ko=null,Yo=[],Jo=!1,Xo=[],Go=null,Zo=null,ei=null,ti=new Map,ni=new Map,ri=[],ai="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),oi="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" "),ii={},li=new Map,ui=new Map,ci=["abort","abort",qo,"animationEnd",Wo,"animationIteration",$o,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ho,"transitionEnd","waiting","waiting"];Fe("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Fe("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Fe(ci,2);for(var si="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),fi=0;fi<si.length;fi++)ui.set(si[fi],0);var pi=Ba.unstable_UserBlockingPriority,di=Ba.unstable_runWithPriority,hi=!0,bi={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},mi=["Webkit","ms","Moz","O"];Object.keys(bi).forEach(function(e){mi.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),bi[t]=bi[e]})});var gi=La({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),vi=Mo.html,yi="$",wi="/$",_i="$?",ki="$!",xi=null,Ei=null,Fi="function"==typeof setTimeout?setTimeout:void 0,Ti="function"==typeof clearTimeout?clearTimeout:void 0,Si=Math.random().toString(36).slice(2),Ci="__reactInternalInstance$"+Si,Pi="__reactEventHandlers$"+Si,Oi="__reactContainere$"+Si,Ai=null,ji=null,Ri=null;La(ut.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=it)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=it)},persist:function(){this.isPersistent=it},isPersistent:lt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=lt,this._dispatchInstances=this._dispatchListeners=null}}),ut.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ut.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return La(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=La({},r.Interface,e),n.extend=r.extend,ft(n),n},ft(ut);var Mi=ut.extend({data:null}),Ni=ut.extend({data:null}),Di=[9,13,27,32],Ii=to&&"CompositionEvent"in window,zi=null;to&&"documentMode"in document&&(zi=document.documentMode);var Li=to&&"TextEvent"in window&&!zi,Bi=to&&(!Ii||zi&&8<zi&&11>=zi),Ui=String.fromCharCode(32),qi={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Wi=!1,$i=!1,Hi={eventTypes:qi,extractEvents:function(e,t,n,r){var a;if(Ii)e:{switch(e){case"compositionstart":var o=qi.compositionStart;break e;case"compositionend":o=qi.compositionEnd;break e;case"compositionupdate":o=qi.compositionUpdate;break e}o=void 0}else $i?pt(e,n)&&(o=qi.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=qi.compositionStart);return o?(Bi&&"ko"!==n.locale&&($i||o!==qi.compositionStart?o===qi.compositionEnd&&$i&&(a=ot()):(Ai=r,ji="value"in Ai?Ai.value:Ai.textContent,$i=!0)),o=Mi.getPooled(o,t,n,r),a?o.data=a:null!==(a=dt(n))&&(o.data=a),at(o),a=o):a=null,(e=Li?ht(e,n):bt(e,n))?(t=Ni.getPooled(qi.beforeInput,t,n,r),t.data=e,at(t)):t=null,null===a?t:null===t?a:[a,t]}},Vi={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},Qi={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}},Ki=null,Yi=null,Ji=!1;to&&(Ji=ce("input")&&(!document.documentMode||9<document.documentMode));var Xi={eventTypes:Qi,_isInputEventSupported:Ji,extractEvents:function(e,t,n,r){var a=t?Je(t):window,o=a.nodeName&&a.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===a.type)var i=wt;else if(mt(a))if(Ji)i=Tt;else{i=Et;var l=xt}else(o=a.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(i=Ft);if(i&&(i=i(e,t)))return gt(i,n,r);l&&l(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&L(a,"number",a.value)}},Gi=ut.extend({view:null,detail:null}),Zi={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"},el=0,tl=0,nl=!1,rl=!1,al=Gi.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ct,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=el;return el=e.screenX,nl?"mousemove"===e.type?e.screenX-t:0:(nl=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=tl;return tl=e.screenY,rl?"mousemove"===e.type?e.screenY-t:0:(rl=!0,0)}}),ol=al.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),il={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},ll={eventTypes:il,extractEvents:function(e,t,n,r,a){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&0==(32&a)&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i){if(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?Ke(t):null)){var l=Z(t);(t!==l||5!==t.tag&&6!==t.tag)&&(t=null)}}else i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var u=al,c=il.mouseLeave,s=il.mouseEnter,f="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=ol,c=il.pointerLeave,s=il.pointerEnter,f="pointer");if(e=null==i?o:Je(i),o=null==t?o:Je(t),c=u.getPooled(c,i,n,r),c.type=f+"leave",c.target=e,c.relatedTarget=o,n=u.getPooled(s,t,n,r),n.type=f+"enter",n.target=o,n.relatedTarget=e,r=i,f=t,r&&f)e:{for(u=r,s=f,i=0,e=u;e;e=Ge(e))i++;for(e=0,t=s;t;t=Ge(t))e++;for(;0<i-e;)u=Ge(u),i--;for(;0<e-i;)s=Ge(s),e--;for(;i--;){if(u===s||u===s.alternate)break e;u=Ge(u),s=Ge(s)}u=null}else u=null;for(s=u,u=[];r&&r!==s&&(null===(i=r.alternate)||i!==s);)u.push(r),r=Ge(r);for(r=[];f&&f!==s&&(null===(i=f.alternate)||i!==s);)r.push(f),f=Ge(f);for(f=0;f<u.length;f++)nt(u[f],"bubbled",c);for(f=r.length;0<f--;)nt(r[f],"captured",n);return 0==(64&a)?[c]:[c,n]}},ul="function"==typeof Object.is?Object.is:Pt,cl=Object.prototype.hasOwnProperty,sl=to&&"documentMode"in document&&11>=document.documentMode,fl={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},pl=null,dl=null,hl=null,bl=!1,ml={eventTypes:fl,extractEvents:function(e,t,n,r,a,o){if(a=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument),!(o=!a)){e:{a=G(a),o=eo.onSelect;for(var i=0;i<o.length;i++)if(!a.has(o[i])){a=!1;break e}a=!0}o=!a}if(o)return null;switch(a=t?Je(t):window,e){case"focus":(mt(a)||"true"===a.contentEditable)&&(pl=a,dl=t,hl=null);break;case"blur":hl=dl=pl=null;break;case"mousedown":bl=!0;break;case"contextmenu":case"mouseup":case"dragend":return bl=!1,At(n,r);case"selectionchange":if(sl)break;case"keydown":case"keyup":return At(n,r)}return null}},gl=ut.extend({animationName:null,elapsedTime:null,pseudoElement:null}),vl=ut.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yl=Gi.extend({relatedTarget:null}),wl={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},_l={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kl=Gi.extend({key:function(e){if(e.key){var t=wl[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?(e=jt(e),13===e?"Enter":String.fromCharCode(e)):"keydown"===e.type||"keyup"===e.type?_l[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ct,charCode:function(e){return"keypress"===e.type?jt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?jt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),xl=al.extend({dataTransfer:null}),El=Gi.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ct}),Fl=ut.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),Tl=al.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),Sl={eventTypes:ii,extractEvents:function(e,t,n,r){var a=li.get(e);if(!a)return null;switch(e){case"keypress":if(0===jt(n))return null;case"keydown":case"keyup":e=kl;break;case"blur":case"focus":e=yl;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=al;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=xl;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=El;break;case qo:case Wo:case $o:e=gl;break;case Ho:e=Fl;break;case"scroll":e=Gi;break;case"wheel":e=Tl;break;case"copy":case"cut":case"paste":e=vl;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=ol;break;default:e=ut}return t=e.getPooled(a,t,n,r),at(t),t}};if(Ya)throw Error(r(101));Ya=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),u();var Cl=Ye;Va=Xe,Qa=Cl,Ka=Je,s({SimpleEventPlugin:Sl,EnterLeaveEventPlugin:ll,ChangeEventPlugin:Xi,SelectEventPlugin:ml,BeforeInputEventPlugin:Hi});var Pl,Ol,Al,jl,Rl=[],Ml=-1,Nl={},Dl={current:Nl},Il={current:!1},zl=Nl,Ll=Ba.unstable_runWithPriority,Bl=Ba.unstable_scheduleCallback,Ul=Ba.unstable_cancelCallback,ql=Ba.unstable_requestPaint,Wl=Ba.unstable_now,$l=Ba.unstable_getCurrentPriorityLevel,Hl=Ba.unstable_ImmediatePriority,Vl=Ba.unstable_UserBlockingPriority,Ql=Ba.unstable_NormalPriority,Kl=Ba.unstable_LowPriority,Yl=Ba.unstable_IdlePriority,Jl={},Xl=Ba.unstable_shouldYield,Gl=void 0!==ql?ql:function(){},Zl=null,eu=null,tu=!1,nu=Wl(),ru=1e4>nu?Wl:function(){return Wl()-nu},au={current:null},ou=null,iu=null,lu=null,uu=!1,cu=bo.ReactCurrentBatchConfig,su=(new za.Component).refs,fu={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Z(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ir(),a=cu.suspense;r=zr(r,e,a),a=an(r,a),a.payload=t,void 0!==n&&null!==n&&(a.callback=n),on(e,a),Lr(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ir(),a=cu.suspense;r=zr(r,e,a),a=an(r,a),a.tag=1,a.payload=t,void 0!==n&&null!==n&&(a.callback=n),on(e,a),Lr(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ir(),r=cu.suspense;n=zr(n,e,r),r=an(n,r),r.tag=2,void 0!==t&&null!==t&&(r.callback=t),on(e,r),Lr(e,n)}},pu=Array.isArray,du=gn(!0),hu=gn(!1),bu={},mu={current:bu},gu={current:bu},vu={current:bu},yu={current:0},wu=bo.ReactCurrentDispatcher,_u=bo.ReactCurrentBatchConfig,ku=0,xu=null,Eu=null,Fu=null,Tu=!1,Su={readContext:tn,useCallback:Fn,useContext:Fn,useEffect:Fn,useImperativeHandle:Fn,useLayoutEffect:Fn,useMemo:Fn,useReducer:Fn,useRef:Fn,useState:Fn,useDebugValue:Fn,useResponder:Fn,useDeferredValue:Fn,useTransition:Fn},Cu={readContext:tn,useCallback:$n,useContext:tn,useEffect:zn,useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,Dn(4,2,Un.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Dn(4,2,e,t)},useMemo:function(e,t){var n=Cn();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Cn();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},e=e.dispatch=Kn.bind(null,xu,e),[r.memoizedState,e]},useRef:function(e){var t=Cn();return e={current:e},t.memoizedState=e},useState:Rn,useDebugValue:Wn,useResponder:En,useDeferredValue:function(e,t){var n=Rn(e),r=n[0],a=n[1];return zn(function(){var n=_u.suspense;_u.suspense=void 0===t?null:t;try{a(e)}finally{_u.suspense=n}},[e,t]),r},useTransition:function(e){var t=Rn(!1),n=t[0];return t=t[1],[$n(Qn.bind(null,t,e),[t,e]),n]}},Pu={readContext:tn,useCallback:Hn,useContext:tn,useEffect:Ln,useImperativeHandle:qn,useLayoutEffect:Bn,useMemo:Vn,useReducer:An,useRef:Nn,useState:function(){return An(On)},useDebugValue:Wn,useResponder:En,useDeferredValue:function(e,t){var n=An(On),r=n[0],a=n[1];return Ln(function(){var n=_u.suspense;_u.suspense=void 0===t?null:t;try{a(e)}finally{_u.suspense=n}},[e,t]),r},useTransition:function(e){var t=An(On),n=t[0];return t=t[1],[Hn(Qn.bind(null,t,e),[t,e]),n]}},Ou={readContext:tn,useCallback:Hn,useContext:tn,useEffect:Ln,useImperativeHandle:qn,useLayoutEffect:Bn,useMemo:Vn,useReducer:jn,useRef:Nn,useState:function(){return jn(On)},useDebugValue:Wn,useResponder:En,useDeferredValue:function(e,t){var n=jn(On),r=n[0],a=n[1];return Ln(function(){var n=_u.suspense;_u.suspense=void 0===t?null:t;try{a(e)}finally{_u.suspense=n}},[e,t]),r},useTransition:function(e){var t=jn(On),n=t[0];return t=t[1],[Hn(Qn.bind(null,t,e),[t,e]),n]}},Au=null,ju=null,Ru=!1,Mu=bo.ReactCurrentOwner,Nu=!1,Du={dehydrated:null,retryTime:0};Pl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ol=function(){},Al=function(e,t,n,r,a){var o=e.memoizedProps;if(o!==r){var i=t.stateNode;switch(vn(mu.current),e=null,n){case"input":o=M(i,o),r=M(i,r),e=[];break;case"option":o=U(i,o),r=U(i,r),e=[];break;case"select":o=La({},o,{value:void 0}),r=La({},r,{value:void 0}),e=[];break;case"textarea":o=W(i,o),r=W(i,r),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(i.onclick=Ie)}Me(n,r);var l,u;n=null;for(l in o)if(!r.hasOwnProperty(l)&&o.hasOwnProperty(l)&&null!=o[l])if("style"===l)for(u in i=o[l])i.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(Za.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(i=null!=o?o[l]:void 0,r.hasOwnProperty(l)&&c!==i&&(null!=c||null!=i))if("style"===l)if(i){for(u in i)!i.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&i[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,i=i?i.__html:void 0,null!=c&&i!==c&&(e=e||[]).push(l,c)):"children"===l?i===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(Za.hasOwnProperty(l)?(null!=c&&De(a,l),e||i===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},jl=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Iu,zu="function"==typeof WeakSet?WeakSet:Set,Lu="function"==typeof WeakMap?WeakMap:Map,Bu=Math.ceil,Uu=bo.ReactCurrentDispatcher,qu=bo.ReactCurrentOwner,Wu=0,$u=8,Hu=16,Vu=32,Qu=0,Ku=1,Yu=2,Ju=3,Xu=4,Gu=5,Zu=Wu,ec=null,tc=null,nc=0,rc=Qu,ac=null,oc=1073741823,ic=1073741823,lc=null,uc=0,cc=!1,sc=0,fc=500,pc=null,dc=!1,hc=null,bc=null,mc=!1,gc=null,vc=90,yc=null,wc=0,_c=null,kc=0;Iu=function(e,t,n){var a=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||Il.current)Nu=!0;else{if(a<n){switch(Nu=!1,t.tag){case 3:cr(t),er();break;case 5:if(_n(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Dt(t.type)&&Bt(t);break;case 4:yn(t,t.stateNode.containerInfo);break;case 10:a=t.memoizedProps.value,o=t.type._context,Mt(au,o._currentValue),o._currentValue=a;break;case 13:if(null!==t.memoizedState)return 0!==(a=t.child.childExpirationTime)&&a>=n?sr(e,t,n):(Mt(yu,1&yu.current),t=hr(e,t,n),null!==t?t.sibling:null);Mt(yu,1&yu.current);break;case 19:if(a=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(a)return dr(e,t,n);t.effectTag|=64}if(o=t.memoizedState,null!==o&&(o.rendering=null,o.tail=null),Mt(yu,yu.current),!a)return null}return hr(e,t,n)}Nu=!1}}else Nu=!1;switch(t.expirationTime=0,t.tag){case 2:if(a=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Nt(t,Dl.current),en(t,n),o=Sn(null,t,a,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,Dt(a)){var i=!0;Bt(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,nn(t);var l=a.getDerivedStateFromProps;"function"==typeof l&&sn(t,a,l,e),o.updater=fu,t.stateNode=o,o._reactInternalFiber=t,hn(t,a,e,n),t=ur(null,t,a,!0,i,n)}else t.tag=0,tr(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,T(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=ga(o),e=Jt(o,e),i){case 0:t=ir(null,t,o,e,n);break e;case 1:t=lr(null,t,o,e,n);break e;case 11:t=nr(null,t,o,e,n);break e;case 14:t=rr(null,t,o,Jt(o.type,e),a,n);break e}throw Error(r(306,o,""))}return t;case 0:return a=t.type,o=t.pendingProps,o=t.elementType===a?o:Jt(a,o),ir(e,t,a,o,n);case 1:return a=t.type,o=t.pendingProps,o=t.elementType===a?o:Jt(a,o),lr(e,t,a,o,n);case 3:if(cr(t),a=t.updateQueue,null===e||null===a)throw Error(r(282));if(a=t.pendingProps,o=t.memoizedState,o=null!==o?o.element:null,rn(e,t),un(t,a,null,n),(a=t.memoizedState.element)===o)er(),t=hr(e,t,n);else{if((o=t.stateNode.hydrate)&&(ju=Ve(t.stateNode.containerInfo.firstChild),Au=t,o=Ru=!0),o)for(n=hu(t,null,a,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else tr(e,t,a,n),er();t=t.child}return t;case 5:return _n(t),null===e&&Xn(t),a=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,He(a,o)?l=null:null!==i&&He(a,i)&&(t.effectTag|=16),or(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(tr(e,t,l,n),t=t.child),t;case 6:return null===e&&Xn(t),null;case 13:return sr(e,t,n);case 4:return yn(t,t.stateNode.containerInfo),a=t.pendingProps,null===e?t.child=du(t,null,a,n):tr(e,t,a,n),t.child;case 11:return a=t.type,o=t.pendingProps,o=t.elementType===a?o:Jt(a,o),nr(e,t,a,o,n);case 7:return tr(e,t,t.pendingProps,n),t.child;case 8:case 12:return tr(e,t,t.pendingProps.children,n),t.child;case 10:e:{a=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(Mt(au,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0===(i=ul(u,i)?0:0|("function"==typeof a._calculateChangedBits?a._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!Il.current){t=hr(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===a&&0!=(s.observedBits&i)){1===u.tag&&(s=an(n,null),s.tag=2,on(u,s)),u.expirationTime<n&&(u.expirationTime=n),s=u.alternate,null!==s&&s.expirationTime<n&&(s.expirationTime=n),Zt(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}tr(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,i=t.pendingProps,a=i.children,en(t,n),o=tn(o,i.unstable_observedBits),a=a(o),t.effectTag|=1,tr(e,t,a,n),t.child;case 14:return o=t.type,i=Jt(o,t.pendingProps),i=Jt(o.type,i),rr(e,t,o,i,a,n);case 15:return ar(e,t,t.type,t.pendingProps,a,n);case 17:return a=t.type,o=t.pendingProps,o=t.elementType===a?o:Jt(a,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Dt(a)?(e=!0,Bt(t)):e=!1,en(t,n),pn(t,a,o),hn(t,a,o,n),ur(null,t,a,!0,e,n);case 19:return dr(e,t,n)}throw Error(r(156,t.tag))};var xc=null,Ec=null;ja.prototype.render=function(e){Ca(e,this._internalRoot,null,null)},ja.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ca(null,e,null,function(){t[Oi]=null})},Lo=function(e){if(13===e.tag){var t=Yt(Ir(),150,100);Lr(e,t),Aa(e,t)}},Bo=function(e){13===e.tag&&(Lr(e,3),Aa(e,3))},Uo=function(e){if(13===e.tag){var t=Ir();t=zr(t,e,null),Lr(e,t),Aa(e,t)}},no=function(e,t,n){switch(t){case"input":if(I(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var a=n[t];if(a!==e&&a.form===e.form){var o=Xe(a);if(!o)throw Error(r(90));R(a),I(a,o)}}}break;case"textarea":H(e,n);break;case"select":null!=(t=n.value)&&q(e,!!n.multiple,t,!1)}},h=Vr,b=function(e,t,n,r,a){var o=Zu;Zu|=4;try{return $t(98,e.bind(null,t,n,r,a))}finally{(Zu=o)===Wu&&Qt()}},m=function(){(Zu&(1|Hu|Vu))===Wu&&(Hr(),la())},oo=function(e,t){var n=Zu;Zu|=2;try{return e(t)}finally{(Zu=n)===Wu&&Qt()}};var Fc={Events:[Ye,Je,Xe,s,Ga,at,function(e){oe(e,rt)},p,d,Oe,le,la,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;da(La({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:bo.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=re(e),null===e?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:Ke,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Fc,t.createPortal=Ia,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(r(188));throw Error(r(268,Object.keys(e)))}return e=re(t),e=null===e?null:e.stateNode},t.flushSync=function(e,t){if((Zu&(Hu|Vu))!==Wu)throw Error(r(187));var n=Zu;Zu|=1;try{return $t(99,e.bind(null,t))}finally{Zu=n,Qt()}},t.hydrate=function(e,t,n){if(!Ra(t))throw Error(r(200));return Na(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ra(t))throw Error(r(200));return Na(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ra(e))throw Error(r(40));return!!e._reactRootContainer&&(Qr(function(){Na(null,null,e,!1,function(){e._reactRootContainer=null,e[Oi]=null})}),!0)},t.unstable_batchedUpdates=Vr,t.unstable_createPortal=function(e,t){return Ia(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,a){if(!Ra(n))throw Error(r(200));if(null==e||void 0===e._reactInternalFiber)throw Error(r(38));return Na(e,t,n,!1,a)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(30)},function(e,t,n){"use strict";function r(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<i(a,t)))break e;e[r]=t,e[n]=a,n=r}}function a(e){return e=e[0],void 0===e?null:e}function o(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,l=e[o],u=o+1,c=e[u];if(void 0!==l&&0>i(l,n))void 0!==c&&0>i(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[o]=n,r=o);else{if(!(void 0!==c&&0>i(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}return null}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}function l(e){for(var t=a(M);null!==t;){if(null===t.callback)o(M);else{if(!(t.startTime<=e))break;o(M),t.sortIndex=t.expirationTime,r(R,t)}t=a(M)}}function u(e){if(B=!1,l(e),!L)if(null!==a(R))L=!0,f(c);else{var t=a(M);null!==t&&p(u,t.startTime-e)}}function c(e,n){L=!1,B&&(B=!1,d()),z=!0;var r=I;try{for(l(n),D=a(R);null!==D&&(!(D.expirationTime>n)||e&&!h());){var i=D.callback;if(null!==i){D.callback=null,I=D.priorityLevel;var c=i(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof c?D.callback=c:D===a(R)&&o(R),l(n)}else o(R);D=a(R)}if(null!==D)var s=!0;else{var f=a(M);null!==f&&p(u,f.startTime-n),s=!1}return s}finally{D=null,I=r,z=!1}}function s(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f,p,d,h,b;if("undefined"==typeof window||"function"!=typeof MessageChannel){var m=null,g=null,v=function(){if(null!==m)try{var e=t.unstable_now();m(!0,e),m=null}catch(e){throw setTimeout(v,0),e}},y=Date.now();t.unstable_now=function(){return Date.now()-y},f=function(e){null!==m?setTimeout(f,0,e):(m=e,setTimeout(v,0))},p=function(e,t){g=setTimeout(e,t)},d=function(){clearTimeout(g)},h=function(){return!1},b=t.unstable_forceFrameRate=function(){}}else{var w=window.performance,_=window.Date,k=window.setTimeout,x=window.clearTimeout;if("undefined"!=typeof console){var E=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof E&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof w&&"function"==typeof w.now)t.unstable_now=function(){return w.now()};else{var F=_.now();t.unstable_now=function(){return _.now()-F}}var T=!1,S=null,C=-1,P=5,O=0;h=function(){return t.unstable_now()>=O},b=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):P=0<e?Math.floor(1e3/e):5};var A=new MessageChannel,j=A.port2;A.port1.onmessage=function(){if(null!==S){var e=t.unstable_now();O=e+P;try{S(!0,e)?j.postMessage(null):(T=!1,S=null)}catch(e){throw j.postMessage(null),e}}else T=!1},f=function(e){S=e,T||(T=!0,j.postMessage(null))},p=function(e,n){C=k(function(){e(t.unstable_now())},n)},d=function(){x(C),C=-1}}var R=[],M=[],N=1,D=null,I=3,z=!1,L=!1,B=!1,U=b;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||z||(L=!0,f(c))},t.unstable_getCurrentPriorityLevel=function(){return I},t.unstable_getFirstCallbackNode=function(){return a(R)},t.unstable_next=function(e){switch(I){case 1:case 2:case 3:var t=3;break;default:t=I}var n=I;I=t;try{return e()}finally{I=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=I;I=e;try{return t()}finally{I=n}},t.unstable_scheduleCallback=function(e,n,o){var i=t.unstable_now();if("object"==typeof o&&null!==o){var l=o.delay;l="number"==typeof l&&0<l?i+l:i,o="number"==typeof o.timeout?o.timeout:s(e)}else o=s(e),l=i;return o=l+o,e={id:N++,callback:n,priorityLevel:e,startTime:l,expirationTime:o,sortIndex:-1},l>i?(e.sortIndex=l,r(M,e),null===a(R)&&e===a(M)&&(B?d():B=!0,p(u,l-i))):(e.sortIndex=o,r(R,e),L||z||(L=!0,f(c))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();l(e);var n=a(R);return n!==D&&null!==D&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<D.expirationTime||h()},t.unstable_wrapCallback=function(e){var t=I;return function(){var n=I;I=t;try{return e.apply(this,arguments)}finally{I=n}}}},function(e,t,n){"use strict";function r(){}function a(){}var o=n(32);a.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,a,i){if(i!==o){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:r};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function a(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}function o(e,t){void 0===t&&(t="");var n=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&r(e),l=t&&r(t),u=i||l;if(e&&r(e)?o=n:n.length&&(o.pop(),o=o.concat(n)),!o.length)return"/";var c;if(o.length){var s=o[o.length-1];c="."===s||".."===s||""===s}else c=!1;for(var f=0,p=o.length;p>=0;p--){var d=o[p];"."===d?a(o,p):".."===d?(a(o,p),f++):f&&(a(o,p),f--)}if(!u)for(;f--;f)o.unshift("..");!u||""===o[0]||o[0]&&r(o[0])||o.unshift("");var h=o.join("/");return c&&"/"!==h.substr(-1)&&(h+="/"),h}t.a=o},function(e,t,n){"use strict";function r(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}function a(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(e,n){return a(e,t[n])});if("object"==typeof e||"object"==typeof t){var n=r(e),o=r(t);return n!==e||o!==t?a(n,o):Object.keys(Object.assign({},e,t)).every(function(n){return a(e[n],t[n])})}return!1}t.a=a},function(e,t,n){"use strict";(function(e){function r(){var e="__global_unique_id__";return h[e]=(h[e]||0)+1}function a(e,t){return e===t?0!==e||1/e==1/t:e!==e&&t!==t}function o(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter(function(t){return t!==e})},get:function(){return e},set:function(n,r){e=n,t.forEach(function(t){return t(e,r)})}}}function i(e){return Array.isArray(e)?e[0]:e}function l(e,t){var n,l,c="__create-react-context-"+r()+"__",f=function(e){function n(){var t;return t=e.apply(this,arguments)||this,t.emitter=o(t.props.value),t}Object(s.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return e={},e[c]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;a(r,o)?n=0:(n="function"==typeof t?t(r,o):d,0!==(n|=0)&&this.emitter.set(e.value,n))}},r.render=function(){return this.props.children},n}(u.Component);f.childContextTypes=(n={},n[c]=p.a.object.isRequired,n);var h=function(t){function n(){var e;return e=t.apply(this,arguments)||this,e.state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(s.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?d:t},r.componentDidMount=function(){this.context[c]&&this.context[c].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?d:e},r.componentWillUnmount=function(){this.context[c]&&this.context[c].off(this.onUpdate)},r.getValue=function(){return this.context[c]?this.context[c].get():e},r.render=function(){return i(this.props.children)(this.state.value)},n}(u.Component);return h.contextTypes=(l={},l[c]=p.a.object,l),{Provider:f,Consumer:h}}var u=n(0),c=n.n(u),s=n(4),f=n(11),p=n.n(f),d=(n(3),1073741823),h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{},b=c.a.createContext||l;t.a=b}).call(t,n(13))},function(e,t,n){function r(e,t){for(var n,r=[],a=0,o=0,i="",l=t&&t.delimiter||"/";null!=(n=v.exec(e));){var s=n[0],f=n[1],p=n.index;if(i+=e.slice(o,p),o=p+s.length,f)i+=f[1];else{var d=e[o],h=n[2],b=n[3],m=n[4],g=n[5],y=n[6],w=n[7];i&&(r.push(i),i="");var _=null!=h&&null!=d&&d!==h,k="+"===y||"*"===y,x="?"===y||"*"===y,E=n[2]||l,F=m||g;r.push({name:b||a++,prefix:h||"",delimiter:E,optional:x,repeat:k,partial:_,asterisk:!!w,pattern:F?c(F):w?".*":"[^"+u(E)+"]+?"})}}return o<e.length&&(i+=e.substr(o)),i&&r.push(i),r}function a(e,t){return l(r(e,t),t)}function o(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function i(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e,t){for(var n=new Array(e.length),r=0;r<e.length;r++)"object"==typeof e[r]&&(n[r]=new RegExp("^(?:"+e[r].pattern+")$",f(t)));return function(t,r){for(var a="",l=t||{},u=r||{},c=u.pretty?o:encodeURIComponent,s=0;s<e.length;s++){var f=e[s];if("string"!=typeof f){var p,d=l[f.name];if(null==d){if(f.optional){f.partial&&(a+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(g(d)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var h=0;h<d.length;h++){if(p=c(d[h]),!n[s].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");a+=(0===h?f.prefix:f.delimiter)+p}}else{if(p=f.asterisk?i(d):c(d),!n[s].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');a+=f.prefix+p}}else a+=f}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}function d(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(m(e[a],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}function h(e,t,n){return b(r(e,n),t,n)}function b(e,t,n){g(t)||(n=t||n,t=[]),n=n||{};for(var r=n.strict,a=!1!==n.end,o="",i=0;i<e.length;i++){var l=e[i];if("string"==typeof l)o+=u(l);else{var c=u(l.prefix),p="(?:"+l.pattern+")";t.push(l),l.repeat&&(p+="(?:"+c+p+")*"),p=l.optional?l.partial?c+"("+p+")?":"(?:"+c+"("+p+"))?":c+"("+p+")",o+=p}}var d=u(n.delimiter||"/"),h=o.slice(-d.length)===d;return r||(o=(h?o.slice(0,-d.length):o)+"(?:"+d+"(?=$))?"),o+=a?"$":r&&h?"":"(?="+d+"|$)",s(new RegExp("^"+o,f(n)),t)}function m(e,t,n){return g(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?p(e,t):g(e)?d(e,t,n):h(e,t,n)}var g=n(37);e.exports=m,e.exports.parse=r,e.exports.compile=a,e.exports.tokensToFunction=l,e.exports.tokensToRegExp=b;var v=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";function r(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case d:case h:case u:case s:case c:case m:return e;default:switch(e=e&&e.$$typeof){case p:case b:case y:case v:case f:return e;default:return t}}case l:return t}}}function a(e){return r(e)===h}/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,l=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,f=o?Symbol.for("react.provider"):60109,p=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.async_mode"):60111,h=o?Symbol.for("react.concurrent_mode"):60111,b=o?Symbol.for("react.forward_ref"):60112,m=o?Symbol.for("react.suspense"):60113,g=o?Symbol.for("react.suspense_list"):60120,v=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,w=o?Symbol.for("react.block"):60121,_=o?Symbol.for("react.fundamental"):60117,k=o?Symbol.for("react.responder"):60118,x=o?Symbol.for("react.scope"):60119;t.AsyncMode=d,t.ConcurrentMode=h,t.ContextConsumer=p,t.ContextProvider=f,t.Element=i,t.ForwardRef=b,t.Fragment=u,t.Lazy=y,t.Memo=v,t.Portal=l,t.Profiler=s,t.StrictMode=c,t.Suspense=m,t.isAsyncMode=function(e){return a(e)||r(e)===d},t.isConcurrentMode=a,t.isContextConsumer=function(e){return r(e)===p},t.isContextProvider=function(e){return r(e)===f},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return r(e)===b},t.isFragment=function(e){return r(e)===u},t.isLazy=function(e){return r(e)===y},t.isMemo=function(e){return r(e)===v},t.isPortal=function(e){return r(e)===l},t.isProfiler=function(e){return r(e)===s},t.isStrictMode=function(e){return r(e)===c},t.isSuspense=function(e){return r(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===u||e===h||e===s||e===c||e===m||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===f||e.$$typeof===p||e.$$typeof===b||e.$$typeof===_||e.$$typeof===k||e.$$typeof===x||e.$$typeof===w)},t.typeOf=r},function(e,t,n){"use strict";function r(e){return o.isMemo(e)?c:s[e.$$typeof]||i}function a(e,t,n){if("string"!=typeof t){if(m){var o=b(t);o&&o!==m&&a(e,o,n)}var i=p(t);d&&(i=i.concat(d(t)));for(var u=r(e),c=r(t),s=0;s<i.length;++s){var g=i[s];if(!(l[g]||n&&n[g]||c&&c[g]||u&&u[g])){var v=h(t,g);try{f(e,g,v)}catch(e){}}}}return e}var o=n(14),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},l={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},u={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};s[o.ForwardRef]=u,s[o.Memo]=c;var f=Object.defineProperty,p=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,h=Object.getOwnPropertyDescriptor,b=Object.getPrototypeOf,m=Object.prototype;e.exports=a},function(e,t,n){e.exports=n(41)()},function(e,t,n){"use strict";function r(){}function a(){}var o=n(42);a.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,a,i){if(i!==o){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:r};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports={columns:"app__columns__gbFrq",column:"app__column__fXiJJ",left:"app__left__3d_n6 app__column__fXiJJ",right:"app__right__l2boM app__column__fXiJJ",Section:"app__Section__3yIwb",SectionTitle:"app__SectionTitle__1pthe",PubYear:"app__PubYear__3sb68 app__SectionTitle__1pthe",Menu:"app__Menu__a1mFi"}},function(e,t){},function(e,t,n){var r=n(46);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0};a.transform=void 0;n(25)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(24)(void 0),t.push([e.i,"/*!\n *  Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */@font-face{font-family:FontAwesome;src:url("+n(47)+");src:url("+n(48)+'?#iefix&v=4.7.0) format("embedded-opentype"),url('+n(49)+') format("woff2"),url('+n(50)+') format("woff"),url('+n(51)+') format("truetype"),url('+n(52)+'#fontawesomeregular) format("svg");font-weight:400;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-fw{width:1.28571429em;text-align:center}.fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}.fa-ul>li{position:relative}.fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}.fa-li.fa-lg{left:-1.85714286em}.fa-border{padding:.2em .25em .15em;border:.08em solid #eee;border-radius:.1em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left{margin-right:.3em}.fa.fa-pull-right{margin-left:.3em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}.fa-rotate-90{-ms-filter:"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-ms-filter:"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-ms-filter:"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-ms-filter:"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1)}.fa-flip-vertical{-ms-filter:"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";-webkit-transform:scaleY(-1);-ms-transform:scaleY(-1);transform:scaleY(-1)}:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270{filter:none}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-glass:before{content:"\\F000"}.fa-music:before{content:"\\F001"}.fa-search:before{content:"\\F002"}.fa-envelope-o:before{content:"\\F003"}.fa-heart:before{content:"\\F004"}.fa-star:before{content:"\\F005"}.fa-star-o:before{content:"\\F006"}.fa-user:before{content:"\\F007"}.fa-film:before{content:"\\F008"}.fa-th-large:before{content:"\\F009"}.fa-th:before{content:"\\F00A"}.fa-th-list:before{content:"\\F00B"}.fa-check:before{content:"\\F00C"}.fa-close:before,.fa-remove:before,.fa-times:before{content:"\\F00D"}.fa-search-plus:before{content:"\\F00E"}.fa-search-minus:before{content:"\\F010"}.fa-power-off:before{content:"\\F011"}.fa-signal:before{content:"\\F012"}.fa-cog:before,.fa-gear:before{content:"\\F013"}.fa-trash-o:before{content:"\\F014"}.fa-home:before{content:"\\F015"}.fa-file-o:before{content:"\\F016"}.fa-clock-o:before{content:"\\F017"}.fa-road:before{content:"\\F018"}.fa-download:before{content:"\\F019"}.fa-arrow-circle-o-down:before{content:"\\F01A"}.fa-arrow-circle-o-up:before{content:"\\F01B"}.fa-inbox:before{content:"\\F01C"}.fa-play-circle-o:before{content:"\\F01D"}.fa-repeat:before,.fa-rotate-right:before{content:"\\F01E"}.fa-refresh:before{content:"\\F021"}.fa-list-alt:before{content:"\\F022"}.fa-lock:before{content:"\\F023"}.fa-flag:before{content:"\\F024"}.fa-headphones:before{content:"\\F025"}.fa-volume-off:before{content:"\\F026"}.fa-volume-down:before{content:"\\F027"}.fa-volume-up:before{content:"\\F028"}.fa-qrcode:before{content:"\\F029"}.fa-barcode:before{content:"\\F02A"}.fa-tag:before{content:"\\F02B"}.fa-tags:before{content:"\\F02C"}.fa-book:before{content:"\\F02D"}.fa-bookmark:before{content:"\\F02E"}.fa-print:before{content:"\\F02F"}.fa-camera:before{content:"\\F030"}.fa-font:before{content:"\\F031"}.fa-bold:before{content:"\\F032"}.fa-italic:before{content:"\\F033"}.fa-text-height:before{content:"\\F034"}.fa-text-width:before{content:"\\F035"}.fa-align-left:before{content:"\\F036"}.fa-align-center:before{content:"\\F037"}.fa-align-right:before{content:"\\F038"}.fa-align-justify:before{content:"\\F039"}.fa-list:before{content:"\\F03A"}.fa-dedent:before,.fa-outdent:before{content:"\\F03B"}.fa-indent:before{content:"\\F03C"}.fa-video-camera:before{content:"\\F03D"}.fa-image:before,.fa-photo:before,.fa-picture-o:before{content:"\\F03E"}.fa-pencil:before{content:"\\F040"}.fa-map-marker:before{content:"\\F041"}.fa-adjust:before{content:"\\F042"}.fa-tint:before{content:"\\F043"}.fa-edit:before,.fa-pencil-square-o:before{content:"\\F044"}.fa-share-square-o:before{content:"\\F045"}.fa-check-square-o:before{content:"\\F046"}.fa-arrows:before{content:"\\F047"}.fa-step-backward:before{content:"\\F048"}.fa-fast-backward:before{content:"\\F049"}.fa-backward:before{content:"\\F04A"}.fa-play:before{content:"\\F04B"}.fa-pause:before{content:"\\F04C"}.fa-stop:before{content:"\\F04D"}.fa-forward:before{content:"\\F04E"}.fa-fast-forward:before{content:"\\F050"}.fa-step-forward:before{content:"\\F051"}.fa-eject:before{content:"\\F052"}.fa-chevron-left:before{content:"\\F053"}.fa-chevron-right:before{content:"\\F054"}.fa-plus-circle:before{content:"\\F055"}.fa-minus-circle:before{content:"\\F056"}.fa-times-circle:before{content:"\\F057"}.fa-check-circle:before{content:"\\F058"}.fa-question-circle:before{content:"\\F059"}.fa-info-circle:before{content:"\\F05A"}.fa-crosshairs:before{content:"\\F05B"}.fa-times-circle-o:before{content:"\\F05C"}.fa-check-circle-o:before{content:"\\F05D"}.fa-ban:before{content:"\\F05E"}.fa-arrow-left:before{content:"\\F060"}.fa-arrow-right:before{content:"\\F061"}.fa-arrow-up:before{content:"\\F062"}.fa-arrow-down:before{content:"\\F063"}.fa-mail-forward:before,.fa-share:before{content:"\\F064"}.fa-expand:before{content:"\\F065"}.fa-compress:before{content:"\\F066"}.fa-plus:before{content:"\\F067"}.fa-minus:before{content:"\\F068"}.fa-asterisk:before{content:"\\F069"}.fa-exclamation-circle:before{content:"\\F06A"}.fa-gift:before{content:"\\F06B"}.fa-leaf:before{content:"\\F06C"}.fa-fire:before{content:"\\F06D"}.fa-eye:before{content:"\\F06E"}.fa-eye-slash:before{content:"\\F070"}.fa-exclamation-triangle:before,.fa-warning:before{content:"\\F071"}.fa-plane:before{content:"\\F072"}.fa-calendar:before{content:"\\F073"}.fa-random:before{content:"\\F074"}.fa-comment:before{content:"\\F075"}.fa-magnet:before{content:"\\F076"}.fa-chevron-up:before{content:"\\F077"}.fa-chevron-down:before{content:"\\F078"}.fa-retweet:before{content:"\\F079"}.fa-shopping-cart:before{content:"\\F07A"}.fa-folder:before{content:"\\F07B"}.fa-folder-open:before{content:"\\F07C"}.fa-arrows-v:before{content:"\\F07D"}.fa-arrows-h:before{content:"\\F07E"}.fa-bar-chart-o:before,.fa-bar-chart:before{content:"\\F080"}.fa-twitter-square:before{content:"\\F081"}.fa-facebook-square:before{content:"\\F082"}.fa-camera-retro:before{content:"\\F083"}.fa-key:before{content:"\\F084"}.fa-cogs:before,.fa-gears:before{content:"\\F085"}.fa-comments:before{content:"\\F086"}.fa-thumbs-o-up:before{content:"\\F087"}.fa-thumbs-o-down:before{content:"\\F088"}.fa-star-half:before{content:"\\F089"}.fa-heart-o:before{content:"\\F08A"}.fa-sign-out:before{content:"\\F08B"}.fa-linkedin-square:before{content:"\\F08C"}.fa-thumb-tack:before{content:"\\F08D"}.fa-external-link:before{content:"\\F08E"}.fa-sign-in:before{content:"\\F090"}.fa-trophy:before{content:"\\F091"}.fa-github-square:before{content:"\\F092"}.fa-upload:before{content:"\\F093"}.fa-lemon-o:before{content:"\\F094"}.fa-phone:before{content:"\\F095"}.fa-square-o:before{content:"\\F096"}.fa-bookmark-o:before{content:"\\F097"}.fa-phone-square:before{content:"\\F098"}.fa-twitter:before{content:"\\F099"}.fa-facebook-f:before,.fa-facebook:before{content:"\\F09A"}.fa-github:before{content:"\\F09B"}.fa-unlock:before{content:"\\F09C"}.fa-credit-card:before{content:"\\F09D"}.fa-feed:before,.fa-rss:before{content:"\\F09E"}.fa-hdd-o:before{content:"\\F0A0"}.fa-bullhorn:before{content:"\\F0A1"}.fa-bell:before{content:"\\F0F3"}.fa-certificate:before{content:"\\F0A3"}.fa-hand-o-right:before{content:"\\F0A4"}.fa-hand-o-left:before{content:"\\F0A5"}.fa-hand-o-up:before{content:"\\F0A6"}.fa-hand-o-down:before{content:"\\F0A7"}.fa-arrow-circle-left:before{content:"\\F0A8"}.fa-arrow-circle-right:before{content:"\\F0A9"}.fa-arrow-circle-up:before{content:"\\F0AA"}.fa-arrow-circle-down:before{content:"\\F0AB"}.fa-globe:before{content:"\\F0AC"}.fa-wrench:before{content:"\\F0AD"}.fa-tasks:before{content:"\\F0AE"}.fa-filter:before{content:"\\F0B0"}.fa-briefcase:before{content:"\\F0B1"}.fa-arrows-alt:before{content:"\\F0B2"}.fa-group:before,.fa-users:before{content:"\\F0C0"}.fa-chain:before,.fa-link:before{content:"\\F0C1"}.fa-cloud:before{content:"\\F0C2"}.fa-flask:before{content:"\\F0C3"}.fa-cut:before,.fa-scissors:before{content:"\\F0C4"}.fa-copy:before,.fa-files-o:before{content:"\\F0C5"}.fa-paperclip:before{content:"\\F0C6"}.fa-floppy-o:before,.fa-save:before{content:"\\F0C7"}.fa-square:before{content:"\\F0C8"}.fa-bars:before,.fa-navicon:before,.fa-reorder:before{content:"\\F0C9"}.fa-list-ul:before{content:"\\F0CA"}.fa-list-ol:before{content:"\\F0CB"}.fa-strikethrough:before{content:"\\F0CC"}.fa-underline:before{content:"\\F0CD"}.fa-table:before{content:"\\F0CE"}.fa-magic:before{content:"\\F0D0"}.fa-truck:before{content:"\\F0D1"}.fa-pinterest:before{content:"\\F0D2"}.fa-pinterest-square:before{content:"\\F0D3"}.fa-google-plus-square:before{content:"\\F0D4"}.fa-google-plus:before{content:"\\F0D5"}.fa-money:before{content:"\\F0D6"}.fa-caret-down:before{content:"\\F0D7"}.fa-caret-up:before{content:"\\F0D8"}.fa-caret-left:before{content:"\\F0D9"}.fa-caret-right:before{content:"\\F0DA"}.fa-columns:before{content:"\\F0DB"}.fa-sort:before,.fa-unsorted:before{content:"\\F0DC"}.fa-sort-desc:before,.fa-sort-down:before{content:"\\F0DD"}.fa-sort-asc:before,.fa-sort-up:before{content:"\\F0DE"}.fa-envelope:before{content:"\\F0E0"}.fa-linkedin:before{content:"\\F0E1"}.fa-rotate-left:before,.fa-undo:before{content:"\\F0E2"}.fa-gavel:before,.fa-legal:before{content:"\\F0E3"}.fa-dashboard:before,.fa-tachometer:before{content:"\\F0E4"}.fa-comment-o:before{content:"\\F0E5"}.fa-comments-o:before{content:"\\F0E6"}.fa-bolt:before,.fa-flash:before{content:"\\F0E7"}.fa-sitemap:before{content:"\\F0E8"}.fa-umbrella:before{content:"\\F0E9"}.fa-clipboard:before,.fa-paste:before{content:"\\F0EA"}.fa-lightbulb-o:before{content:"\\F0EB"}.fa-exchange:before{content:"\\F0EC"}.fa-cloud-download:before{content:"\\F0ED"}.fa-cloud-upload:before{content:"\\F0EE"}.fa-user-md:before{content:"\\F0F0"}.fa-stethoscope:before{content:"\\F0F1"}.fa-suitcase:before{content:"\\F0F2"}.fa-bell-o:before{content:"\\F0A2"}.fa-coffee:before{content:"\\F0F4"}.fa-cutlery:before{content:"\\F0F5"}.fa-file-text-o:before{content:"\\F0F6"}.fa-building-o:before{content:"\\F0F7"}.fa-hospital-o:before{content:"\\F0F8"}.fa-ambulance:before{content:"\\F0F9"}.fa-medkit:before{content:"\\F0FA"}.fa-fighter-jet:before{content:"\\F0FB"}.fa-beer:before{content:"\\F0FC"}.fa-h-square:before{content:"\\F0FD"}.fa-plus-square:before{content:"\\F0FE"}.fa-angle-double-left:before{content:"\\F100"}.fa-angle-double-right:before{content:"\\F101"}.fa-angle-double-up:before{content:"\\F102"}.fa-angle-double-down:before{content:"\\F103"}.fa-angle-left:before{content:"\\F104"}.fa-angle-right:before{content:"\\F105"}.fa-angle-up:before{content:"\\F106"}.fa-angle-down:before{content:"\\F107"}.fa-desktop:before{content:"\\F108"}.fa-laptop:before{content:"\\F109"}.fa-tablet:before{content:"\\F10A"}.fa-mobile-phone:before,.fa-mobile:before{content:"\\F10B"}.fa-circle-o:before{content:"\\F10C"}.fa-quote-left:before{content:"\\F10D"}.fa-quote-right:before{content:"\\F10E"}.fa-spinner:before{content:"\\F110"}.fa-circle:before{content:"\\F111"}.fa-mail-reply:before,.fa-reply:before{content:"\\F112"}.fa-github-alt:before{content:"\\F113"}.fa-folder-o:before{content:"\\F114"}.fa-folder-open-o:before{content:"\\F115"}.fa-smile-o:before{content:"\\F118"}.fa-frown-o:before{content:"\\F119"}.fa-meh-o:before{content:"\\F11A"}.fa-gamepad:before{content:"\\F11B"}.fa-keyboard-o:before{content:"\\F11C"}.fa-flag-o:before{content:"\\F11D"}.fa-flag-checkered:before{content:"\\F11E"}.fa-terminal:before{content:"\\F120"}.fa-code:before{content:"\\F121"}.fa-mail-reply-all:before,.fa-reply-all:before{content:"\\F122"}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:"\\F123"}.fa-location-arrow:before{content:"\\F124"}.fa-crop:before{content:"\\F125"}.fa-code-fork:before{content:"\\F126"}.fa-chain-broken:before,.fa-unlink:before{content:"\\F127"}.fa-question:before{content:"\\F128"}.fa-info:before{content:"\\F129"}.fa-exclamation:before{content:"\\F12A"}.fa-superscript:before{content:"\\F12B"}.fa-subscript:before{content:"\\F12C"}.fa-eraser:before{content:"\\F12D"}.fa-puzzle-piece:before{content:"\\F12E"}.fa-microphone:before{content:"\\F130"}.fa-microphone-slash:before{content:"\\F131"}.fa-shield:before{content:"\\F132"}.fa-calendar-o:before{content:"\\F133"}.fa-fire-extinguisher:before{content:"\\F134"}.fa-rocket:before{content:"\\F135"}.fa-maxcdn:before{content:"\\F136"}.fa-chevron-circle-left:before{content:"\\F137"}.fa-chevron-circle-right:before{content:"\\F138"}.fa-chevron-circle-up:before{content:"\\F139"}.fa-chevron-circle-down:before{content:"\\F13A"}.fa-html5:before{content:"\\F13B"}.fa-css3:before{content:"\\F13C"}.fa-anchor:before{content:"\\F13D"}.fa-unlock-alt:before{content:"\\F13E"}.fa-bullseye:before{content:"\\F140"}.fa-ellipsis-h:before{content:"\\F141"}.fa-ellipsis-v:before{content:"\\F142"}.fa-rss-square:before{content:"\\F143"}.fa-play-circle:before{content:"\\F144"}.fa-ticket:before{content:"\\F145"}.fa-minus-square:before{content:"\\F146"}.fa-minus-square-o:before{content:"\\F147"}.fa-level-up:before{content:"\\F148"}.fa-level-down:before{content:"\\F149"}.fa-check-square:before{content:"\\F14A"}.fa-pencil-square:before{content:"\\F14B"}.fa-external-link-square:before{content:"\\F14C"}.fa-share-square:before{content:"\\F14D"}.fa-compass:before{content:"\\F14E"}.fa-caret-square-o-down:before,.fa-toggle-down:before{content:"\\F150"}.fa-caret-square-o-up:before,.fa-toggle-up:before{content:"\\F151"}.fa-caret-square-o-right:before,.fa-toggle-right:before{content:"\\F152"}.fa-eur:before,.fa-euro:before{content:"\\F153"}.fa-gbp:before{content:"\\F154"}.fa-dollar:before,.fa-usd:before{content:"\\F155"}.fa-inr:before,.fa-rupee:before{content:"\\F156"}.fa-cny:before,.fa-jpy:before,.fa-rmb:before,.fa-yen:before{content:"\\F157"}.fa-rouble:before,.fa-rub:before,.fa-ruble:before{content:"\\F158"}.fa-krw:before,.fa-won:before{content:"\\F159"}.fa-bitcoin:before,.fa-btc:before{content:"\\F15A"}.fa-file:before{content:"\\F15B"}.fa-file-text:before{content:"\\F15C"}.fa-sort-alpha-asc:before{content:"\\F15D"}.fa-sort-alpha-desc:before{content:"\\F15E"}.fa-sort-amount-asc:before{content:"\\F160"}.fa-sort-amount-desc:before{content:"\\F161"}.fa-sort-numeric-asc:before{content:"\\F162"}.fa-sort-numeric-desc:before{content:"\\F163"}.fa-thumbs-up:before{content:"\\F164"}.fa-thumbs-down:before{content:"\\F165"}.fa-youtube-square:before{content:"\\F166"}.fa-youtube:before{content:"\\F167"}.fa-xing:before{content:"\\F168"}.fa-xing-square:before{content:"\\F169"}.fa-youtube-play:before{content:"\\F16A"}.fa-dropbox:before{content:"\\F16B"}.fa-stack-overflow:before{content:"\\F16C"}.fa-instagram:before{content:"\\F16D"}.fa-flickr:before{content:"\\F16E"}.fa-adn:before{content:"\\F170"}.fa-bitbucket:before{content:"\\F171"}.fa-bitbucket-square:before{content:"\\F172"}.fa-tumblr:before{content:"\\F173"}.fa-tumblr-square:before{content:"\\F174"}.fa-long-arrow-down:before{content:"\\F175"}.fa-long-arrow-up:before{content:"\\F176"}.fa-long-arrow-left:before{content:"\\F177"}.fa-long-arrow-right:before{content:"\\F178"}.fa-apple:before{content:"\\F179"}.fa-windows:before{content:"\\F17A"}.fa-android:before{content:"\\F17B"}.fa-linux:before{content:"\\F17C"}.fa-dribbble:before{content:"\\F17D"}.fa-skype:before{content:"\\F17E"}.fa-foursquare:before{content:"\\F180"}.fa-trello:before{content:"\\F181"}.fa-female:before{content:"\\F182"}.fa-male:before{content:"\\F183"}.fa-gittip:before,.fa-gratipay:before{content:"\\F184"}.fa-sun-o:before{content:"\\F185"}.fa-moon-o:before{content:"\\F186"}.fa-archive:before{content:"\\F187"}.fa-bug:before{content:"\\F188"}.fa-vk:before{content:"\\F189"}.fa-weibo:before{content:"\\F18A"}.fa-renren:before{content:"\\F18B"}.fa-pagelines:before{content:"\\F18C"}.fa-stack-exchange:before{content:"\\F18D"}.fa-arrow-circle-o-right:before{content:"\\F18E"}.fa-arrow-circle-o-left:before{content:"\\F190"}.fa-caret-square-o-left:before,.fa-toggle-left:before{content:"\\F191"}.fa-dot-circle-o:before{content:"\\F192"}.fa-wheelchair:before{content:"\\F193"}.fa-vimeo-square:before{content:"\\F194"}.fa-try:before,.fa-turkish-lira:before{content:"\\F195"}.fa-plus-square-o:before{content:"\\F196"}.fa-space-shuttle:before{content:"\\F197"}.fa-slack:before{content:"\\F198"}.fa-envelope-square:before{content:"\\F199"}.fa-wordpress:before{content:"\\F19A"}.fa-openid:before{content:"\\F19B"}.fa-bank:before,.fa-institution:before,.fa-university:before{content:"\\F19C"}.fa-graduation-cap:before,.fa-mortar-board:before{content:"\\F19D"}.fa-yahoo:before{content:"\\F19E"}.fa-google:before{content:"\\F1A0"}.fa-reddit:before{content:"\\F1A1"}.fa-reddit-square:before{content:"\\F1A2"}.fa-stumbleupon-circle:before{content:"\\F1A3"}.fa-stumbleupon:before{content:"\\F1A4"}.fa-delicious:before{content:"\\F1A5"}.fa-digg:before{content:"\\F1A6"}.fa-pied-piper-pp:before{content:"\\F1A7"}.fa-pied-piper-alt:before{content:"\\F1A8"}.fa-drupal:before{content:"\\F1A9"}.fa-joomla:before{content:"\\F1AA"}.fa-language:before{content:"\\F1AB"}.fa-fax:before{content:"\\F1AC"}.fa-building:before{content:"\\F1AD"}.fa-child:before{content:"\\F1AE"}.fa-paw:before{content:"\\F1B0"}.fa-spoon:before{content:"\\F1B1"}.fa-cube:before{content:"\\F1B2"}.fa-cubes:before{content:"\\F1B3"}.fa-behance:before{content:"\\F1B4"}.fa-behance-square:before{content:"\\F1B5"}.fa-steam:before{content:"\\F1B6"}.fa-steam-square:before{content:"\\F1B7"}.fa-recycle:before{content:"\\F1B8"}.fa-automobile:before,.fa-car:before{content:"\\F1B9"}.fa-cab:before,.fa-taxi:before{content:"\\F1BA"}.fa-tree:before{content:"\\F1BB"}.fa-spotify:before{content:"\\F1BC"}.fa-deviantart:before{content:"\\F1BD"}.fa-soundcloud:before{content:"\\F1BE"}.fa-database:before{content:"\\F1C0"}.fa-file-pdf-o:before{content:"\\F1C1"}.fa-file-word-o:before{content:"\\F1C2"}.fa-file-excel-o:before{content:"\\F1C3"}.fa-file-powerpoint-o:before{content:"\\F1C4"}.fa-file-image-o:before,.fa-file-photo-o:before,.fa-file-picture-o:before{content:"\\F1C5"}.fa-file-archive-o:before,.fa-file-zip-o:before{content:"\\F1C6"}.fa-file-audio-o:before,.fa-file-sound-o:before{content:"\\F1C7"}.fa-file-movie-o:before,.fa-file-video-o:before{content:"\\F1C8"}.fa-file-code-o:before{content:"\\F1C9"}.fa-vine:before{content:"\\F1CA"}.fa-codepen:before{content:"\\F1CB"}.fa-jsfiddle:before{content:"\\F1CC"}.fa-life-bouy:before,.fa-life-buoy:before,.fa-life-ring:before,.fa-life-saver:before,.fa-support:before{content:"\\F1CD"}.fa-circle-o-notch:before{content:"\\F1CE"}.fa-ra:before,.fa-rebel:before,.fa-resistance:before{content:"\\F1D0"}.fa-empire:before,.fa-ge:before{content:"\\F1D1"}.fa-git-square:before{content:"\\F1D2"}.fa-git:before{content:"\\F1D3"}.fa-hacker-news:before,.fa-y-combinator-square:before,.fa-yc-square:before{content:"\\F1D4"}.fa-tencent-weibo:before{content:"\\F1D5"}.fa-qq:before{content:"\\F1D6"}.fa-wechat:before,.fa-weixin:before{content:"\\F1D7"}.fa-paper-plane:before,.fa-send:before{content:"\\F1D8"}.fa-paper-plane-o:before,.fa-send-o:before{content:"\\F1D9"}.fa-history:before{content:"\\F1DA"}.fa-circle-thin:before{content:"\\F1DB"}.fa-header:before{content:"\\F1DC"}.fa-paragraph:before{content:"\\F1DD"}.fa-sliders:before{content:"\\F1DE"}.fa-share-alt:before{content:"\\F1E0"}.fa-share-alt-square:before{content:"\\F1E1"}.fa-bomb:before{content:"\\F1E2"}.fa-futbol-o:before,.fa-soccer-ball-o:before{content:"\\F1E3"}.fa-tty:before{content:"\\F1E4"}.fa-binoculars:before{content:"\\F1E5"}.fa-plug:before{content:"\\F1E6"}.fa-slideshare:before{content:"\\F1E7"}.fa-twitch:before{content:"\\F1E8"}.fa-yelp:before{content:"\\F1E9"}.fa-newspaper-o:before{content:"\\F1EA"}.fa-wifi:before{content:"\\F1EB"}.fa-calculator:before{content:"\\F1EC"}.fa-paypal:before{content:"\\F1ED"}.fa-google-wallet:before{content:"\\F1EE"}.fa-cc-visa:before{content:"\\F1F0"}.fa-cc-mastercard:before{content:"\\F1F1"}.fa-cc-discover:before{content:"\\F1F2"}.fa-cc-amex:before{content:"\\F1F3"}.fa-cc-paypal:before{content:"\\F1F4"}.fa-cc-stripe:before{content:"\\F1F5"}.fa-bell-slash:before{content:"\\F1F6"}.fa-bell-slash-o:before{content:"\\F1F7"}.fa-trash:before{content:"\\F1F8"}.fa-copyright:before{content:"\\F1F9"}.fa-at:before{content:"\\F1FA"}.fa-eyedropper:before{content:"\\F1FB"}.fa-paint-brush:before{content:"\\F1FC"}.fa-birthday-cake:before{content:"\\F1FD"}.fa-area-chart:before{content:"\\F1FE"}.fa-pie-chart:before{content:"\\F200"}.fa-line-chart:before{content:"\\F201"}.fa-lastfm:before{content:"\\F202"}.fa-lastfm-square:before{content:"\\F203"}.fa-toggle-off:before{content:"\\F204"}.fa-toggle-on:before{content:"\\F205"}.fa-bicycle:before{content:"\\F206"}.fa-bus:before{content:"\\F207"}.fa-ioxhost:before{content:"\\F208"}.fa-angellist:before{content:"\\F209"}.fa-cc:before{content:"\\F20A"}.fa-ils:before,.fa-shekel:before,.fa-sheqel:before{content:"\\F20B"}.fa-meanpath:before{content:"\\F20C"}.fa-buysellads:before{content:"\\F20D"}.fa-connectdevelop:before{content:"\\F20E"}.fa-dashcube:before{content:"\\F210"}.fa-forumbee:before{content:"\\F211"}.fa-leanpub:before{content:"\\F212"}.fa-sellsy:before{content:"\\F213"}.fa-shirtsinbulk:before{content:"\\F214"}.fa-simplybuilt:before{content:"\\F215"}.fa-skyatlas:before{content:"\\F216"}.fa-cart-plus:before{content:"\\F217"}.fa-cart-arrow-down:before{content:"\\F218"}.fa-diamond:before{content:"\\F219"}.fa-ship:before{content:"\\F21A"}.fa-user-secret:before{content:"\\F21B"}.fa-motorcycle:before{content:"\\F21C"}.fa-street-view:before{content:"\\F21D"}.fa-heartbeat:before{content:"\\F21E"}.fa-venus:before{content:"\\F221"}.fa-mars:before{content:"\\F222"}.fa-mercury:before{content:"\\F223"}.fa-intersex:before,.fa-transgender:before{content:"\\F224"}.fa-transgender-alt:before{content:"\\F225"}.fa-venus-double:before{content:"\\F226"}.fa-mars-double:before{content:"\\F227"}.fa-venus-mars:before{content:"\\F228"}.fa-mars-stroke:before{content:"\\F229"}.fa-mars-stroke-v:before{content:"\\F22A"}.fa-mars-stroke-h:before{content:"\\F22B"}.fa-neuter:before{content:"\\F22C"}.fa-genderless:before{content:"\\F22D"}.fa-facebook-official:before{content:"\\F230"}.fa-pinterest-p:before{content:"\\F231"}.fa-whatsapp:before{content:"\\F232"}.fa-server:before{content:"\\F233"}.fa-user-plus:before{content:"\\F234"}.fa-user-times:before{content:"\\F235"}.fa-bed:before,.fa-hotel:before{content:"\\F236"}.fa-viacoin:before{content:"\\F237"}.fa-train:before{content:"\\F238"}.fa-subway:before{content:"\\F239"}.fa-medium:before{content:"\\F23A"}.fa-y-combinator:before,.fa-yc:before{content:"\\F23B"}.fa-optin-monster:before{content:"\\F23C"}.fa-opencart:before{content:"\\F23D"}.fa-expeditedssl:before{content:"\\F23E"}.fa-battery-4:before,.fa-battery-full:before,.fa-battery:before{content:"\\F240"}.fa-battery-3:before,.fa-battery-three-quarters:before{content:"\\F241"}.fa-battery-2:before,.fa-battery-half:before{content:"\\F242"}.fa-battery-1:before,.fa-battery-quarter:before{content:"\\F243"}.fa-battery-0:before,.fa-battery-empty:before{content:"\\F244"}.fa-mouse-pointer:before{content:"\\F245"}.fa-i-cursor:before{content:"\\F246"}.fa-object-group:before{content:"\\F247"}.fa-object-ungroup:before{content:"\\F248"}.fa-sticky-note:before{content:"\\F249"}.fa-sticky-note-o:before{content:"\\F24A"}.fa-cc-jcb:before{content:"\\F24B"}.fa-cc-diners-club:before{content:"\\F24C"}.fa-clone:before{content:"\\F24D"}.fa-balance-scale:before{content:"\\F24E"}.fa-hourglass-o:before{content:"\\F250"}.fa-hourglass-1:before,.fa-hourglass-start:before{content:"\\F251"}.fa-hourglass-2:before,.fa-hourglass-half:before{content:"\\F252"}.fa-hourglass-3:before,.fa-hourglass-end:before{content:"\\F253"}.fa-hourglass:before{content:"\\F254"}.fa-hand-grab-o:before,.fa-hand-rock-o:before{content:"\\F255"}.fa-hand-paper-o:before,.fa-hand-stop-o:before{content:"\\F256"}.fa-hand-scissors-o:before{content:"\\F257"}.fa-hand-lizard-o:before{content:"\\F258"}.fa-hand-spock-o:before{content:"\\F259"}.fa-hand-pointer-o:before{content:"\\F25A"}.fa-hand-peace-o:before{content:"\\F25B"}.fa-trademark:before{content:"\\F25C"}.fa-registered:before{content:"\\F25D"}.fa-creative-commons:before{content:"\\F25E"}.fa-gg:before{content:"\\F260"}.fa-gg-circle:before{content:"\\F261"}.fa-tripadvisor:before{content:"\\F262"}.fa-odnoklassniki:before{content:"\\F263"}.fa-odnoklassniki-square:before{content:"\\F264"}.fa-get-pocket:before{content:"\\F265"}.fa-wikipedia-w:before{content:"\\F266"}.fa-safari:before{content:"\\F267"}.fa-chrome:before{content:"\\F268"}.fa-firefox:before{content:"\\F269"}.fa-opera:before{content:"\\F26A"}.fa-internet-explorer:before{content:"\\F26B"}.fa-television:before,.fa-tv:before{content:"\\F26C"}.fa-contao:before{content:"\\F26D"}.fa-500px:before{content:"\\F26E"}.fa-amazon:before{content:"\\F270"}.fa-calendar-plus-o:before{content:"\\F271"}.fa-calendar-minus-o:before{content:"\\F272"}.fa-calendar-times-o:before{content:"\\F273"}.fa-calendar-check-o:before{content:"\\F274"}.fa-industry:before{content:"\\F275"}.fa-map-pin:before{content:"\\F276"}.fa-map-signs:before{content:"\\F277"}.fa-map-o:before{content:"\\F278"}.fa-map:before{content:"\\F279"}.fa-commenting:before{content:"\\F27A"}.fa-commenting-o:before{content:"\\F27B"}.fa-houzz:before{content:"\\F27C"}.fa-vimeo:before{content:"\\F27D"}.fa-black-tie:before{content:"\\F27E"}.fa-fonticons:before{content:"\\F280"}.fa-reddit-alien:before{content:"\\F281"}.fa-edge:before{content:"\\F282"}.fa-credit-card-alt:before{content:"\\F283"}.fa-codiepie:before{content:"\\F284"}.fa-modx:before{content:"\\F285"}.fa-fort-awesome:before{content:"\\F286"}.fa-usb:before{content:"\\F287"}.fa-product-hunt:before{content:"\\F288"}.fa-mixcloud:before{content:"\\F289"}.fa-scribd:before{content:"\\F28A"}.fa-pause-circle:before{content:"\\F28B"}.fa-pause-circle-o:before{content:"\\F28C"}.fa-stop-circle:before{content:"\\F28D"}.fa-stop-circle-o:before{content:"\\F28E"}.fa-shopping-bag:before{content:"\\F290"}.fa-shopping-basket:before{content:"\\F291"}.fa-hashtag:before{content:"\\F292"}.fa-bluetooth:before{content:"\\F293"}.fa-bluetooth-b:before{content:"\\F294"}.fa-percent:before{content:"\\F295"}.fa-gitlab:before{content:"\\F296"}.fa-wpbeginner:before{content:"\\F297"}.fa-wpforms:before{content:"\\F298"}.fa-envira:before{content:"\\F299"}.fa-universal-access:before{content:"\\F29A"}.fa-wheelchair-alt:before{content:"\\F29B"}.fa-question-circle-o:before{content:"\\F29C"}.fa-blind:before{content:"\\F29D"}.fa-audio-description:before{content:"\\F29E"}.fa-volume-control-phone:before{content:"\\F2A0"}.fa-braille:before{content:"\\F2A1"}.fa-assistive-listening-systems:before{content:"\\F2A2"}.fa-american-sign-language-interpreting:before,.fa-asl-interpreting:before{content:"\\F2A3"}.fa-deaf:before,.fa-deafness:before,.fa-hard-of-hearing:before{content:"\\F2A4"}.fa-glide:before{content:"\\F2A5"}.fa-glide-g:before{content:"\\F2A6"}.fa-sign-language:before,.fa-signing:before{content:"\\F2A7"}.fa-low-vision:before{content:"\\F2A8"}.fa-viadeo:before{content:"\\F2A9"}.fa-viadeo-square:before{content:"\\F2AA"}.fa-snapchat:before{content:"\\F2AB"}.fa-snapchat-ghost:before{content:"\\F2AC"}.fa-snapchat-square:before{content:"\\F2AD"}.fa-pied-piper:before{content:"\\F2AE"}.fa-first-order:before{content:"\\F2B0"}.fa-yoast:before{content:"\\F2B1"}.fa-themeisle:before{content:"\\F2B2"}.fa-google-plus-circle:before,.fa-google-plus-official:before{content:"\\F2B3"}.fa-fa:before,.fa-font-awesome:before{content:"\\F2B4"}.fa-handshake-o:before{content:"\\F2B5"}.fa-envelope-open:before{content:"\\F2B6"}.fa-envelope-open-o:before{content:"\\F2B7"}.fa-linode:before{content:"\\F2B8"}.fa-address-book:before{content:"\\F2B9"}.fa-address-book-o:before{content:"\\F2BA"}.fa-address-card:before,.fa-vcard:before{content:"\\F2BB"}.fa-address-card-o:before,.fa-vcard-o:before{content:"\\F2BC"}.fa-user-circle:before{content:"\\F2BD"}.fa-user-circle-o:before{content:"\\F2BE"}.fa-user-o:before{content:"\\F2C0"}.fa-id-badge:before{content:"\\F2C1"}.fa-drivers-license:before,.fa-id-card:before{content:"\\F2C2"}.fa-drivers-license-o:before,.fa-id-card-o:before{content:"\\F2C3"}.fa-quora:before{content:"\\F2C4"}.fa-free-code-camp:before{content:"\\F2C5"}.fa-telegram:before{content:"\\F2C6"}.fa-thermometer-4:before,.fa-thermometer-full:before,.fa-thermometer:before{content:"\\F2C7"}.fa-thermometer-3:before,.fa-thermometer-three-quarters:before{content:"\\F2C8"}.fa-thermometer-2:before,.fa-thermometer-half:before{content:"\\F2C9"}.fa-thermometer-1:before,.fa-thermometer-quarter:before{content:"\\F2CA"}.fa-thermometer-0:before,.fa-thermometer-empty:before{content:"\\F2CB"}.fa-shower:before{content:"\\F2CC"}.fa-bath:before,.fa-bathtub:before,.fa-s15:before{content:"\\F2CD"}.fa-podcast:before{content:"\\F2CE"}.fa-window-maximize:before{content:"\\F2D0"}.fa-window-minimize:before{content:"\\F2D1"}.fa-window-restore:before{content:"\\F2D2"}.fa-times-rectangle:before,.fa-window-close:before{content:"\\F2D3"}.fa-times-rectangle-o:before,.fa-window-close-o:before{content:"\\F2D4"}.fa-bandcamp:before{content:"\\F2D5"}.fa-grav:before{content:"\\F2D6"}.fa-etsy:before{content:"\\F2D7"}.fa-imdb:before{content:"\\F2D8"}.fa-ravelry:before{content:"\\F2D9"}.fa-eercast:before{content:"\\F2DA"}.fa-microchip:before{content:"\\F2DB"}.fa-snowflake-o:before{content:"\\F2DC"}.fa-superpowers:before{content:"\\F2DD"}.fa-wpexplorer:before{content:"\\F2DE"}.fa-meetup:before{content:"\\F2E0"}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}',""])},function(e,t,n){e.exports=n.p+"674f50d287a8c48dc19ba404d20fe713.eot"},function(e,t,n){e.exports=n.p+"674f50d287a8c48dc19ba404d20fe713.eot"},function(e,t,n){e.exports=n.p+"af7ae505a9eed503f8b8e6982036873e.woff2"},function(e,t,n){e.exports=n.p+"fee66e712a8a08eef5805a46892932ad.woff"},function(e,t,n){e.exports=n.p+"b06871f281fee6b241d60582ae9369b9.ttf"},function(e,t,n){e.exports=n.p+"912ec66d7572ff821749319396470bde.svg"},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e){var t=e.onClose;return s.default.createElement(d.default,null,s.default.createElement("div",{className:b.default.MailModal},"You can contact me using the following address:",s.default.createElement("br",null),s.default.createElement("input",{type:"text",value:function(){return"a.j.rouvoet@tudelft.nl"}()}),s.default.createElement("br",null),s.default.createElement("div",{className:b.default.MailModalButtons},s.default.createElement("button",{className:b.default.MailModalClose,onClick:t},"Close"))))}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),s=r(c),f=n(2),p=(r(f),n(58)),d=r(p),h=n(60),b=r(h),m=function(e){function t(e){a(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={mailModal:!1},n.toggleMailModal=function(){n.setState({mailModal:!n.state.mailModal})},n}return i(t,e),u(t,[{key:"render",value:function(){return s.default.createElement("div",{className:b.default.Profile},this.state.mailModal&&s.default.createElement(l,{onClose:this.toggleMailModal}),s.default.createElement("h1",{className:b.default.title},"Arjen Rouvoet"),s.default.createElement("p",null,"I'm a doctoral candidate at Technical University Delft with a growing interest in type theory and all things attached."),s.default.createElement("h3",null,"Professional interests"),s.default.createElement("ul",{className:b.default.interests},s.default.createElement("li",null,"type theory"),s.default.createElement("li",null,"proof assistants"),s.default.createElement("li",null,"language semantics"),s.default.createElement("li",null,"verified compilation"),s.default.createElement("li",null,"verification"),s.default.createElement("li",null,"programming languages")),s.default.createElement("h3",null,"Personal interests"),s.default.createElement("ul",{className:b.default.interests},s.default.createElement("li",null,"chess"),s.default.createElement("li",null,"bouldering"),s.default.createElement("li",null,"music")),s.default.createElement("div",{className:b.default.contact},s.default.createElement("h3",null,"Contact me"),s.default.createElement("ul",null,s.default.createElement("li",null,s.default.createElement("a",{href:"https://github.com/ajrouvoet"},s.default.createElement("span",{className:"fa fa-github"}))),s.default.createElement("li",null,s.default.createElement("a",{href:"https://www.linkedin.com/in/arjen-rouvoet/"},s.default.createElement("span",{className:"fa fa-linkedin"}))),s.default.createElement("li",null,s.default.createElement("a",{onClick:this.toggleMailModal},s.default.createElement("span",{className:"fa fa-envelope"}))))))}}]),t}(c.Component);t.default=m},function(e,t,n){"use strict";var r=n(55),a=n(56),o=n(57);e.exports=function(){function e(e,t,n,r,i,l){l!==o&&a(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";function r(e){return function(){return e}}var a=function(){};a.thatReturns=r,a.thatReturnsFalse=r(!1),a.thatReturnsTrue=r(!0),a.thatReturnsNull=r(null),a.thatReturnsThis=function(){return this},a.thatReturnsArgument=function(e){return e},e.exports=a},function(e,t,n){"use strict";function r(e,t,n,r,o,i,l,u){if(a(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,l,u],f=0;c=new Error(t.replace(/%s/g,function(){return s[f++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var a=function(e){};e.exports=r},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),c=r(u),s=n(8),f=r(s),p=n(2),d=(r(p),n(59)),h=r(d),b=document.getElementById("overlay"),m=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"render",value:function(){var e=this.props.children,t=c.default.createElement("div",{className:h.default.ModalOverlay},c.default.createElement("div",{className:h.default.ModalBody},e));return f.default.createPortal(t,b)}}]),t}(u.Component);t.default=m},function(e,t){e.exports={ModalOverlay:"Modal__ModalOverlay__3nSKO",ModalBody:"Modal__ModalBody__1xdBZ"}},function(e,t){e.exports={title:"Profile__title__OkKdi",Profile:"Profile__Profile__1ZP87",interests:"Profile__interests__2orGS",contact:"Profile__contact__32AhX",MailModal:"Profile__MailModal__3Lk1G",MailModalButtons:"Profile__MailModalButtons__1wmB1",MailModalClose:"Profile__MailModalClose__2ahXi"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),c=(r(u),n(1)),s=(r(c),n(63)),f=(r(s),function(e){function t(e){a(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n}return i(t,e),l(t,[{key:"render",value:function(){return null}}]),t}(u.Component));t.default=f},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports={Canvas:"Background__Canvas__G-BJl"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.Publications=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(0),s=r(c),f=n(2),p=r(f),d=n(1),h=r(d),b=n(65),m=r(b),g=n(66),v=r(g),y=n(67),w=r(y),_=n(16),k=r(_),x=n(17),E=r(x),F=n(18),T=r(F),S=function(e){function t(e){o(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={fold:!1,hover:!1},n.toggle=function(){},n.onHover=function(){n.setState({hover:!0})},n.onHoverOut=function(){},n}return l(t,e),u(t,[{key:"render",value:function(){var e,t=this.props.text,n=(0,m.default)(v.default.Abstract,(e={},a(e,v.default.fold,this.state.fold),a(e,v.default.unfold,!this.state.fold),a(e,v.default.hover,this.state.hover),e));return s.default.createElement("div",{className:n,onMouseOver:this.onHover,onMouseOut:this.onHoverOut,onClick:this.toggle},s.default.createElement(k.default,null,t))}}]),t}(c.Component);S.propTypes={text:p.default.string.isRequired};var C=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return l(t,e),u(t,[{key:"render",value:function(){var e=this.props.pub;return s.default.createElement("li",{className:v.default.Publication},s.default.createElement("h3",null,e.title),s.default.createElement("h4",null,e.subtitle),s.default.createElement("p",null),s.default.createElement(w.default,null,h.default.map(e.authors,function(e,t){return s.default.createElement("li",{key:t},s.default.createElement(E.default,{author:e}))})),s.default.createElement(S,{text:e.abstract}),s.default.createElement("ul",{className:v.default.Links},h.default.map(e.links,function(e,t){return s.default.createElement("li",{key:t},s.default.createElement(T.default,{type:t,href:e}))})))}}]),t}(c.Component);C.propTypes={pub:p.default.object.isRequired},t.default=C,(t.Publications=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return l(t,e),u(t,[{key:"render",value:function(){var e=this.props.pubs;return s.default.createElement("ol",null,h.default.map(e,function(e,t){return s.default.createElement(C,{key:t,pub:e})}))}}]),t}(c.Component)).propTypes={pubs:p.default.arrayOf(p.default.object)}},function(e,t,n){var r,a;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";function n(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r))e.push(n.apply(null,r));else if("object"===a)for(var i in r)o.call(r,i)&&r[i]&&e.push(i)}}return e.join(" ")}var o={}.hasOwnProperty;void 0!==e&&e.exports?e.exports=n:(r=[],void 0!==(a=function(){return n}.apply(t,r))&&(e.exports=a))}()},function(e,t){e.exports={Abstract:"Publications__Abstract__2rEDJ",fold:"Publications__fold__Es3DN",unfold:"Publications__unfold__3SEfv",hover:"Publications__hover__2WyM0",Publication:"Publications__Publication__2hJ6y",Links:"Publications__Links__AyIcH"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){var t=e.children;return i.default.createElement("ol",{className:c.default.Commalist},t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var o=n(0),i=r(o),l=n(1),u=(r(l),n(68)),c=r(u)},function(e,t){e.exports={Commalist:"Commalist__Commalist__1rQ_Z"}},function(e,t){e.exports={Author:"Author__Author__3120d"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){var t=e.news;return i.default.createElement("ol",{className:s.default.News},u.default.map(u.default.take(t,3),function(e,t){var n=e.title,r=e.date;return i.default.createElement("li",{key:t,className:s.default.NewsItem},i.default.createElement("div",{className:s.default.NewsItemBorder}),i.default.createElement("div",{className:s.default.NewsItemBody},i.default.createElement("h1",{dangerouslySetInnerHTML:{__html:n}}),i.default.createElement("span",{className:s.default.NewsDate},r)))}))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var o=n(0),i=r(o),l=n(1),u=r(l),c=n(71),s=r(c)},function(e,t){e.exports={News:"News__News__1hVQp",NewsItem:"News__NewsItem__27nUY",NewsItemBody:"News__NewsItemBody__2IsbO",NewsDate:"News__NewsDate__mZblU"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(){return s.default.createElement("ol",{className:b.default.BlogHeader},d.default.map(k,function(e){var t=u(e,2),n=t[0],r=t[1],a=r.draft,o=r.date,i=r.title;r.content;return a?s.default.createElement("li",{key:n},s.default.createElement(f.Link,{to:"/blog/"+n},s.default.createElement("span",null,i)," ",s.default.createElement("i",null,"(",o,")"))):null}))}function o(e){var t=e.content;return s.default.createElement("div",{dangerouslySetInnerHTML:{__html:t},className:g.default.WithCode+" "+b.default.PostBody})}function i(){var e=(0,f.useParams)(),t=e.post;if(x[t]){var n=x[t].content;return s.default.createElement(o,{content:n})}return s.default.createElement("div",null,"404")}function l(){var e=(0,f.useRouteMatch)(),t=e.path;e.url;return s.default.createElement("div",{className:b.default.Blog},s.default.createElement("div",{className:b.default.Wrapper},s.default.createElement(f.Switch,null,s.default.createElement(f.Route,{exact:!0,path:t},d.default.map(k,function(e){var t=u(e,2),n=t[0],r=t[1],a=r.content;return r.draft?s.default.createElement(o,{key:n,content:a}):null})),s.default.createElement(f.Route,{exact:!0,path:t+"/:post"},s.default.createElement(i,null)))))}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&l.return&&l.return()}finally{if(a)throw o}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.BlogIndex=a,t.default=l;var c=n(0),s=r(c),f=n(9),p=n(1),d=r(p),h=n(73),b=r(h),m=n(74),g=r(m),v=n(75),y=r(v),w=n(76),_=r(w),k=[["artifact-vms",{date:"August 25 2020",title:"Preparing Software Artifacts using QEMU",content:_.default}],["shaken-not-made",{date:"August 19 2020",title:"Shaken not Made",content:y.default,draft:!0}]],x=d.default.fromPairs(k)},function(e,t){e.exports={Blog:"Blog__Blog__1Ylnf",BlogHeader:"Blog__BlogHeader__183bX",Wrapper:"Blog__Wrapper__3J3pv",PostBody:"Blog__PostBody__2PVOU"}},function(e,t){e.exports={WithCode:"shaken-not-made__WithCode__3mXzA"}},function(e,t){e.exports='<h1 class="title" id="shaken-not-made"><a href="#/blog/shaken-not-made">Shaken Not Made</a></h1> <h2 class="subtitle" id="better-glue-code-using-haskell-and-shake">Better Glue Code using Haskell and Shake</h2> <p>Arjen Rouvoet – August 19 2020</p> <hr/> <p>Recently, I prepared an <a href="https://github.com/metaborgcube/java.mstx">artifact</a> for a conference. This artifact consisted of some software packages and a test suite, which was animated using a makefile and a bash script. As is often the case, this bit of shell script started out modest, but over time grew out into a significant bit of software. Not huge, but big enough to be considered more than glue code. This soon turns into a maintenance burden (if not nightmare), exemplified best by bugs caused by different versions of shell utilities between linuxes and macs.</p> <p>There are various ways to dev-op your way out of this. For example, using a <a href="https://nixos.org/">Nix</a> development shell. In this blog post I will present an approach using Haskell and <a href="https://shakebuild.com/">Shake</a> instead of Bash and Make. This way we get all the benefits of a strongly typed language with an ecosystem of mature packages.</p> <p>First, I will summarize the task we have to automate. Of course, these techniques are applicable to all kinds of tasks! Then I will present the Haskell script that does the job. At the end of this blog post you should have a good idea of how one automates a bunch of tasks using Shake, and how this compares to Make and Shell scripting. This post is not for learning Haskell.</p> <h2 id="the-task-to-automate">The Task to Automate</h2> <p>We want to automate the task of running a test suite. The tests consist of a set of java programs, together with an expectation for the outcome of type checking these programs using two different type checkers: Javac and Statix. To keep things neat, we describe the whole test in a single file, formatted like this:</p> <pre><code>STATIX fail some.*regex on the output\nJAVAC  fail some.*regex on the output\n\n[p/A.java]\npackage p;\nclass A {...}\n\n[p/B.java]\npackage p;\nclass B extends A {...}\n\n[...etc]</code></pre> <p>To execute this test, we need to:</p> <ol type="1"> <li>Parse this format</li> <li>Create a build directory</li> <li>Write the java files to that directory</li> <li>Execute <code>javac</code> on the set of java files.</li> <li>Check and record the output of <code>javac</code>.</li> <li>Execute <code>java2aterm</code> that creates <code>.aterm</code> files for every <code>.java</code> file.</li> <li>Execute <code>statix</code> on the set of <code>.aterm</code> files.</li> <li>Check and record the output of <code>statix</code>.</li> <li>Check that both executions succeeded, and record the test outcome.</li> </ol> <p>The bash script that we used previously that did most of the work (but did not support test expectations) was ~150 lines of code. It used <code>awk</code> to parse the test format, and—as is the nature of shell scripting—a lot of other kinds of text manipulation to accomplish its task. As a result, it was hard to maintain, hard to stabilize across users, and not very reliable. When anything goes wrong, running <code>make clean</code> and starting over was the recommended way of proceeding.</p> <p>A complication is that the <code>java2aterm</code> parser is very slow, so we want to reuse the aterm on subsequent test runs <em>if and only if</em> the java files did not change—i.e., we need an <em>incremental</em> test runner. Usually one might use <code>make</code> for this, but the targets are <em>dynamic</em>—i.e., one needs to first parse the test file to determine which java/aterm files to make. Doing this with make requires staging, yielding a complicated setup.</p> <p>When we also wanted to add test expectations, to avoid false positives, we decided it would be better to replace the runner entirely with something more reliable.</p> <h2 id="using-haskell-and-shake">Using Haskell and Shake</h2> <p>How does one make a script more robust, portable, and maintainable? My unbiased view on this is simple: you implement it in a language with a strong type system and a mature package ecosystem. Enter Haskell. How do we get reliable, incremental test runs? We use a scriptable build system. Enter Shake.</p> <p>Shake is like Make, but as an <em>embedded domain specific language</em> (EDSL) in Haskell. The main benefit of using a Haskell EDSL is that you can leverage arbitrary Haskell code (and libraries) to do complicated processing in a typed manner. For example, we can use the Parsec parser combinator library to parse the above test format. This may appear as heavy-weight, but the result is a single Haskell script of a mere ~180 lines of Haskell. The 30 line increase in size is due to having more features (supporting test expectations), <em>not</em> due to overhead of the language!</p> <p>To accomplish this, we set up a Haskell script as follows (if you want to hack along, then peek at the Stack setup at the end of this post):</p> <div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>(<span class="op">...</span>)</span>\n<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>\n<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Development.Shake</span></span>\n<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Development.Shake.Command</span></span>\n<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Development.Shake.FilePath</span></span>\n<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Development.Shake.Util</span></span>\n<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a></span>\n<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expect</span> <span class="ot">=</span> <span class="dt">ExpectOK</span> <span class="op">|</span> <span class="dt">ExpectFail</span> <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>\n<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Test</span> <span class="ot">=</span> <span class="dt">Test</span></span>\n<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>  {<span class="ot"> path   ::</span> <span class="dt">FilePath</span></span>\n<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>  ,<span class="ot"> files  ::</span> [(<span class="dt">String</span>, <span class="dt">String</span>)] <span class="co">-- filename , contents</span></span>\n<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>  ,<span class="ot"> javac  ::</span> <span class="dt">Expect</span></span>\n<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>  ,<span class="ot"> statix ::</span> <span class="dt">Expect</span></span>\n<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>  } <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>\n<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a></span>\n<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>\n<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>\n<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>  args <span class="ot">&lt;-</span> getArgs</span>\n<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>  <span class="kw">case</span> args <span class="kw">of</span></span>\n<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>    []      <span class="ot">-&gt;</span> die <span class="st">&quot;Missing argument: runner &lt;input.test&gt;&quot;</span></span>\n<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a>    test<span class="op">:</span>_  <span class="ot">-&gt;</span> runTest test</span>\n<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a></span>\n<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a><span class="ot">runTest ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>\n<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a>runTest testPath <span class="ot">=</span> <span class="kw">do</span></span>\n<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a>    <span class="co">-- (1) parse test format</span></span>\n<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a>    <span class="co">-- Details of the parser omitted (link to complete script at the end),</span></span>\n<span id="cb2-27"><a href="#cb2-27" aria-hidden="true"></a>    <span class="co">-- but it is implemented using the Parsec library.</span></span>\n<span id="cb2-28"><a href="#cb2-28" aria-hidden="true"></a>    txt        <span class="ot">&lt;-</span> <span class="fu">pack</span> <span class="op">&lt;$&gt;</span> <span class="fu">readFile</span></span>\n<span id="cb2-29"><a href="#cb2-29" aria-hidden="true"></a>    <span class="kw">let</span> result <span class="ot">=</span>  parse (parseTest testPath) testPath txt</span>\n<span id="cb2-30"><a href="#cb2-30" aria-hidden="true"></a>    test       <span class="ot">&lt;-</span> <span class="kw">case</span> result <span class="kw">of</span></span>\n<span id="cb2-31"><a href="#cb2-31" aria-hidden="true"></a>      <span class="dt">Left</span> err   <span class="ot">-&gt;</span> die <span class="op">$</span> <span class="st">&quot;Could not parse test: &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> err</span>\n<span id="cb2-32"><a href="#cb2-32" aria-hidden="true"></a>      <span class="dt">Right</span> test <span class="ot">-&gt;</span> <span class="fu">return</span> test</span>\n<span id="cb2-33"><a href="#cb2-33" aria-hidden="true"></a></span>\n<span id="cb2-34"><a href="#cb2-34" aria-hidden="true"></a>    <span class="co">-- (2) create java files in build directory</span></span>\n<span id="cb2-35"><a href="#cb2-35" aria-hidden="true"></a>    forM_ (files test) <span class="op">$</span> \\(fname, content) <span class="ot">-&gt;</span></span>\n<span id="cb2-36"><a href="#cb2-36" aria-hidden="true"></a>      writeFileChanged (buildDir <span class="op">&lt;/&gt;</span> fname) content</span>\n<span id="cb2-37"><a href="#cb2-37" aria-hidden="true"></a></span>\n<span id="cb2-38"><a href="#cb2-38" aria-hidden="true"></a>    <span class="co">-- Let Shake do the remainder of the incremental build</span></span>\n<span id="cb2-39"><a href="#cb2-39" aria-hidden="true"></a>    shake shakeOptions</span>\n<span id="cb2-40"><a href="#cb2-40" aria-hidden="true"></a>      { shakeFiles  <span class="ot">=</span> buildDir</span>\n<span id="cb2-41"><a href="#cb2-41" aria-hidden="true"></a>      , shakeChange <span class="ot">=</span> <span class="dt">ChangeDigest</span></span>\n<span id="cb2-42"><a href="#cb2-42" aria-hidden="true"></a>      }</span>\n<span id="cb2-43"><a href="#cb2-43" aria-hidden="true"></a>      rules</span></code></pre></div> <p>The runner has a simple command-line interface that takes a single test as input. We then parse that test and create the files in a build directory. Hereby we make use of the Shake utility <code>writeFileChanged</code> that only writes the file if the content is modified. This ensures that the build is incremental.</p> <p>Then we invoke Shake’s main <code>shake</code> to do the heavy lifting. The options we pass sets the directory where shake stores its state to the build directory, and enables change detection based on digests rather than by modification times, which is the default (and could also be a fine choice, since we used <code>writeFileChanged</code> anyway).</p> <p>We now focus on the <code>rules :: Rules ()</code> that automate the incremental build, and explain the steps inline:</p> <div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">rules ::</span> <span class="dt">Rules</span> ()</span>\n<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>rules <span class="dt">Test</span>{ path, files, javac, statix } <span class="ot">=</span> <span class="kw">do</span></span>\n<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>\n<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>  <span class="co">-- We compute the location of the java and aterm files using</span></span>\n<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>  <span class="co">-- list comprehension and the operator (-&lt;.&gt;) which replaces</span></span>\n<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>  <span class="co">-- file extensions:</span></span>\n<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>  <span class="kw">let</span> javaFiles  <span class="ot">=</span> [ buildDir <span class="op">&lt;/&gt;</span> j <span class="op">|</span> (j, _) <span class="ot">&lt;-</span> files ]</span>\n<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>  <span class="kw">let</span> aterms     <span class="ot">=</span> [ j <span class="op">-&lt;.&gt;</span> <span class="st">&quot;aterm&quot;</span> <span class="op">|</span> j <span class="ot">&lt;-</span> javafiles ]</span>\n<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a></span>\n<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>  <span class="kw">let</span> result     <span class="ot">=</span> buildDir <span class="op">&lt;/&gt;</span> <span class="st">&quot;result&quot;</span></span>\n<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a></span>\n<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>  <span class="co">-- Now we inform shake that we want to build the result:</span></span>\n<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>  <span class="co">-- Even before we tell it how it can build this target.</span></span>\n<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>  want [ result ]</span>\n<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a></span>\n<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>  (<span class="op">...</span>more to follow)</span></code></pre></div> <p>Having informed Shake of <em>what</em> we want, we now have to inform it about <em>how</em> to get it. This is done with make-like rules, as follows:</p> <div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>  <span class="co">-- A build rule has a similar structure as a make rule, with the target on the</span></span>\n<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  <span class="co">-- left of the (%&gt;) combinator. The `out` variable contains the path to write to.</span></span>\n<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  result <span class="op">%&gt;</span> \\out <span class="ot">-&gt;</span> <span class="kw">do</span></span>\n<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a></span>\n<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    <span class="co">-- We always run this rule, so that the test result is always outputted.</span></span>\n<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="co">-- This is fine, because it basically just reads back the results of other rules.</span></span>\n<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>    <span class="co">-- Can you recall how to do this with Make? ;-)</span></span>\n<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    alwaysRerun</span>\n<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a></span>\n<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>    <span class="co">-- We read the output of Javac and Statix.</span></span>\n<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>    <span class="co">-- The use of readFile&#39; informs Shake that these files are dependencies.</span></span>\n<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>    stxRex <span class="ot">&lt;-</span> readFile&#39; <span class="op">$</span> buildDir <span class="op">&lt;/&gt;</span> <span class="st">&quot;stx.result&quot;</span></span>\n<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    stxRex <span class="ot">&lt;-</span> readFile&#39; <span class="op">$</span> buildDir <span class="op">&lt;/&gt;</span> <span class="st">&quot;java.result&quot;</span></span>\n<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a></span>\n<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>    <span class="co">-- Compute the combined result</span></span>\n<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>    <span class="kw">let</span> res <span class="ot">=</span> resultString <span class="op">$</span> stxRes <span class="op">==</span> <span class="st">&quot;SUCCESS&quot;</span> <span class="op">&amp;&amp;</span> javaRes <span class="op">==</span> <span class="st">&quot;SUCCESS&quot;</span></span>\n<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>    writeFileChanged out res</span>\n<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a></span>\n<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>    <span class="co">-- Output the test result</span></span>\n<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;[&quot;</span> <span class="op">&lt;&gt;</span> res <span class="op">&lt;&gt;</span> <span class="st">&quot;] &quot;</span> <span class="op">&lt;&gt;</span> testPath</span></code></pre></div> <p>This task thus describes how to build <code>result</code>, by reading some outputs from dependencies and combining them into a new output. Shake has <a href="https://hackage.haskell.org/package/shake-0.19.1">various functions</a> for adding dependencies and invoking shell functions.</p> <p>The above task depends on the files <code>{java,stx}.result</code>, which are produced by <code>javac</code> and <code>statix</code> respectively:</p> <div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>  <span class="co">-- From executing javac we will gather the output (stderr/out) and the result,</span></span>\n<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>  <span class="co">-- i.e., whether it has met our expectation of the run.</span></span>\n<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  <span class="co">-- Such rules with multiple outputs use the combinator `(&amp;%&gt;)`:</span></span>\n<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>  [ buildDir <span class="op">&lt;/&gt;</span> <span class="st">&quot;java.out&quot;</span> , buildDir <span class="op">&lt;/&gt;</span> <span class="st">&quot;java.result&quot;</span> ] <span class="op">&amp;%&gt;</span> \\[out, res] <span class="ot">-&gt;</span> <span class="kw">do</span></span>\n<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a></span>\n<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    <span class="co">-- We depend on the test and the set of javafiles:</span></span>\n<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    need [ testPath ]</span>\n<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    need javaFiles</span>\n<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a></span>\n<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>    <span class="co">-- We can then invoke javac using the Shake primitive `cmd`,</span></span>\n<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>    <span class="co">-- which is smart about combining/escaping arguments of various types,</span></span>\n<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>    <span class="co">-- so that we can simply write the following.</span></span>\n<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>    <span class="co">-- We capture the stdout and stderr in a single string `sout` on the LHS:</span></span>\n<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>    (<span class="dt">Exit</span> code, <span class="dt">Stdouterr</span> sout) <span class="ot">&lt;-</span> withVerbosity <span class="dt">Verbose</span> <span class="op">$</span></span>\n<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>                                     cmd <span class="st">&quot;javac -d&quot;</span> buildDir javaFiles</span>\n<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a></span>\n<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>    <span class="co">-- We write the sout to a target file for debugging purposes.</span></span>\n<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>    writeFileChanged out <span class="op">$</span> sout</span>\n<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a></span>\n<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>    <span class="co">-- We then check the exit code and the output against our test expectation.</span></span>\n<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>    <span class="co">-- And we write the result:</span></span>\n<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>    <span class="kw">let</span> result <span class="ot">=</span> resultString (checkJavaExpectation javac code sout)</span>\n<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>    writeFileChanged res result</span>\n<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a></span>\n<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>    <span class="co">-- Finally we output the result we computed for commandline user:</span></span>\n<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;[JAVA:&quot;</span> <span class="op">&lt;&gt;</span> result <span class="op">&lt;&gt;</span> <span class="st">&quot;] &quot;</span> <span class="op">&lt;&gt;</span> testPath</span>\n<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a></span>\n<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a></span>\n<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a>  <span class="co">-- The rule for Statix takes the same shape:</span></span>\n<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a>  [ buildDir <span class="op">&lt;/&gt;</span> <span class="st">&quot;stx.out&quot;</span> , buildDir <span class="op">&lt;/&gt;</span> <span class="st">&quot;stx.result&quot;</span> ] <span class="op">&amp;%&gt;</span> \\[out, res] <span class="ot">-&gt;</span> <span class="kw">do</span></span>\n<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a></span>\n<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a>    <span class="co">-- We depend on the aterms here, which are incrementally produced by a</span></span>\n<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a>    <span class="co">-- separate rule below:</span></span>\n<span id="cb5-34"><a href="#cb5-34" aria-hidden="true"></a>    need [ testPath ]</span>\n<span id="cb5-35"><a href="#cb5-35" aria-hidden="true"></a>    need aterms</span>\n<span id="cb5-36"><a href="#cb5-36" aria-hidden="true"></a></span>\n<span id="cb5-37"><a href="#cb5-37" aria-hidden="true"></a>    (<span class="op">...</span>)</span></code></pre></div> <p>The last task is similar to the <code>javac</code> one, except that it depends on some auxiliary files (the aterms). These can be produced using a globbing rule, similar to a make rule for <code>%.aterm</code>:</p> <div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>  <span class="co">-- Rules can glob, just like in make:</span></span>\n<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>  <span class="st">&quot;//*.aterm&quot;</span> <span class="op">%&gt;</span> \\out <span class="ot">-&gt;</span> <span class="kw">do</span></span>\n<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    <span class="kw">let</span> java <span class="ot">=</span> out <span class="op">-&lt;.&gt;</span> <span class="st">&quot;java&quot;</span></span>\n<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    need [ java ]</span>\n<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>\n<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>    <span class="co">-- We again use a command to produce the target.</span></span>\n<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>    <span class="co">-- This time we are not interested in the exitcodes/output, so we use `cmd_`</span></span>\n<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>    cmd_ <span class="st">&quot;java2aterm&quot;</span> java out</span></code></pre></div> <p>The example code used some auxiliary functions, which are just normal Haskell functions:</p> <div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="co">-- Auxiliary functions</span></span>\n<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="co">----------------------</span></span>\n<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a></span>\n<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="ot">resultString ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>\n<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>resultString ok <span class="ot">=</span> <span class="kw">if</span> ok <span class="kw">then</span> <span class="st">&quot;SUCCESS&quot;</span> <span class="kw">else</span> <span class="st">&quot;FAILURE&quot;</span></span>\n<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span>\n<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="co">-- Yes, you can use haskell libraries to implement these functions!</span></span>\n<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a><span class="ot">checkJavaExpectation ::</span> <span class="dt">Expect</span> <span class="ot">-&gt;</span> <span class="dt">ExitCode</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>\n<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>checkJavaExpectation <span class="ot">=</span> (<span class="op">...</span>)</span></code></pre></div> <p>This is quite similar to what you would try to do with <code>make</code> and shell scripts. But we were much less prone to making mistakes, because many are ruled out by the types. We also were able to make use of more powerful libraries to do the processing we needed to do. This integrates easily in the build system because the rules are written embedded in Haskell. Finally, this script is (potentially) much more portable, because we can easily pin down the versions of libraries and utilities that we depend on using Stack.</p> <h2 id="reproducible-and-portable-builds-using-stack">Reproducible and Portable Builds using Stack</h2> <p>To ensure that the build can be reproduced over time, and over different platforms, we have to pin down our Haskell dependencies (e.g., GHC, Shake, etc). Usually, people set up a project for this, using Cabal or Stack configurations. For a single script this is inconvenient, but we can get what we want anyway using Stack’s <code>ghc</code> command:</p> <div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ex">stack</span> ghc <span class="kw">\\</span></span>\n<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>  <span class="ex">--resolver</span> lts-16.10 <span class="kw">\\</span></span>\n<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  <span class="ex">--package</span> shake <span class="kw">\\</span></span>\n<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>  <span class="ex">--package</span> regex-base <span class="kw">\\</span></span>\n<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>  <span class="ex">--package</span> regex-tdfa <span class="kw">\\</span></span>\n<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>  <span class="ex">--package</span> (...)</span>\n<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>  <span class="ex">./runner.hs</span></span></code></pre></div> <p>That is: we use a given resolver to pin the version of our dependencies. We then instruct stack to build our script in an environment that includes the necessary Haskell packages. This creates a <code>./runner</code> executable.</p> <h2 id="conclusion">Conclusion</h2> <p>We engineered some glue code for a software artifact using Haskell and Shake, replacing Bash and Make. We took good care of our dependencies, just like we would for the rest of our artifact. This way, we maximize the reproducibility and portability of the code. And, equally important: we minimize the pain of getting it to work.</p> <h2 id="acknowledgments-and-apologies">Acknowledgments (and Apologies)</h2> <p>Thanks to Neil Mitchell for building and maintaining Shake, and for kindly answering my questions on the Github issue tracker.</p> <p>Apologies to my colleague <a href="https://gkonat.github.io/">Gabriel</a>, who recently build a competitive product called <a href="https://github.com/metaborg/pie">PIE</a>. PIE has better support for dynamic and transitive dependencies, and does change driven incremental builds, which are really cool features. However, unlike Shake it is not an <em>embedded</em> DSL, which is what I needed for this project.</p> <h2 id="references">References</h2> <ul> <li><a href="https://shakebuild.com">Shake documentation</a></li> <li><a href="https://docs.haskellstack.org/en/stable/README/">Stack documentation</a></li> <li><a href="https://github.com/MetaBorgCube/java.mstx/blob/master/tests/runner.hs">Complete runner.hs</a></li> </ul> '},function(e,t){e.exports='<h1 class="title" id="preparing-software-artifacts-using-qemu"><a href="#/blog/artifact-vms">Preparing Software Artifacts using QEMU</a></h1> <p>Arjen Rouvoet – August 25 2020</p> <hr/> <p>Unlike in many other scientific fields, reproducing experiments can <em>potentially</em> be very cheap in computer science. This is a fantastic feature! Reading papers always prompts questions of the kind ‘can system X handle problem Y?’. Just giving problem Y to system X is a much easier—and more fun—way of answering that question than to try and work it out on paper.</p> <p>Going from ‘potentially reproducible’ to ‘actually reproducible over time and different systems’ is however more of a leap than one would hope. I guestimate that the average number of errors that a researcher is willing to solve to get any given system X to run is less than the average number of errors it produces.</p> <p>Reliable software deployment is just <em>hard</em> and takes iterations of feedback from users on different systems and bugfixes. Research products seldom have a sufficiently large user base to iron out these deployment kinks, and often do not see sufficient maintenance over time. For this reason it is usually a good idea to provide research software artifacts not just as a source package, but also in deployed form on a virtual system.</p> <p>Provisioning a virtual machine is conceptually simple, but (as is often the case in dev ops), has plenty of pitfalls and gotchas. This blog post is not a this-is-a-new-and-fantastic-way-of-provisioning-VMs sort of post (we might get to that in the future), but rather a basic avoid-these-traps sort of post that I have written with the sole purpose of saving you time. At the end of this post I briefly discuss some more advanced tools for improving the process of provisioning, but are outside the scope of this particular post.</p> <p>I tend to not do things perfectly right the first time, and so I will do my best to present a process for preparing a VM that makes it easy to repeat it if necessary, without actually relying yet on specialized tools for provisioning the guest.</p> <h2 id="basic-concepts-of-qemu">Basic Concepts of QEMU</h2> <p>The base VM image that the international conference on functional programming (ICFP) provided this year was provisioned using QEMU, which appears to be <em>the preferred</em> cross-platform way to do this nowadays.</p> <p>In provisioning with the VM we will have to deal with a number of parties. In particular, we have to deal with (1) the <em>host</em>, (2) the <em>hypervisor</em>, (3) the <em>accelerator</em>, and finally (4) the <em>guest</em>. The host runs the hypervisor, which somehow emulates the guest, whose data resides on an image. Our hypervisor/emulator is QEMU. It offers various accelerators that determine how the emulation works. A reliable (but slow) cross-platform method is to simulate the guest processor entirely using the ‘tiny code generator’ (<code>-accel tcg</code>). Usually you want to use hardware acceleration using kernel base virtualization (<code>-accel kvm</code>) on Linux, the hardware virtualization framework (<code>-accel hfv</code>) on macOS, or the windows hypervisor platform (<code>-accel whpx</code>) on Windows.</p> <p>These concepts come together in the command that one uses to start up a guest. For example, if we want to use KVM, we would invoke QEMU as follows (taken from the ICFP ’20 <code>start.sh</code> script):</p> <div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">qemu-system-x86_64</span> <span class="kw">\\</span></span>\n<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>        <span class="ex">-name</span>   <span class="st">&quot;Artifact&quot;</span> <span class="kw">\\</span></span>\n<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        <span class="ex">-accel</span>  kvm <span class="kw">\\</span></span>\n<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        <span class="ex">-cpu</span>    max <span class="kw">\\</span></span>\n<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>        <span class="ex">-m</span>      4096 <span class="kw">\\</span></span>\n<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        <span class="ex">-hda</span>    box.qcow2 <span class="kw">\\</span></span>\n<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        <span class="ex">-device</span> e1000,netdev=net0 <span class="kw">\\</span></span>\n<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>        <span class="ex">-netdev</span> user,id=net0,hostfwd=tcp::5555-:22</span></code></pre></div> <p>Besides naming the guest system and choosing the acceleration method, it selects the host’s CPU to run on, and the amount of memory to make available to the guest, and the location of the image that contains the guest (<code>box.qcow2</code>). It also adds and names the (default, I believe) network card, so that we can forward port 5555/TCP on the host to the default SSH port (22/TCP) on the guest.</p> <h2 id="images-as-seen-from-the-outside-format-tools">Images as Seen from the Outside: Format &amp; Tools</h2> <p>We now turn our attention to the guest image <code>box.qcow2</code>. First we look into the format of the image, and the QEMU tools for manipulating images from the side of the host. Then we look at some tools that we need on the guest-side of the VM.</p> <h3 id="image-formats">Image Formats</h3> <p>QEMU supports a variety of image formats and can convert between them. For basic use, there are two formats that one should be aware of: <em>raw</em> and <em>qcow2</em>.</p> <p>The raw image format ensures that the guest and host see exactly the same bytes. This is useful, for example, if you want to be able to mount the guest image in the host as a loop device, or if need little overhead for disk IO in the guest. The downside of raw images is that consume the full amount of space that is allocated to the guest on the host’s disk. If you care about sharing your VM, this is not ideal.</p> <p>On the other hand, the qcow{,2,3} image format is a copy-on-write format that can grow dynamically. This means that you can create an image of 20Gb with good conscience, create a file-system on the guest that sees the full 20Gb, and it will only require little space on the host’s disk. As you start writing non-zero bits to the guest’s drive, the qcow formatted image will grow dynamically, upto ~20Gb.</p> <p>We create an image of a specified size using the following command:</p> <div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ex">qemu-img</span> create -f qcow2 box.qcow2 20G</span></code></pre></div> <h3 id="section"></h3> <h2 id="images-as-seen-from-the-inside">Images as Seen from the Inside</h2> <h3 id="resizing-an-image-shrinkwrap-before-sharing">Resizing an Image (Shrinkwrap before Sharing!)</h3> <h3 id="provisioning-the-guest">Provisioning the Guest</h3> <h2 id="better-automated-provisioning">Better Automated Provisioning</h2> <h2 id="summary">Summary</h2> <h2 id="conclusion">Conclusion</h2> <h2 id="resources">Resources</h2> <ul> <li><a href="https://www.qemu.org/">QEMU homepage</a></li> <li><a href="https://wiki.archlinux.org/index.php/QEMU">Arch Linux Wiki on QEMU</a></li> </ul> <h2 id="appendix-advice-to-artifact-evaluation-committees">Appendix: Advice to Artifact Evaluation Committees</h2> '},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(){return[i.default.createElement("style",{dangerouslySetInnerHTML:{__html:"\n        body {\n          background: linear-gradient(to bottom right, #80a32a, #232839 75%);\n        }"}}),i.default.createElement(c.default,{pub:p},i.default.createElement("h4",null,"Source Code"),i.default.createElement("p",null,"The implementation and the case studies are publically available on GitHub:"),i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("a",{href:"https://github.com/Metaborg/Ministatix.hs"},"MiniStatix")),i.default.createElement("li",null,i.default.createElement("a",{href:"https://github.com/MetaborgCube/java.mstx"},"Java Specification")),i.default.createElement("li",null,i.default.createElement("a",{href:"https://github.com/MetaborgCube/scala.mstx"},"Scala Specification")),i.default.createElement("li",null,i.default.createElement("a",{href:"https://github.com/MetaBorgCube/metaborg-lmr/tree/master/lang.lmr.mstx"},"LMR/Rust modules Specifiation"))),i.default.createElement("p",null,"All these projects with their dependencies are also available packaged as a virtual machine."),i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("a",{href:"https://doi.org/10.5281/zenodo.4068064"},"VM package"))))]}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var o=n(0),i=r(o),l=n(1),u=(r(l),n(19)),c=r(u),s=n(20),f=r(s),p=f.default.oopsla},function(e,t){e.exports={PaperContainer:"Paper__PaperContainer__lDy_E",Paper:"Paper__Paper__VpysH",Links:"Paper__Links__3InMP",Authors:"Paper__Authors__1AJYy",Abstract:"Paper__Abstract__25IUN"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(){return[i.default.createElement("style",{dangerouslySetInnerHTML:{__html:"\n        body {\n          background: linear-gradient(to bottom right, #264870, #232839 75%);\n        }"}}),i.default.createElement(c.default,{pub:p},i.default.createElement("h4",null,"Source Code"),i.default.createElement("p",null,"The Agda library and compiler are available on GitHub:"),i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("a",{href:"https://github.com/ajrouvoet/jvm.agda/tree/master"},"Agda compiler")),i.default.createElement("li",null,i.default.createElement("a",{href:"https://github.com/ajrouvoet/ternary.agda"},"Agda library"))),i.default.createElement("p",null,"All these projects with their dependencies are also available packaged as a virtual machine."),i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("a",{href:"https://doi.org/10.5281/zenodo.4071953"},"VM package"))))]}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var o=n(0),i=r(o),l=n(1),u=(r(l),n(19)),c=r(u),s=n(21),f=r(s),p=f.default.popl},function(e,t){e.exports=[{authors:[{who:"A.J. Rouvoet",affiliation:"TU Delft"},{who:"E. Schoute",affiliation:"TU Delft"},{who:"A.B. Booij",affiliation:"TU Delft"}],publication:null,title:"Systematic Testing of Hardware Compilers",subtitle:"Testing the DWARV C-to-VHDL Compiler",abstract:"DWARV is a C-to-VHDL compiler which can compile arbitrary C programs for a heterogeneous platform with minimal effort. Depending on the application this will imply faster execution. We give an overview of C-to-VHDL compilers. One important aspect of all software is its reliability, and we aim to assess DWARV’s reliability and the adequacy of its test suite. Based on the identified shortcomings of the test suite, we implement the test result framework Dummy. We explore some of the additional possibilities created by the usage of Dummy, and provide a plan to improve DWARV’s test suite. We conclude with an analysis of the results that show the advantages of the implemented test framework and proposed test plan.\n",links:{pdf:"https://repository.tudelft.nl/islandora/object/uuid:c3a55f25-b8df-43ec-bdf9-ba991d4eb843/datastream/OBJ/download"}}]},function(e,t){e.exports=[{authors:[{who:"A.J. Rouvoet",affiliation:"TU Delft"},{who:"S. Stucki (Supervisor)",affiliation:"EPFL"},{who:"E. Meijer (Supervisor)",affiliation:"TU Delft"}],subtitle:"A thesis submitted for the degree of Master of Computer Science at the Technical University Delft",publication:null,title:"Programs for Free",abstract:"Implicit resolution has been part of the Scala language for a while, but the formal system it constitutes and its properties have not been formalized. Oliveira et al. were the first to formalize a calculus of implicits λ⇒ based on the ideas of implicits in Scala. We propose a stronger calculus λS⇒, extending their results and closing the gap with the maximum achievable expressiveness of resolution on top of System F. We believe that the strengthened results provide new insights into implicit resolution and are a big step towards a formalization that is entirely faithful to Scala.\nWe give a partial algorithm for λS⇒ and use a proof-technique proposed by Abel & Altenkirch to establish its soundness and partial completeness independent of termination. To ensure that our results are correct and that it can be extended in the future, we made the language and proofs precise in the Agda dependently typed language.\n",links:{pdf:"https://repository.tudelft.nl/islandora/object/uuid:aef3c8fc-677a-4ecd-8850-d9d76937ba6f/datastream/OBJ/download",code:"https://github.com/ElessarWebb/implicits.agda"}}]},function(e,t){e.exports=[]},function(e,t){e.exports=[{authors:[{who:"Hendrik van Antwerpen",affiliation:"Delft University of Technology",site:"https://hendrik.van-antwerpen.net/publications/"},{who:"Casper Bach Poulsen",affiliation:"Delft University of Technology",site:"http://casperbp.net/"},{who:"Arjen Rouvoet",affiliation:"Delft University of Technology"},{who:"Eelco Visser",affiliation:"Delft University of Technology",site:"http://eelcovisser.org/"}],publication:null,title:"Scopes as Types",abstract:"Scope graphs are a promising generic framework for modeling the binding structures of programming languages, bridging formalization and implementation, supporting the definition of type checkers and the automation of type safety proofs. However, previous work on scope graphs has been limited to simple, nominal type systems. In this paper, we show that viewing scopes as types enables us to model the internal structure of types in a range of non-simple type systems (including structural records and generic classes) using the generic representation of scopes. Further, we show that relations between such types can be expressed in terms of generalized scope graph queries. We extend scope graphs with scoped relations and queries. We introduce Statix, a new domain-specific meta-language for the specification of static semantics, based on scope graphs and constraints. We evaluate the scopes as types approach and the Statix design in case studies of the simply-typed lambda calculus with records, System F, and Featherweight Generic Java.\n",links:{pdf:"https://dl.acm.org/citation.cfm?doid=3288538.3276484"}},{authors:[{who:"Casper Bach Poulsen",affiliation:"Delft University of Technology",site:"http://casperbp.net/"},{who:"Arjen Rouvoet",affiliation:"Delft University of Technology"},{who:"Andrew Tolmach",affiliation:"Portland State University",site:"http://web.cecs.pdx.edu/~apt/"},{who:"Robbert Krebbers",affiliation:"Delft University of Technology",site:"https://robbertkrebbers.nl/"},{who:"Eelco Visser",affiliation:"Delft University of Technology",site:"http://eelcovisser.org/"}],publication:null,title:"Intrinsically-Typed Definitional Interpreters for Imperative Languages",abstract:"A definitional interpreter defines the semantics of an object language in terms of the (well-known) semantics of a host language, enabling understanding and validation of the semantics through execution. Combining a definitional interpreter with a separate type system requires a separate type safety proof. An alternative approach, at least for pure object languages, is to use a dependently-typed language to encode the object language type system in the definition of the abstract syntax. Using such intrinsically-typed abstract syntax definitions allows the host language type checker to verify automatically that the interpreter satisfies type safety. Does this approach scale to larger and more realistic object languages, and in particular to languages with mutable state and objects?\nIn this paper, we describe and demonstrate techniques and libraries in Agda that successfully scale up intrinsically-typed definitional interpreters to handle rich object languages with non-trivial binding structures and mutable state. While the resulting interpreters are certainly more complex than the simply-typed lambda-calculus interpreter we start with, we claim that they still meet the goals of being concise, comprehensible, and executable, while guaranteeing type safety for more elaborate object languages. We make the following contributions: (1) A dependent-passing style technique for hiding the weakening of indexed values as they propagate through monadic code. (2) An Agda library for programming with scope graphs and frames, which provides a uniform approach to dealing with name binding in intrinsically-typed interpreters. (3) Case studies of intrinsically-typed definitional interpreters for the simply-typed lambda-calculus with references (STLC+Ref) and for a large subset of Middleweight Java (MJ).\n",links:{pdf:"http://casperbp.net/store/intrinsicallytyped.pdf",code:"https://github.com/metaborg/mj.agda",site:"https://metaborg.github.io/mj.agda/","POPL talk":"https://www.youtube.com/watch?v=8gT13KSZNRk"}}]},function(e,t){e.exports=[{title:"Attending SPLV (online)",date:"August 2020"},{title:"Talk at AIM",date:"May 2020"},{title:'Talk at LFCS Seminar (<a href="https://www.youtube.com/watch?v=9WmOmpyz_qo">find it here</a>)',date:"April 2020"},{title:"Attending POPL & CPP in New Orleans",date:"Jan 2020"},{title:"Attending PLNL in Nijmegen, NL",date:"Dec 2019"},{title:"Attending POPL in Lisbon",date:"Jan 2019"},{title:"Attending EU Types meeting in Aarhus, Denmark",date:"October 2018"},{title:"Attending OPLSS in Eugene",date:"July 2018"},{title:"Attending POPL in Los Angeles",date:"January 2018"},{title:"Attending POPL in Paris",date:"January 2017"}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,